
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jan 17 16:07:29 CET 2012
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jan 17 16:07:29 CET 2012
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\115\005" +
    "\000\002\115\007\000\002\115\010\000\002\116\003\000" +
    "\002\116\004\000\002\102\004\000\002\102\004\000\002" +
    "\100\007\000\002\117\004\000\002\117\005\000\002\040" +
    "\003\000\002\040\005\000\002\040\005\000\002\040\010" +
    "\000\002\040\004\000\002\040\007\000\002\040\004\000" +
    "\002\041\003\000\002\041\005\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\005\000\002\044" +
    "\003\000\002\044\005\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\106\004\000\002\106\005\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\006\003\000" +
    "\002\006\005\000\002\006\004\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\050\004\000\002\051\004" +
    "\000\002\051\006\000\002\051\010\000\002\012\004\000" +
    "\002\012\006\000\002\012\010\000\002\012\006\000\002" +
    "\012\007\000\002\012\011\000\002\012\007\000\002\012" +
    "\007\000\002\012\011\000\002\012\007\000\002\054\003" +
    "\000\002\054\005\000\002\053\003\000\002\053\005\000" +
    "\002\052\003\000\002\052\005\000\002\056\003\000\002" +
    "\056\005\000\002\055\003\000\002\055\005\000\002\057" +
    "\003\000\002\057\004\000\002\014\004\000\002\045\003" +
    "\000\002\045\005\000\002\015\004\000\002\015\006\000" +
    "\002\015\010\000\002\013\004\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\073\007\000\002\073\006\000\002\073\011\000" +
    "\002\073\012\000\002\110\006\000\002\110\007\000\002" +
    "\074\006\000\002\074\011\000\002\075\010\000\002\075" +
    "\013\000\002\076\010\000\002\076\006\000\002\076\011" +
    "\000\002\076\011\000\002\076\014\000\002\112\005\000" +
    "\002\112\006\000\002\111\003\000\002\111\004\000\002" +
    "\111\006\000\002\111\006\000\002\077\006\000\002\114" +
    "\003\000\002\114\005\000\002\113\003\000\002\113\005" +
    "\000\002\103\003\000\002\103\006\000\002\104\003\000" +
    "\002\104\004\000\002\047\004\000\002\047\005\000\002" +
    "\025\003\000\002\025\003\000\002\021\003\000\002\021" +
    "\005\000\002\023\003\000\002\023\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\027\003\000\002\027\004\000\002\031\004" +
    "\000\002\031\003\000\002\032\005\000\002\032\006\000" +
    "\002\032\007\000\002\030\004\000\002\030\003\000\002" +
    "\033\003\000\002\033\004\000\002\033\005\000\002\034" +
    "\003\000\002\034\004\000\002\034\005\000\002\022\005" +
    "\000\002\022\006\000\002\026\004\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\004\000\002" +
    "\061\003\000\002\061\004\000\002\063\004\000\002\063" +
    "\005\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\004\000\002\062\005\000\002\062\006\000" +
    "\002\062\005\000\002\062\004\000\002\062\005\000\002" +
    "\062\004\000\002\064\003\000\002\064\004\000\002\101" +
    "\006\000\002\101\010\000\002\101\011\000\002\060\003" +
    "\000\002\060\004\000\002\060\004\000\002\060\005\000" +
    "\002\060\007\000\002\060\007\000\002\060\004\000\002" +
    "\066\004\000\002\066\005\000\002\066\003\000\002\065" +
    "\003\000\002\065\004\000\002\065\005\000\002\035\003" +
    "\000\002\035\003\000\002\036\006\000\002\036\007\000" +
    "\002\037\004\000\002\037\005\000\002\070\003\000\002" +
    "\070\003\000\002\067\006\000\002\067\007\000\002\071" +
    "\004\000\002\071\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a3\000\120\002\ufffd\007\100\010\067\011\047\012" +
    "\076\014\036\015\032\021\056\023\062\024\010\025\105" +
    "\026\077\027\073\032\022\035\024\036\072\037\021\040" +
    "\063\041\065\042\057\043\114\044\034\047\054\050\075" +
    "\070\026\072\011\074\031\076\035\103\005\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\017" +
    "\131\023\132\107\001\002\000\040\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\004\131\174\001\002\000\004\002\001\001\002" +
    "\000\006\065\uffd5\125\uffd5\001\002\000\006\055\u0180\131" +
    "\174\001\002\000\044\032\022\047\054\050\075\070\026" +
    "\072\011\073\u0176\074\031\076\035\116\060\117\061\120" +
    "\013\121\025\122\071\123\041\124\113\131\023\132\107" +
    "\001\002\000\120\002\ufffd\007\100\010\067\011\047\012" +
    "\076\014\036\015\032\021\056\023\062\024\010\025\105" +
    "\026\077\027\073\032\022\035\024\036\072\037\021\040" +
    "\063\041\065\042\057\043\114\044\034\047\054\050\075" +
    "\070\026\072\011\074\031\076\035\103\005\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\017" +
    "\131\023\132\107\001\002\000\140\005\uff00\006\uff00\023" +
    "\uff00\026\uff00\030\uff00\031\uff00\033\uff00\034\uff00\046\uff00" +
    "\047\uff00\050\uff00\051\uff00\052\uff00\053\uff00\054\uff00\055" +
    "\uff00\056\uff00\057\uff00\060\uff00\061\uff00\062\uff00\063\uff00" +
    "\064\uff00\065\uff00\066\uff00\067\uff00\070\uff00\071\uff00\073" +
    "\uff00\074\uff00\075\uff00\077\uff00\100\uff00\101\uff00\102\uff00" +
    "\104\uff00\105\uff00\106\uff00\107\uff00\110\uff00\111\uff00\112" +
    "\uff00\113\uff00\114\uff00\115\uff00\125\uff00\126\uff00\001\002" +
    "\000\132\005\u015c\006\uff71\023\uff71\026\uff71\030\u0162\031" +
    "\u015d\033\u0163\034\u015f\046\u0161\047\u015e\050\u016e\051\u016a" +
    "\052\u016c\053\u015a\054\u0160\056\u016d\057\u0165\060\u016f\061" +
    "\u0166\062\u0170\063\u0171\064\uff71\065\uff71\066\uff71\067\uff71" +
    "\071\uff71\073\uff71\075\uff71\077\u016b\100\u015b\101\u0168\102" +
    "\u0164\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71\111\uff71" +
    "\112\uff71\113\uff71\114\uff71\115\uff71\125\uff71\126\u0169\001" +
    "\002\000\006\065\uffd7\125\uffd7\001\002\000\006\065\uffbe" +
    "\125\uffbe\001\002\000\120\002\ufffd\007\100\010\067\011" +
    "\047\012\076\014\036\015\032\021\056\023\062\024\010" +
    "\025\105\026\077\027\073\032\022\035\024\036\072\037" +
    "\021\040\063\041\065\042\057\043\114\044\034\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\103\005\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\017\131\023\132\107\001\002\000\122\002\uff94\007" +
    "\uff94\010\uff94\011\uff94\012\uff94\014\uff94\015\uff94\021\uff94" +
    "\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\032\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\047\uff94\050\uff94\070\uff94\072\uff94\074\uff94\076" +
    "\uff94\103\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\uff94" +
    "\123\uff94\124\uff94\125\uff94\130\uff94\131\uff94\132\uff94\001" +
    "\002\000\042\032\022\047\054\050\075\070\026\072\011" +
    "\074\031\076\035\116\060\117\061\120\013\121\025\122" +
    "\071\123\041\124\113\131\023\132\107\001\002\000\014" +
    "\051\u0117\067\u014f\074\u011b\126\u0118\131\u011c\001\002\000" +
    "\140\005\uff6d\006\uff6d\023\uff6d\026\uff6d\030\uff6d\031\uff6d" +
    "\033\uff6d\034\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067" +
    "\uff6d\070\uff6d\071\uff6d\073\uff6d\074\uff6d\075\uff6d\077\uff6d" +
    "\100\uff6d\101\uff6d\102\uff6d\104\uff6d\105\uff6d\106\uff6d\107" +
    "\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\114\uff6d\115\uff6d" +
    "\125\uff6d\126\uff6d\001\002\000\006\065\uffd8\125\uffd8\001" +
    "\002\000\140\005\ufeff\006\ufeff\023\ufeff\026\ufeff\030\ufeff" +
    "\031\ufeff\033\ufeff\034\ufeff\046\ufeff\047\ufeff\050\ufeff\051" +
    "\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff\056\ufeff\057\ufeff" +
    "\060\ufeff\061\ufeff\062\ufeff\063\ufeff\064\ufeff\065\ufeff\066" +
    "\ufeff\067\ufeff\070\ufeff\071\ufeff\073\ufeff\074\ufeff\075\ufeff" +
    "\077\ufeff\100\ufeff\101\ufeff\102\ufeff\104\ufeff\105\ufeff\106" +
    "\ufeff\107\ufeff\110\ufeff\111\ufeff\112\ufeff\113\ufeff\114\ufeff" +
    "\115\ufeff\125\ufeff\126\ufeff\001\002\000\044\032\022\047" +
    "\054\050\075\070\026\071\u0149\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\131\023\132\107\001\002\000\006\065\uffda\125\uffda" +
    "\001\002\000\006\065\uffd4\125\uffd4\001\002\000\046\032" +
    "\022\044\034\047\054\050\075\070\026\072\011\074\031" +
    "\075\u0137\076\035\116\060\117\061\120\013\121\025\122" +
    "\071\123\041\124\113\131\023\132\107\001\002\000\040" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\131\023\132\107\001\002\000\006\065\uffdb\125\uffdb\001" +
    "\002\000\050\032\022\047\054\050\075\065\uff62\070\026" +
    "\072\011\074\031\075\uff62\076\035\116\060\117\061\120" +
    "\013\121\025\122\071\123\041\124\113\125\uff62\131\023" +
    "\132\107\001\002\000\040\047\uff05\050\uff05\070\uff05\072" +
    "\uff05\074\uff05\076\uff05\116\uff05\117\uff05\120\uff05\121\uff05" +
    "\122\uff05\123\uff05\124\uff05\131\uff05\132\uff05\001\002\000" +
    "\004\131\u0111\001\002\000\140\005\uff6f\006\uff6f\023\uff6f" +
    "\026\uff6f\030\uff6f\031\uff6f\033\uff6f\034\uff6f\046\uff6f\047" +
    "\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\333" +
    "\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\070\331\071\uff6f\073\uff6f" +
    "\074\332\075\uff6f\077\uff6f\100\uff6f\101\uff6f\102\uff6f\104" +
    "\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f\112\uff6f" +
    "\113\uff6f\114\uff6f\115\uff6f\125\uff6f\126\uff6f\001\002\000" +
    "\122\002\uff95\007\uff95\010\uff95\011\uff95\012\uff95\014\uff95" +
    "\015\uff95\021\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027" +
    "\uff95\032\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\047\uff95\050\uff95\070\uff95\072" +
    "\uff95\074\uff95\076\uff95\103\uff95\116\uff95\117\uff95\120\uff95" +
    "\121\uff95\122\uff95\123\uff95\124\uff95\125\uff95\130\uff95\131" +
    "\uff95\132\uff95\001\002\000\140\005\uff04\006\uff04\023\uff04" +
    "\026\uff04\030\uff04\031\uff04\033\uff04\034\uff04\046\uff04\047" +
    "\uff04\050\uff04\051\uff04\052\uff04\053\uff04\054\uff04\055\uff04" +
    "\056\uff04\057\uff04\060\uff04\061\uff04\062\uff04\063\uff04\064" +
    "\uff04\065\uff04\066\uff04\067\uff04\070\uff04\071\uff04\073\uff04" +
    "\074\uff04\075\uff04\077\uff04\100\uff04\101\uff04\102\uff04\104" +
    "\uff04\105\uff04\106\uff04\107\uff04\110\uff04\111\uff04\112\uff04" +
    "\113\uff04\114\uff04\115\uff04\125\uff04\126\uff04\001\002\000" +
    "\006\065\uffd6\125\uffd6\001\002\000\006\065\uffbf\125\uffbf" +
    "\001\002\000\122\002\uff9a\007\uff9a\010\uff9a\011\uff9a\012" +
    "\uff9a\014\uff9a\015\uff9a\021\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\032\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\047\uff9a\050\uff9a" +
    "\070\uff9a\072\uff9a\074\uff9a\076\uff9a\103\uff9a\116\uff9a\117" +
    "\uff9a\120\uff9a\121\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a" +
    "\130\uff9a\131\uff9a\132\uff9a\001\002\000\122\002\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\012\uff9b\014\uff9b\015\uff9b\021\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\032\uff9b\035" +
    "\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b" +
    "\044\uff9b\047\uff9b\050\uff9b\070\uff9b\072\uff9b\074\uff9b\076" +
    "\uff9b\103\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b\122\uff9b" +
    "\123\uff9b\124\uff9b\125\uff9b\130\uff9b\131\uff9b\132\uff9b\001" +
    "\002\000\004\002\327\001\002\000\004\131\314\001\002" +
    "\000\010\011\ufff9\014\ufff9\103\ufff9\001\002\000\034\065" +
    "\uffd2\066\302\104\300\105\301\106\275\107\276\110\310" +
    "\111\277\112\303\113\307\114\274\115\304\125\uffd2\001" +
    "\002\000\122\002\uff97\007\uff97\010\uff97\011\uff97\012\uff97" +
    "\014\uff97\015\uff97\021\uff97\023\uff97\024\uff97\025\uff97\026" +
    "\uff97\027\uff97\032\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\043\uff97\044\uff97\047\uff97\050\uff97\070" +
    "\uff97\072\uff97\074\uff97\076\uff97\103\uff97\116\uff97\117\uff97" +
    "\120\uff97\121\uff97\122\uff97\123\uff97\124\uff97\125\uff97\130" +
    "\uff97\131\uff97\132\uff97\001\002\000\060\006\uff73\023\uff73" +
    "\026\uff73\051\uff73\064\uff73\065\uff73\066\uff73\067\uff73\071" +
    "\uff73\073\uff73\075\uff73\104\uff73\105\uff73\106\uff73\107\uff73" +
    "\110\uff73\111\uff73\112\uff73\113\uff73\114\uff73\115\uff73\125" +
    "\uff73\126\uff73\001\002\000\040\047\uff06\050\uff06\070\uff06" +
    "\072\uff06\074\uff06\076\uff06\116\uff06\117\uff06\120\uff06\121" +
    "\uff06\122\uff06\123\uff06\124\uff06\131\uff06\132\uff06\001\002" +
    "\000\122\002\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014" +
    "\uffe2\015\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\027\uffe2\032\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\047\uffe2\050\uffe2\070\uffe2" +
    "\072\uffe2\074\uffe2\076\uffe2\103\uffe2\116\uffe2\117\uffe2\120" +
    "\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\125\uffe2\130\uffe2" +
    "\131\uffe2\132\uffe2\001\002\000\040\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\042\032\022\047\054\050\075\070\026\072\011" +
    "\074\031\076\035\116\060\117\061\120\013\121\025\122" +
    "\071\123\041\124\113\131\023\132\107\001\002\000\140" +
    "\005\uff01\006\uff01\023\uff01\026\uff01\030\uff01\031\uff01\033" +
    "\uff01\034\uff01\046\uff01\047\uff01\050\uff01\051\uff01\052\uff01" +
    "\053\uff01\054\uff01\055\uff01\056\uff01\057\uff01\060\uff01\061" +
    "\uff01\062\uff01\063\uff01\064\uff01\065\uff01\066\uff01\067\uff01" +
    "\070\uff01\071\uff01\073\uff01\074\uff01\075\uff01\077\uff01\100" +
    "\uff01\101\uff01\102\uff01\104\uff01\105\uff01\106\uff01\107\uff01" +
    "\110\uff01\111\uff01\112\uff01\113\uff01\114\uff01\115\uff01\125" +
    "\uff01\126\uff01\001\002\000\140\005\uff02\006\uff02\023\uff02" +
    "\026\uff02\030\uff02\031\uff02\033\uff02\034\uff02\046\uff02\047" +
    "\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02\055\uff02" +
    "\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063\uff02\064" +
    "\uff02\065\uff02\066\uff02\067\uff02\070\uff02\071\uff02\073\uff02" +
    "\074\uff02\075\uff02\077\uff02\100\uff02\101\uff02\102\uff02\104" +
    "\uff02\105\uff02\106\uff02\107\uff02\110\uff02\111\uff02\112\uff02" +
    "\113\uff02\114\uff02\115\uff02\125\uff02\126\uff02\001\002\000" +
    "\040\047\054\050\075\070\026\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\131\023\132\107\001\002\000\042\032\022\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\131\023" +
    "\132\107\001\002\000\010\011\047\014\036\103\005\001" +
    "\002\000\004\067\211\001\002\000\050\023\uff59\026\uff59" +
    "\064\207\065\uff59\066\uff59\067\uff59\071\uff59\075\uff59\104" +
    "\uff59\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\112\uff59" +
    "\113\uff59\114\uff59\115\uff59\125\uff59\001\002\000\006\065" +
    "\uffc1\125\uffc1\001\002\000\006\065\uffd9\125\uffd9\001\002" +
    "\000\140\005\ufefe\006\ufefe\023\ufefe\026\ufefe\030\ufefe\031" +
    "\ufefe\033\ufefe\034\ufefe\046\ufefe\047\ufefe\050\ufefe\051\ufefe" +
    "\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe\057\ufefe\060" +
    "\ufefe\061\ufefe\062\ufefe\063\ufefe\064\ufefe\065\ufefe\066\ufefe" +
    "\067\ufefe\070\ufefe\071\ufefe\073\ufefe\074\ufefe\075\ufefe\077" +
    "\ufefe\100\ufefe\101\ufefe\102\ufefe\104\ufefe\105\ufefe\106\ufefe" +
    "\107\ufefe\110\ufefe\111\ufefe\112\ufefe\113\ufefe\114\ufefe\115" +
    "\ufefe\125\ufefe\126\ufefe\001\002\000\050\032\022\047\054" +
    "\050\075\065\uffc5\070\026\072\011\074\031\076\035\102" +
    "\204\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\125\uffc5\131\023\132\107\001\002\000\004\131" +
    "\174\001\002\000\122\002\uff99\007\uff99\010\uff99\011\uff99" +
    "\012\uff99\014\uff99\015\uff99\021\uff99\023\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\032\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\047\uff99\050" +
    "\uff99\070\uff99\072\uff99\074\uff99\076\uff99\103\uff99\116\uff99" +
    "\117\uff99\120\uff99\121\uff99\122\uff99\123\uff99\124\uff99\125" +
    "\uff99\130\uff99\131\uff99\132\uff99\001\002\000\040\047\uff07" +
    "\050\uff07\070\uff07\072\uff07\074\uff07\076\uff07\116\uff07\117" +
    "\uff07\120\uff07\121\uff07\122\uff07\123\uff07\124\uff07\131\uff07" +
    "\132\uff07\001\002\000\006\065\uffc0\125\uffc0\001\002\000" +
    "\042\032\022\047\054\050\075\070\026\072\011\074\031" +
    "\076\035\116\060\117\061\120\013\121\025\122\071\123" +
    "\041\124\113\131\023\132\107\001\002\000\042\032\022" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\131\023\132\107\001\002\000\122\002\uff96\007\uff96\010" +
    "\uff96\011\uff96\012\uff96\014\uff96\015\uff96\021\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\027\uff96\032\uff96\035\uff96\036" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\047\uff96\050\uff96\070\uff96\072\uff96\074\uff96\076\uff96\103" +
    "\uff96\116\uff96\117\uff96\120\uff96\121\uff96\122\uff96\123\uff96" +
    "\124\uff96\125\uff96\130\uff96\131\uff96\132\uff96\001\002\000" +
    "\006\065\uffbd\125\uffbd\001\002\000\060\006\uff72\023\uff72" +
    "\026\uff72\051\uff72\064\uff72\065\uff72\066\uff72\067\uff72\071" +
    "\uff72\073\uff72\075\uff72\104\uff72\105\uff72\106\uff72\107\uff72" +
    "\110\uff72\111\uff72\112\uff72\113\uff72\114\uff72\115\uff72\125" +
    "\uff72\126\uff72\001\002\000\122\002\uff98\007\uff98\010\uff98" +
    "\011\uff98\012\uff98\014\uff98\015\uff98\021\uff98\023\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\032\uff98\035\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\047" +
    "\uff98\050\uff98\070\uff98\072\uff98\074\uff98\076\uff98\103\uff98" +
    "\116\uff98\117\uff98\120\uff98\121\uff98\122\uff98\123\uff98\124" +
    "\uff98\125\uff98\130\uff98\131\uff98\132\uff98\001\002\000\004" +
    "\131\146\001\002\000\140\005\uff6c\006\uff6c\023\uff6c\026" +
    "\uff6c\030\uff6c\031\uff6c\033\uff6c\034\uff6c\046\uff6c\047\uff6c" +
    "\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056" +
    "\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c" +
    "\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\073\uff6c\074" +
    "\uff6c\075\uff6c\077\uff6c\100\uff6c\101\uff6c\102\uff6c\104\uff6c" +
    "\105\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113" +
    "\uff6c\114\uff6c\115\uff6c\125\uff6c\126\uff6c\001\002\000\140" +
    "\005\uff6b\006\uff6b\023\uff6b\026\uff6b\030\uff6b\031\uff6b\033" +
    "\uff6b\034\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061" +
    "\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b\067\uff6b" +
    "\070\uff6b\071\uff6b\073\uff6b\074\uff6b\075\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\102\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b" +
    "\110\uff6b\111\uff6b\112\uff6b\113\uff6b\114\uff6b\115\uff6b\125" +
    "\uff6b\126\uff6b\001\002\000\006\065\136\125\137\001\002" +
    "\000\122\002\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3" +
    "\027\uffe3\032\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\043\uffe3\044\uffe3\047\uffe3\050\uffe3\070\uffe3" +
    "\072\uffe3\074\uffe3\076\uffe3\103\uffe3\116\uffe3\117\uffe3\120" +
    "\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\125\uffe3\130\uffe3" +
    "\131\uffe3\132\uffe3\001\002\000\006\065\uffd3\125\uffd3\001" +
    "\002\000\140\005\uff03\006\uff03\023\uff03\026\uff03\030\uff03" +
    "\031\uff03\033\uff03\034\uff03\046\uff03\047\uff03\050\uff03\051" +
    "\uff03\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03\057\uff03" +
    "\060\uff03\061\uff03\062\uff03\063\uff03\064\uff03\065\uff03\066" +
    "\uff03\067\uff03\070\uff03\071\uff03\073\uff03\074\uff03\075\uff03" +
    "\077\uff03\100\uff03\101\uff03\102\uff03\104\uff03\105\uff03\106" +
    "\uff03\107\uff03\110\uff03\111\uff03\112\uff03\113\uff03\114\uff03" +
    "\115\uff03\125\uff03\126\uff03\001\002\000\042\032\022\047" +
    "\054\050\075\070\026\072\011\074\031\076\035\116\060" +
    "\117\061\120\013\121\025\122\071\123\041\124\113\131" +
    "\023\132\107\001\002\000\004\067\124\001\002\000\010" +
    "\006\122\064\uff7b\067\uff7b\001\002\000\006\064\120\067" +
    "\uff7d\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\004\067\uff7c\001\002\000\040\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\006\064\uff7a\067\uff7a\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\122\002\uff7e\007" +
    "\uff7e\010\uff7e\011\uff7e\012\uff7e\014\uff7e\015\uff7e\021\uff7e" +
    "\023\uff7e\024\uff7e\025\uff7e\026\uff7e\027\uff7e\032\uff7e\035" +
    "\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042\uff7e\043\uff7e" +
    "\044\uff7e\047\uff7e\050\uff7e\070\uff7e\072\uff7e\074\uff7e\076" +
    "\uff7e\103\uff7e\116\uff7e\117\uff7e\120\uff7e\121\uff7e\122\uff7e" +
    "\123\uff7e\124\uff7e\125\uff7e\130\uff7e\131\uff7e\132\uff7e\001" +
    "\002\000\004\127\130\001\002\000\132\002\uff79\007\uff79" +
    "\010\uff79\011\uff79\012\uff79\014\uff79\015\uff79\016\uff79\017" +
    "\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79" +
    "\026\uff79\027\uff79\032\uff79\035\uff79\036\uff79\037\uff79\040" +
    "\uff79\041\uff79\042\uff79\043\uff79\044\uff79\047\uff79\050\uff79" +
    "\070\uff79\072\uff79\074\uff79\076\uff79\103\uff79\116\uff79\117" +
    "\uff79\120\uff79\121\uff79\122\uff79\123\uff79\124\uff79\125\uff79" +
    "\130\uff79\131\uff79\132\uff79\001\002\000\114\007\100\010" +
    "\067\011\047\012\076\014\036\015\032\021\056\023\062" +
    "\024\010\025\105\026\077\027\073\032\022\035\024\036" +
    "\072\037\021\040\063\041\065\042\057\043\114\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\103" +
    "\005\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\131\023\132\107\001\002\000\116\007\100\010" +
    "\067\011\047\012\076\014\036\015\032\021\056\023\062" +
    "\024\010\025\105\026\077\027\073\032\022\035\024\036" +
    "\072\037\021\040\063\041\065\042\057\043\114\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\103" +
    "\005\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\130\133\131\023\132\107\001\002\000\116\007" +
    "\uff77\010\uff77\011\uff77\012\uff77\014\uff77\015\uff77\021\uff77" +
    "\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\032\uff77\035" +
    "\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042\uff77\043\uff77" +
    "\044\uff77\047\uff77\050\uff77\070\uff77\072\uff77\074\uff77\076" +
    "\uff77\103\uff77\116\uff77\117\uff77\120\uff77\121\uff77\122\uff77" +
    "\123\uff77\124\uff77\130\uff77\131\uff77\132\uff77\001\002\000" +
    "\132\002\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78" +
    "\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78\022\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\032\uff78\035\uff78" +
    "\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78\043\uff78\044" +
    "\uff78\047\uff78\050\uff78\070\uff78\072\uff78\074\uff78\076\uff78" +
    "\103\uff78\116\uff78\117\uff78\120\uff78\121\uff78\122\uff78\123" +
    "\uff78\124\uff78\125\uff78\130\uff78\131\uff78\132\uff78\001\002" +
    "\000\116\007\uff76\010\uff76\011\uff76\012\uff76\014\uff76\015" +
    "\uff76\021\uff76\023\uff76\024\uff76\025\uff76\026\uff76\027\uff76" +
    "\032\uff76\035\uff76\036\uff76\037\uff76\040\uff76\041\uff76\042" +
    "\uff76\043\uff76\044\uff76\047\uff76\050\uff76\070\uff76\072\uff76" +
    "\074\uff76\076\uff76\103\uff76\116\uff76\117\uff76\120\uff76\121" +
    "\uff76\122\uff76\123\uff76\124\uff76\130\uff76\131\uff76\132\uff76" +
    "\001\002\000\006\065\142\125\143\001\002\000\076\007" +
    "\100\010\067\012\076\015\032\021\056\024\010\025\105" +
    "\027\073\032\022\035\024\036\072\037\021\040\063\044" +
    "\034\047\054\050\075\070\026\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\125\140\131\023\132\107\001\002\000\132\002\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\032\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1\047\uffe1" +
    "\050\uffe1\070\uffe1\072\uffe1\074\uffe1\076\uffe1\103\uffe1\116" +
    "\uffe1\117\uffe1\120\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1" +
    "\125\uffe1\130\uffe1\131\uffe1\132\uffe1\001\002\000\132\002" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\035\uffe0\036\uffe0" +
    "\037\uffe0\040\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\047" +
    "\uffe0\050\uffe0\070\uffe0\072\uffe0\074\uffe0\076\uffe0\103\uffe0" +
    "\116\uffe0\117\uffe0\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\130\uffe0\131\uffe0\132\uffe0\001\002\000\006" +
    "\065\uffdd\125\uffdd\001\002\000\076\007\100\010\067\012" +
    "\076\015\032\021\056\024\010\025\105\027\073\032\022" +
    "\035\024\036\072\037\021\040\063\044\034\047\054\050" +
    "\075\070\026\072\011\074\031\076\035\116\060\117\061" +
    "\120\013\121\025\122\071\123\041\124\113\125\144\131" +
    "\023\132\107\001\002\000\132\002\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\032\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\047\uffdf\050\uffdf\070\uffdf" +
    "\072\uffdf\074\uffdf\076\uffdf\103\uffdf\116\uffdf\117\uffdf\120" +
    "\uffdf\121\uffdf\122\uffdf\123\uffdf\124\uffdf\125\uffdf\130\uffdf" +
    "\131\uffdf\132\uffdf\001\002\000\132\002\uffde\007\uffde\010" +
    "\uffde\011\uffde\012\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\027\uffde\032\uffde\035\uffde\036\uffde\037\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\047\uffde\050\uffde\070" +
    "\uffde\072\uffde\074\uffde\076\uffde\103\uffde\116\uffde\117\uffde" +
    "\120\uffde\121\uffde\122\uffde\123\uffde\124\uffde\125\uffde\130" +
    "\uffde\131\uffde\132\uffde\001\002\000\006\065\uffdc\125\uffdc" +
    "\001\002\000\010\064\150\065\uffa1\125\uffa1\001\002\000" +
    "\006\065\uffa2\125\uffa2\001\002\000\004\131\146\001\002" +
    "\000\006\065\uffa0\125\uffa0\001\002\000\006\065\uff9c\125" +
    "\uff9c\001\002\000\004\067\154\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\126\002\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\014\uff92\015\uff92\016\157" +
    "\017\156\021\uff92\023\uff92\024\uff92\025\uff92\026\uff92\027" +
    "\uff92\032\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\044\uff92\047\uff92\050\uff92\070\uff92\072" +
    "\uff92\074\uff92\076\uff92\103\uff92\116\uff92\117\uff92\120\uff92" +
    "\121\uff92\122\uff92\123\uff92\124\uff92\125\uff92\130\uff92\131" +
    "\uff92\132\uff92\001\002\000\004\067\170\001\002\000\042" +
    "\032\022\047\054\050\075\070\026\072\011\074\031\076" +
    "\035\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\131\023\132\107\001\002\000\124\002\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\014\uff93\015\uff93\017\161" +
    "\021\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\032" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\047\uff93\050\uff93\070\uff93\072\uff93\074" +
    "\uff93\076\uff93\103\uff93\116\uff93\117\uff93\120\uff93\121\uff93" +
    "\122\uff93\123\uff93\124\uff93\125\uff93\130\uff93\131\uff93\132" +
    "\uff93\001\002\000\004\067\162\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\122\002\uff90\007" +
    "\uff90\010\uff90\011\uff90\012\uff90\014\uff90\015\uff90\021\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\027\uff90\032\uff90\035" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\044\uff90\047\uff90\050\uff90\070\uff90\072\uff90\074\uff90\076" +
    "\uff90\103\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90" +
    "\123\uff90\124\uff90\125\uff90\130\uff90\131\uff90\132\uff90\001" +
    "\002\000\004\067\165\001\002\000\076\007\100\010\067" +
    "\012\076\015\032\021\056\024\010\025\105\027\073\032" +
    "\022\035\024\036\072\037\021\040\063\044\034\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\126" +
    "\131\023\132\107\001\002\000\126\002\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\012\uff8f\014\uff8f\015\uff8f\016\157\017\uff8f" +
    "\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027\uff8f\032" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\047\uff8f\050\uff8f\070\uff8f\072\uff8f\074" +
    "\uff8f\076\uff8f\103\uff8f\116\uff8f\117\uff8f\120\uff8f\121\uff8f" +
    "\122\uff8f\123\uff8f\124\uff8f\125\uff8f\130\uff8f\131\uff8f\132" +
    "\uff8f\001\002\000\124\002\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\012\uff8e\014\uff8e\015\uff8e\017\uff8e\021\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\027\uff8e\032\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\047" +
    "\uff8e\050\uff8e\070\uff8e\072\uff8e\074\uff8e\076\uff8e\103\uff8e" +
    "\116\uff8e\117\uff8e\120\uff8e\121\uff8e\122\uff8e\123\uff8e\124" +
    "\uff8e\125\uff8e\130\uff8e\131\uff8e\132\uff8e\001\002\000\076" +
    "\007\100\010\067\012\076\015\032\021\056\024\010\025" +
    "\105\027\073\032\022\035\024\036\072\037\021\040\063" +
    "\044\034\047\054\050\075\070\026\072\011\074\031\076" +
    "\035\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\125\126\131\023\132\107\001\002\000\122\002" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\014\uff91\015\uff91" +
    "\021\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\032" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\047\uff91\050\uff91\070\uff91\072\uff91\074" +
    "\uff91\076\uff91\103\uff91\116\uff91\117\uff91\120\uff91\121\uff91" +
    "\122\uff91\123\uff91\124\uff91\125\uff91\130\uff91\131\uff91\132" +
    "\uff91\001\002\000\012\006\202\064\uffac\065\uffac\125\uffac" +
    "\001\002\000\010\064\200\065\uffb8\125\uffb8\001\002\000" +
    "\020\006\uffaa\027\uffaa\055\176\064\uffaa\065\uffaa\074\uffaa" +
    "\125\uffaa\001\002\000\010\064\uffae\065\uffae\125\uffae\001" +
    "\002\000\004\131\174\001\002\000\016\006\uffa9\027\uffa9" +
    "\064\uffa9\065\uffa9\074\uffa9\125\uffa9\001\002\000\004\131" +
    "\174\001\002\000\010\064\uffad\065\uffad\125\uffad\001\002" +
    "\000\004\131\203\001\002\000\010\064\uffab\065\uffab\125" +
    "\uffab\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\006\065\uffc4\125\uffc4\001\002\000\006\065\uffc3\125" +
    "\uffc3\001\002\000\106\023\uff58\026\uff58\032\022\047\054" +
    "\050\075\065\uff58\066\uff58\067\uff58\070\026\071\uff58\072" +
    "\011\074\031\075\uff58\076\035\104\uff58\105\uff58\106\uff58" +
    "\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115" +
    "\uff58\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\125\uff58\131\023\132\107\001\002\000\046\023" +
    "\uff57\026\uff57\065\uff57\066\uff57\067\uff57\071\uff57\075\uff57" +
    "\104\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112" +
    "\uff57\113\uff57\114\uff57\115\uff57\125\uff57\001\002\000\076" +
    "\007\100\010\067\012\076\015\032\021\056\024\010\025" +
    "\105\027\073\032\022\035\024\036\072\037\021\040\063" +
    "\044\034\047\054\050\075\070\026\072\011\074\031\076" +
    "\035\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\125\126\131\023\132\107\001\002\000\006\020" +
    "\215\022\214\001\002\000\126\002\uff88\007\uff88\010\uff88" +
    "\011\uff88\012\uff88\014\uff88\015\uff88\017\232\021\uff88\022" +
    "\231\023\uff88\024\uff88\025\uff88\026\uff88\027\uff88\032\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\047\uff88\050\uff88\070\uff88\072\uff88\074\uff88" +
    "\076\uff88\103\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122" +
    "\uff88\123\uff88\124\uff88\125\uff88\130\uff88\131\uff88\132\uff88" +
    "\001\002\000\004\067\227\001\002\000\044\032\022\047" +
    "\054\050\075\067\uff82\070\026\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\131\023\132\107\001\002\000\004\067\217\001\002" +
    "\000\076\007\100\010\067\012\076\015\032\021\056\024" +
    "\010\025\105\027\073\032\022\035\024\036\072\037\021" +
    "\040\063\044\034\047\054\050\075\070\026\072\011\074" +
    "\031\076\035\116\060\117\061\120\013\121\025\122\071" +
    "\123\041\124\113\125\126\131\023\132\107\001\002\000" +
    "\130\002\uff84\007\uff84\010\uff84\011\uff84\012\uff84\014\uff84" +
    "\015\uff84\017\uff84\020\215\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\027\uff84\032\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\044\uff84\047" +
    "\uff84\050\uff84\070\uff84\072\uff84\074\uff84\076\uff84\103\uff84" +
    "\116\uff84\117\uff84\120\uff84\121\uff84\122\uff84\123\uff84\124" +
    "\uff84\125\uff84\130\uff84\131\uff84\132\uff84\001\002\000\126" +
    "\002\uff83\007\uff83\010\uff83\011\uff83\012\uff83\014\uff83\015" +
    "\uff83\017\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\027\uff83\032\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\044\uff83\047\uff83\050\uff83" +
    "\070\uff83\072\uff83\074\uff83\076\uff83\103\uff83\116\uff83\117" +
    "\uff83\120\uff83\121\uff83\122\uff83\123\uff83\124\uff83\125\uff83" +
    "\130\uff83\131\uff83\132\uff83\001\002\000\010\006\224\064" +
    "\223\067\uff81\001\002\000\042\032\022\047\054\050\075" +
    "\070\026\072\011\074\031\076\035\116\060\117\061\120" +
    "\013\121\025\122\071\123\041\124\113\131\023\132\107" +
    "\001\002\000\042\032\022\047\054\050\075\070\026\072" +
    "\011\074\031\076\035\116\060\117\061\120\013\121\025" +
    "\122\071\123\041\124\113\131\023\132\107\001\002\000" +
    "\004\067\uff80\001\002\000\004\067\uff7f\001\002\000\076" +
    "\007\100\010\067\012\076\015\032\021\056\024\010\025" +
    "\105\027\073\032\022\035\024\036\072\037\021\040\063" +
    "\044\034\047\054\050\075\070\026\072\011\074\031\076" +
    "\035\116\060\117\061\120\013\121\025\122\071\123\041" +
    "\124\113\125\126\131\023\132\107\001\002\000\122\002" +
    "\uff89\007\uff89\010\uff89\011\uff89\012\uff89\014\uff89\015\uff89" +
    "\021\uff89\023\uff89\024\uff89\025\uff89\026\uff89\027\uff89\032" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\047\uff89\050\uff89\070\uff89\072\uff89\074" +
    "\uff89\076\uff89\103\uff89\116\uff89\117\uff89\120\uff89\121\uff89" +
    "\122\uff89\123\uff89\124\uff89\125\uff89\130\uff89\131\uff89\132" +
    "\uff89\001\002\000\004\067\240\001\002\000\004\067\233" +
    "\001\002\000\076\007\100\010\067\012\076\015\032\021" +
    "\056\024\010\025\105\027\073\032\022\035\024\036\072" +
    "\037\021\040\063\044\034\047\054\050\075\070\026\072" +
    "\011\074\031\076\035\116\060\117\061\120\013\121\025" +
    "\122\071\123\041\124\113\125\126\131\023\132\107\001" +
    "\002\000\124\002\uff87\007\uff87\010\uff87\011\uff87\012\uff87" +
    "\014\uff87\015\uff87\021\uff87\022\235\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\027\uff87\032\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87\047\uff87\050" +
    "\uff87\070\uff87\072\uff87\074\uff87\076\uff87\103\uff87\116\uff87" +
    "\117\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\125" +
    "\uff87\130\uff87\131\uff87\132\uff87\001\002\000\004\067\236" +
    "\001\002\000\076\007\100\010\067\012\076\015\032\021" +
    "\056\024\010\025\105\027\073\032\022\035\024\036\072" +
    "\037\021\040\063\044\034\047\054\050\075\070\026\072" +
    "\011\074\031\076\035\116\060\117\061\120\013\121\025" +
    "\122\071\123\041\124\113\125\126\131\023\132\107\001" +
    "\002\000\122\002\uff85\007\uff85\010\uff85\011\uff85\012\uff85" +
    "\014\uff85\015\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\027\uff85\032\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\044\uff85\047\uff85\050\uff85\070" +
    "\uff85\072\uff85\074\uff85\076\uff85\103\uff85\116\uff85\117\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\130" +
    "\uff85\131\uff85\132\uff85\001\002\000\076\007\100\010\067" +
    "\012\076\015\032\021\056\024\010\025\105\027\073\032" +
    "\022\035\024\036\072\037\021\040\063\044\034\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\126" +
    "\131\023\132\107\001\002\000\122\002\uff86\007\uff86\010" +
    "\uff86\011\uff86\012\uff86\014\uff86\015\uff86\021\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\027\uff86\032\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86" +
    "\047\uff86\050\uff86\070\uff86\072\uff86\074\uff86\076\uff86\103" +
    "\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123\uff86" +
    "\124\uff86\125\uff86\130\uff86\131\uff86\132\uff86\001\002\000" +
    "\010\011\ufff8\014\ufff8\103\ufff8\001\002\000\122\002\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\015\ufff6\021" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\044\ufff6\047\ufff6\050\ufff6\070\ufff6\072\ufff6\074\ufff6" +
    "\076\ufff6\103\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\122" +
    "\ufff6\123\ufff6\124\ufff6\125\ufff6\130\ufff6\131\ufff6\132\ufff6" +
    "\001\002\000\122\002\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\014\ufff7\015\ufff7\021\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\027\ufff7\032\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\047\ufff7\050\ufff7" +
    "\070\ufff7\072\ufff7\074\ufff7\076\ufff7\103\ufff7\116\ufff7\117" +
    "\ufff7\120\ufff7\121\ufff7\122\ufff7\123\ufff7\124\ufff7\125\ufff7" +
    "\130\ufff7\131\ufff7\132\ufff7\001\002\000\006\065\uffbc\125" +
    "\uffbc\001\002\000\004\030\252\001\002\000\012\030\uff56" +
    "\064\250\065\uff56\125\uff56\001\002\000\046\030\uff55\047" +
    "\054\050\075\065\uff55\070\026\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\125\uff55\131\023\132\107\001\002\000\010\030\uff54" +
    "\065\uff54\125\uff54\001\002\000\042\032\022\047\054\050" +
    "\075\070\026\072\011\074\031\076\035\116\060\117\061" +
    "\120\013\121\025\122\071\123\041\124\113\131\023\132" +
    "\107\001\002\000\004\067\254\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\124\002\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\014\uff8b\015\uff8b\017\256" +
    "\021\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\032" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\044\uff8b\047\uff8b\050\uff8b\070\uff8b\072\uff8b\074" +
    "\uff8b\076\uff8b\103\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b" +
    "\122\uff8b\123\uff8b\124\uff8b\125\uff8b\130\uff8b\131\uff8b\132" +
    "\uff8b\001\002\000\004\067\257\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\122\002\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\012\uff8a\014\uff8a\015\uff8a\021\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\032\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\044\uff8a\047\uff8a\050\uff8a\070\uff8a\072\uff8a\074\uff8a\076" +
    "\uff8a\103\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\122\uff8a" +
    "\123\uff8a\124\uff8a\125\uff8a\130\uff8a\131\uff8a\132\uff8a\001" +
    "\002\000\004\067\262\001\002\000\076\007\100\010\067" +
    "\012\076\015\032\021\056\024\010\025\105\027\073\032" +
    "\022\035\024\036\072\037\021\040\063\044\034\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\126" +
    "\131\023\132\107\001\002\000\124\002\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\012\uff8d\014\uff8d\015\uff8d\017\264\021\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\032\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\044\uff8d\047\uff8d\050\uff8d\070\uff8d\072\uff8d\074\uff8d\076" +
    "\uff8d\103\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d" +
    "\123\uff8d\124\uff8d\125\uff8d\130\uff8d\131\uff8d\132\uff8d\001" +
    "\002\000\004\067\265\001\002\000\076\007\100\010\067" +
    "\012\076\015\032\021\056\024\010\025\105\027\073\032" +
    "\022\035\024\036\072\037\021\040\063\044\034\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\125\126" +
    "\131\023\132\107\001\002\000\122\002\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\012\uff8c\014\uff8c\015\uff8c\021\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\032\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\047\uff8c\050\uff8c\070\uff8c\072\uff8c\074\uff8c\076\uff8c\103" +
    "\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c" +
    "\124\uff8c\125\uff8c\130\uff8c\131\uff8c\132\uff8c\001\002\000" +
    "\010\030\270\065\uff9f\125\uff9f\001\002\000\042\032\022" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\131\023\132\107\001\002\000\010\064\272\065\uff9e\125" +
    "\uff9e\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\006\065\uff9d\125\uff9d\001\002\000\042\032\uffc7\047" +
    "\uffc7\050\uffc7\070\uffc7\072\uffc7\074\uffc7\076\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\131" +
    "\uffc7\132\uffc7\001\002\000\042\032\uffcd\047\uffcd\050\uffcd" +
    "\070\uffcd\072\uffcd\074\uffcd\076\uffcd\116\uffcd\117\uffcd\120" +
    "\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd\131\uffcd\132\uffcd" +
    "\001\002\000\042\032\uffcc\047\uffcc\050\uffcc\070\uffcc\072" +
    "\uffcc\074\uffcc\076\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc" +
    "\122\uffcc\123\uffcc\124\uffcc\131\uffcc\132\uffcc\001\002\000" +
    "\042\032\uffca\047\uffca\050\uffca\070\uffca\072\uffca\074\uffca" +
    "\076\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122\uffca\123" +
    "\uffca\124\uffca\131\uffca\132\uffca\001\002\000\042\032\uffcf" +
    "\047\uffcf\050\uffcf\070\uffcf\072\uffcf\074\uffcf\076\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf" +
    "\131\uffcf\132\uffcf\001\002\000\042\032\uffce\047\uffce\050" +
    "\uffce\070\uffce\072\uffce\074\uffce\076\uffce\116\uffce\117\uffce" +
    "\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\131\uffce\132" +
    "\uffce\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\042\032\uffc9\047\uffc9\050\uffc9\070\uffc9\072\uffc9\074" +
    "\uffc9\076\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\124\uffc9\131\uffc9\132\uffc9\001\002\000\042\032" +
    "\uffc6\047\uffc6\050\uffc6\070\uffc6\072\uffc6\074\uffc6\076\uffc6" +
    "\116\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\124" +
    "\uffc6\131\uffc6\132\uffc6\001\002\000\042\032\022\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\131\023" +
    "\132\107\001\002\000\006\065\uffd0\125\uffd0\001\002\000" +
    "\042\032\uffc8\047\uffc8\050\uffc8\070\uffc8\072\uffc8\074\uffc8" +
    "\076\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123" +
    "\uffc8\124\uffc8\131\uffc8\132\uffc8\001\002\000\042\032\uffcb" +
    "\047\uffcb\050\uffcb\070\uffcb\072\uffcb\074\uffcb\076\uffcb\116" +
    "\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb" +
    "\131\uffcb\132\uffcb\001\002\000\006\065\uffd1\125\uffd1\001" +
    "\002\000\010\065\uff75\066\302\125\uff75\001\002\000\006" +
    "\065\uff74\125\uff74\001\002\000\006\067\315\074\316\001" +
    "\002\000\076\007\100\010\067\012\076\015\032\021\056" +
    "\024\010\025\105\027\073\032\022\035\024\036\072\037" +
    "\021\040\063\044\034\047\054\050\075\070\026\072\011" +
    "\074\031\076\035\116\060\117\061\120\013\121\025\122" +
    "\071\123\041\124\113\125\126\131\023\132\107\001\002" +
    "\000\044\032\022\047\054\050\075\070\026\072\011\074" +
    "\031\075\317\076\035\116\060\117\061\120\013\121\025" +
    "\122\071\123\041\124\113\131\023\132\107\001\002\000" +
    "\004\067\324\001\002\000\004\075\321\001\002\000\004" +
    "\067\322\001\002\000\076\007\100\010\067\012\076\015" +
    "\032\021\056\024\010\025\105\027\073\032\022\035\024" +
    "\036\072\037\021\040\063\044\034\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\125\126\131\023\132" +
    "\107\001\002\000\122\002\uff3a\007\uff3a\010\uff3a\011\uff3a" +
    "\012\uff3a\014\uff3a\015\uff3a\021\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\026\uff3a\027\uff3a\032\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a\047\uff3a\050" +
    "\uff3a\070\uff3a\072\uff3a\074\uff3a\076\uff3a\103\uff3a\116\uff3a" +
    "\117\uff3a\120\uff3a\121\uff3a\122\uff3a\123\uff3a\124\uff3a\125" +
    "\uff3a\130\uff3a\131\uff3a\132\uff3a\001\002\000\076\007\100" +
    "\010\067\012\076\015\032\021\056\024\010\025\105\027" +
    "\073\032\022\035\024\036\072\037\021\040\063\044\034" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\125\126\131\023\132\107\001\002\000\122\002\uff3b\007" +
    "\uff3b\010\uff3b\011\uff3b\012\uff3b\014\uff3b\015\uff3b\021\uff3b" +
    "\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b\032\uff3b\035" +
    "\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b" +
    "\044\uff3b\047\uff3b\050\uff3b\070\uff3b\072\uff3b\074\uff3b\076" +
    "\uff3b\103\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b\122\uff3b" +
    "\123\uff3b\124\uff3b\125\uff3b\130\uff3b\131\uff3b\132\uff3b\001" +
    "\002\000\122\002\uff3c\007\uff3c\010\uff3c\011\uff3c\012\uff3c" +
    "\014\uff3c\015\uff3c\021\uff3c\023\uff3c\024\uff3c\025\uff3c\026" +
    "\uff3c\027\uff3c\032\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c" +
    "\041\uff3c\042\uff3c\043\uff3c\044\uff3c\047\uff3c\050\uff3c\070" +
    "\uff3c\072\uff3c\074\uff3c\076\uff3c\103\uff3c\116\uff3c\117\uff3c" +
    "\120\uff3c\121\uff3c\122\uff3c\123\uff3c\124\uff3c\125\uff3c\130" +
    "\uff3c\131\uff3c\132\uff3c\001\002\000\004\002\000\001\002" +
    "\000\132\005\uff6e\006\uff6e\023\uff6e\026\uff6e\030\uff6e\031" +
    "\uff6e\033\uff6e\034\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\054\uff6e\056\uff6e\057\uff6e\060\uff6e\061" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\067\uff6e" +
    "\071\uff6e\073\uff6e\075\uff6e\077\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e" +
    "\112\uff6e\113\uff6e\114\uff6e\115\uff6e\125\uff6e\126\uff6e\001" +
    "\002\000\050\032\022\045\376\047\054\050\075\067\377" +
    "\070\026\071\375\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\131\023" +
    "\132\107\001\002\000\050\032\022\047\054\050\075\051" +
    "\341\070\026\072\011\074\031\075\335\076\035\116\060" +
    "\117\061\120\013\121\025\122\071\123\041\124\113\126" +
    "\340\131\023\132\107\001\002\000\004\131\334\001\002" +
    "\000\132\005\uff4d\006\uff4d\023\uff4d\026\uff4d\030\uff4d\031" +
    "\uff4d\033\uff4d\034\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d" +
    "\052\uff4d\053\uff4d\054\uff4d\056\uff4d\057\uff4d\060\uff4d\061" +
    "\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\067\uff4d" +
    "\071\uff4d\073\uff4d\075\uff4d\077\uff4d\100\uff4d\101\uff4d\102" +
    "\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d" +
    "\112\uff4d\113\uff4d\114\uff4d\115\uff4d\125\uff4d\126\uff4d\001" +
    "\002\000\132\005\uff51\006\uff51\023\uff51\026\uff51\030\uff51" +
    "\031\uff51\033\uff51\034\uff51\046\uff51\047\uff51\050\uff51\051" +
    "\uff51\052\uff51\053\uff51\054\uff51\056\uff51\057\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\071\uff51\073\uff51\075\uff51\077\uff51\100\uff51\101\uff51" +
    "\102\uff51\104\uff51\105\uff51\106\uff51\107\uff51\110\uff51\111" +
    "\uff51\112\uff51\113\uff51\114\uff51\115\uff51\125\uff51\126\uff51" +
    "\001\002\000\004\075\374\001\002\000\006\064\370\075" +
    "\uff39\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\042\032\022\047\054\050\075\070\026\072\011\074" +
    "\031\076\035\116\060\117\061\120\013\121\025\122\071" +
    "\123\041\124\113\131\023\132\107\001\002\000\014\023" +
    "\344\064\uff2f\066\345\075\uff2f\126\uff2f\001\002\000\010" +
    "\064\uff2e\075\uff2e\126\uff2e\001\002\000\040\047\054\050" +
    "\075\070\026\072\011\074\031\076\035\116\060\117\061" +
    "\120\013\121\025\122\071\123\041\124\113\131\023\132" +
    "\107\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\010\064\uff2d\075\uff2d\126\uff2d\001\002\000\004\030" +
    "\350\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\014\023\344\026\355\064\uff24\075\uff24\126\uff24\001" +
    "\002\000\010\064\uff23\075\uff23\126\uff23\001\002\000\010" +
    "\064\uff26\075\uff26\126\uff26\001\002\000\010\064\uff25\075" +
    "\uff25\126\uff25\001\002\000\042\032\022\047\054\050\075" +
    "\070\026\072\011\074\031\076\035\116\060\117\061\120" +
    "\013\121\025\122\071\123\041\124\113\131\023\132\107" +
    "\001\002\000\014\023\344\026\355\064\uff22\075\uff22\126" +
    "\uff22\001\002\000\010\064\uff21\075\uff21\126\uff21\001\002" +
    "\000\006\064\361\075\uff37\001\002\000\046\032\022\047" +
    "\054\050\075\070\026\072\011\074\031\075\uff30\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\126\366\131\023\132\107\001\002\000\006\075\uff36" +
    "\126\363\001\002\000\042\032\022\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\004\075\uff34\001\002\000\010\064\370\075\uff32" +
    "\126\uff32\001\002\000\042\032\022\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\004\075\uff35\001\002\000\046\032\022\047\054" +
    "\050\075\070\026\072\011\074\031\075\uff30\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\126\uff30\131\023\132\107\001\002\000\006\075\uff31\126" +
    "\uff31\001\002\000\004\075\uff33\001\002\000\004\075\uff38" +
    "\001\002\000\132\005\uff50\006\uff50\023\uff50\026\uff50\030" +
    "\uff50\031\uff50\033\uff50\034\uff50\046\uff50\047\uff50\050\uff50" +
    "\051\uff50\052\uff50\053\uff50\054\uff50\056\uff50\057\uff50\060" +
    "\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50" +
    "\067\uff50\071\uff50\073\uff50\075\uff50\077\uff50\100\uff50\101" +
    "\uff50\102\uff50\104\uff50\105\uff50\106\uff50\107\uff50\110\uff50" +
    "\111\uff50\112\uff50\113\uff50\114\uff50\115\uff50\125\uff50\126" +
    "\uff50\001\002\000\132\005\uff4f\006\uff4f\023\uff4f\026\uff4f" +
    "\030\uff4f\031\uff4f\033\uff4f\034\uff4f\046\uff4f\047\uff4f\050" +
    "\uff4f\051\uff4f\052\uff4f\053\uff4f\054\uff4f\056\uff4f\057\uff4f" +
    "\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\066" +
    "\uff4f\067\uff4f\071\uff4f\073\uff4f\075\uff4f\077\uff4f\100\uff4f" +
    "\101\uff4f\102\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110" +
    "\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\115\uff4f\125\uff4f" +
    "\126\uff4f\001\002\000\006\064\uff48\071\uff48\001\002\000" +
    "\050\032\022\047\054\050\075\064\uff46\067\u0105\070\026" +
    "\071\uff46\072\011\074\031\076\035\116\060\117\061\120" +
    "\013\121\025\122\071\123\041\124\113\131\023\132\107" +
    "\001\002\000\006\064\u010a\071\uff4c\001\002\000\010\064" +
    "\uff47\067\u0104\071\uff47\001\002\000\004\071\u0103\001\002" +
    "\000\132\005\uff4e\006\uff4e\023\uff4e\026\uff4e\030\uff4e\031" +
    "\uff4e\033\uff4e\034\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\054\uff4e\056\uff4e\057\uff4e\060\uff4e\061" +
    "\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\067\uff4e" +
    "\071\uff4e\073\uff4e\075\uff4e\077\uff4e\100\uff4e\101\uff4e\102" +
    "\uff4e\104\uff4e\105\uff4e\106\uff4e\107\uff4e\110\uff4e\111\uff4e" +
    "\112\uff4e\113\uff4e\114\uff4e\115\uff4e\125\uff4e\126\uff4e\001" +
    "\002\000\050\032\022\047\054\050\075\064\uff45\067\u0105" +
    "\070\026\071\uff45\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\131\023" +
    "\132\107\001\002\000\046\032\022\047\054\050\075\064" +
    "\uff3e\070\026\071\uff3e\072\011\074\031\076\035\116\060" +
    "\117\061\120\013\121\025\122\071\123\041\124\113\131" +
    "\023\132\107\001\002\000\006\064\uff42\071\uff42\001\002" +
    "\000\010\064\uff44\067\u0105\071\uff44\001\002\000\006\064" +
    "\uff43\071\uff43\001\002\000\006\064\uff3d\071\uff3d\001\002" +
    "\000\046\032\022\045\376\047\054\050\075\067\377\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\004\071\uff4b\001\002\000\006\064\u010a\071\uff4a" +
    "\001\002\000\004\071\uff49\001\002\000\006\064\uff3f\071" +
    "\uff3f\001\002\000\010\064\uff41\067\u0105\071\uff41\001\002" +
    "\000\006\064\uff40\071\uff40\001\002\000\004\074\u0113\001" +
    "\002\000\004\067\u0133\001\002\000\014\051\u0117\074\u011b" +
    "\075\u0119\126\u0118\131\u011c\001\002\000\014\051\uffeb\064" +
    "\uffeb\067\uffeb\075\uffeb\126\uffeb\001\002\000\016\051\uffe9" +
    "\064\uffe9\066\u0131\067\uffe9\075\uffe9\126\uffe9\001\002\000" +
    "\014\051\u0129\064\u0128\067\ufff2\075\ufff2\126\u012a\001\002" +
    "\000\004\131\u0124\001\002\000\004\131\u0123\001\002\000" +
    "\004\067\ufff4\001\002\000\004\075\u0122\001\002\000\006" +
    "\074\u011b\131\u011c\001\002\000\016\051\uffe7\064\uffe7\066" +
    "\uffe7\067\uffe7\075\uffe7\126\uffe7\001\002\000\006\064\u011f" +
    "\075\u0120\001\002\000\006\064\uffe5\075\uffe5\001\002\000" +
    "\006\074\u011b\131\u011c\001\002\000\016\051\uffe6\064\uffe6" +
    "\066\uffe6\067\uffe6\075\uffe6\126\uffe6\001\002\000\006\064" +
    "\uffe4\075\uffe4\001\002\000\004\067\ufff3\001\002\000\006" +
    "\067\uffec\075\uffec\001\002\000\010\064\u0125\067\uffee\075" +
    "\uffee\001\002\000\004\126\u0126\001\002\000\004\131\u0127" +
    "\001\002\000\006\067\uffed\075\uffed\001\002\000\006\074" +
    "\u011b\131\u011c\001\002\000\004\131\u012c\001\002\000\004" +
    "\131\u012b\001\002\000\006\067\ufff0\075\ufff0\001\002\000" +
    "\010\064\u012d\067\ufff1\075\ufff1\001\002\000\004\126\u012e" +
    "\001\002\000\004\131\u012f\001\002\000\006\067\uffef\075" +
    "\uffef\001\002\000\014\051\uffea\064\uffea\067\uffea\075\uffea" +
    "\126\uffea\001\002\000\042\032\022\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\014\051\uffe8\064\uffe8\067\uffe8\075\uffe8\126\uffe8" +
    "\001\002\000\076\007\100\010\067\012\076\015\032\021" +
    "\056\024\010\025\105\027\073\032\022\035\024\036\072" +
    "\037\021\040\063\044\034\047\054\050\075\070\026\072" +
    "\011\074\031\076\035\116\060\117\061\120\013\121\025" +
    "\122\071\123\041\124\113\125\126\131\023\132\107\001" +
    "\002\000\122\002\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\014\ufff5\015\ufff5\021\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\027\ufff5\032\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\047\ufff5\050\ufff5\070" +
    "\ufff5\072\ufff5\074\ufff5\076\ufff5\103\ufff5\116\ufff5\117\ufff5" +
    "\120\ufff5\121\ufff5\122\ufff5\123\ufff5\124\ufff5\125\ufff5\130" +
    "\ufff5\131\ufff5\132\ufff5\001\002\000\010\065\uff61\075\uff61" +
    "\125\uff61\001\002\000\006\065\uffc2\125\uffc2\001\002\000" +
    "\140\005\uff69\006\uff69\023\uff69\026\uff69\030\uff69\031\uff69" +
    "\033\uff69\034\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69\067" +
    "\uff69\070\uff69\071\uff69\073\uff69\074\uff69\075\uff69\077\uff69" +
    "\100\uff69\101\uff69\102\uff69\104\uff69\105\uff69\106\uff69\107" +
    "\uff69\110\uff69\111\uff69\112\uff69\113\uff69\114\uff69\115\uff69" +
    "\125\uff69\126\uff69\001\002\000\004\075\u0148\001\002\000" +
    "\010\023\u013e\064\207\075\uff59\001\002\000\004\075\u013c" +
    "\001\002\000\004\075\uff5a\001\002\000\140\005\uff66\006" +
    "\uff66\023\uff66\026\uff66\030\uff66\031\uff66\033\uff66\034\uff66" +
    "\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\071" +
    "\uff66\073\uff66\074\uff66\075\uff66\077\uff66\100\uff66\101\uff66" +
    "\102\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111" +
    "\uff66\112\uff66\113\uff66\114\uff66\115\uff66\125\uff66\126\uff66" +
    "\001\002\000\004\075\uff5b\001\002\000\040\047\054\050" +
    "\075\070\026\072\011\074\031\076\035\116\060\117\061" +
    "\120\013\121\025\122\071\123\041\124\113\131\023\132" +
    "\107\001\002\000\004\030\u0140\001\002\000\042\032\022" +
    "\047\054\050\075\070\026\072\011\074\031\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\131\023\132\107\001\002\000\012\023\u013e\026\u0145\071" +
    "\uff2a\075\uff2a\001\002\000\006\071\uff2c\075\uff2c\001\002" +
    "\000\006\071\uff2b\075\uff2b\001\002\000\006\071\uff29\075" +
    "\uff29\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\012\023\u013e\026\u0145\071\uff28\075\uff28\001\002\000" +
    "\006\071\uff27\075\uff27\001\002\000\140\005\uff65\006\uff65" +
    "\023\uff65\026\uff65\030\uff65\031\uff65\033\uff65\034\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063" +
    "\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070\uff65\071\uff65" +
    "\073\uff65\074\uff65\075\uff65\077\uff65\100\uff65\101\uff65\102" +
    "\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65" +
    "\112\uff65\113\uff65\114\uff65\115\uff65\125\uff65\126\uff65\001" +
    "\002\000\140\005\uff68\006\uff68\023\uff68\026\uff68\030\uff68" +
    "\031\uff68\033\uff68\034\uff68\046\uff68\047\uff68\050\uff68\051" +
    "\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68" +
    "\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\070\uff68\071\uff68\073\uff68\074\uff68\075\uff68" +
    "\077\uff68\100\uff68\101\uff68\102\uff68\104\uff68\105\uff68\106" +
    "\uff68\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\114\uff68" +
    "\115\uff68\125\uff68\126\uff68\001\002\000\004\071\u014e\001" +
    "\002\000\010\023\u013e\064\207\071\uff59\001\002\000\004" +
    "\071\uff5f\001\002\000\004\071\uff60\001\002\000\140\005" +
    "\uff64\006\uff64\023\uff64\026\uff64\030\uff64\031\uff64\033\uff64" +
    "\034\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053" +
    "\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070" +
    "\uff64\071\uff64\073\uff64\074\uff64\075\uff64\077\uff64\100\uff64" +
    "\101\uff64\102\uff64\104\uff64\105\uff64\106\uff64\107\uff64\110" +
    "\uff64\111\uff64\112\uff64\113\uff64\114\uff64\115\uff64\125\uff64" +
    "\126\uff64\001\002\000\042\032\022\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\004\067\u0151\001\002\000\042\032\022\047\054" +
    "\050\075\070\026\072\011\074\031\076\035\116\060\117" +
    "\061\120\013\121\025\122\071\123\041\124\113\131\023" +
    "\132\107\001\002\000\060\006\uff52\023\uff52\026\uff52\051" +
    "\uff52\064\uff52\065\uff52\066\uff52\067\uff52\071\uff52\073\uff52" +
    "\075\uff52\104\uff52\105\uff52\106\uff52\107\uff52\110\uff52\111" +
    "\uff52\112\uff52\113\uff52\114\uff52\115\uff52\125\uff52\126\uff52" +
    "\001\002\000\060\006\uff53\023\uff53\026\uff53\051\uff53\064" +
    "\uff53\065\uff53\066\uff53\067\uff53\071\uff53\073\uff53\075\uff53" +
    "\104\uff53\105\uff53\106\uff53\107\uff53\110\uff53\111\uff53\112" +
    "\uff53\113\uff53\114\uff53\115\uff53\125\uff53\126\uff53\001\002" +
    "\000\010\064\u0155\065\uffbb\125\uffbb\001\002\000\042\032" +
    "\022\047\054\050\075\070\026\072\011\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\131\023\132\107\001\002\000\010\064\u0157\065\uffba" +
    "\125\uffba\001\002\000\042\032\022\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\006\065\uffb9\125\uffb9\001\002\000\004\002\uffff" +
    "\001\002\000\040\047\uff1b\050\uff1b\070\uff1b\072\uff1b\074" +
    "\uff1b\076\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b" +
    "\123\uff1b\124\uff1b\131\uff1b\132\uff1b\001\002\000\040\047" +
    "\uff0a\050\uff0a\070\uff0a\072\uff0a\074\uff0a\076\uff0a\116\uff0a" +
    "\117\uff0a\120\uff0a\121\uff0a\122\uff0a\123\uff0a\124\uff0a\131" +
    "\uff0a\132\uff0a\001\002\000\040\047\uff0e\050\uff0e\070\uff0e" +
    "\072\uff0e\074\uff0e\076\uff0e\116\uff0e\117\uff0e\120\uff0e\121" +
    "\uff0e\122\uff0e\123\uff0e\124\uff0e\131\uff0e\132\uff0e\001\002" +
    "\000\042\033\u0174\047\uff1a\050\uff1a\070\uff1a\072\uff1a\074" +
    "\uff1a\076\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a" +
    "\123\uff1a\124\uff1a\131\uff1a\132\uff1a\001\002\000\040\047" +
    "\uff20\050\uff20\070\uff20\072\uff20\074\uff20\076\uff20\116\uff20" +
    "\117\uff20\120\uff20\121\uff20\122\uff20\123\uff20\124\uff20\131" +
    "\uff20\132\uff20\001\002\000\040\047\uff0d\050\uff0d\070\uff0d" +
    "\072\uff0d\074\uff0d\076\uff0d\116\uff0d\117\uff0d\120\uff0d\121" +
    "\uff0d\122\uff0d\123\uff0d\124\uff0d\131\uff0d\132\uff0d\001\002" +
    "\000\040\047\uff1c\050\uff1c\070\uff1c\072\uff1c\074\uff1c\076" +
    "\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122\uff1c\123\uff1c" +
    "\124\uff1c\131\uff1c\132\uff1c\001\002\000\040\047\uff08\050" +
    "\uff08\070\uff08\072\uff08\074\uff08\076\uff08\116\uff08\117\uff08" +
    "\120\uff08\121\uff08\122\uff08\123\uff08\124\uff08\131\uff08\132" +
    "\uff08\001\002\000\040\047\uff19\050\uff19\070\uff19\072\uff19" +
    "\074\uff19\076\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122" +
    "\uff19\123\uff19\124\uff19\131\uff19\132\uff19\001\002\000\042" +
    "\030\u0173\047\uff0b\050\uff0b\070\uff0b\072\uff0b\074\uff0b\076" +
    "\uff0b\116\uff0b\117\uff0b\120\uff0b\121\uff0b\122\uff0b\123\uff0b" +
    "\124\uff0b\131\uff0b\132\uff0b\001\002\000\040\047\uff15\050" +
    "\uff15\070\uff15\072\uff15\074\uff15\076\uff15\116\uff15\117\uff15" +
    "\120\uff15\121\uff15\122\uff15\123\uff15\124\uff15\131\uff15\132" +
    "\uff15\001\002\000\040\047\uff13\050\uff13\070\uff13\072\uff13" +
    "\074\uff13\076\uff13\116\uff13\117\uff13\120\uff13\121\uff13\122" +
    "\uff13\123\uff13\124\uff13\131\uff13\132\uff13\001\002\000\040" +
    "\047\uff11\050\uff11\070\uff11\072\uff11\074\uff11\076\uff11\116" +
    "\uff11\117\uff11\120\uff11\121\uff11\122\uff11\123\uff11\124\uff11" +
    "\131\uff11\132\uff11\001\002\000\040\047\054\050\075\070" +
    "\026\072\011\074\031\076\035\116\060\117\061\120\013" +
    "\121\025\122\071\123\041\124\113\131\023\132\107\001" +
    "\002\000\040\047\uff16\050\uff16\070\uff16\072\uff16\074\uff16" +
    "\076\uff16\116\uff16\117\uff16\120\uff16\121\uff16\122\uff16\123" +
    "\uff16\124\uff16\131\uff16\132\uff16\001\002\000\040\047\uff0c" +
    "\050\uff0c\070\uff0c\072\uff0c\074\uff0c\076\uff0c\116\uff0c\117" +
    "\uff0c\120\uff0c\121\uff0c\122\uff0c\123\uff0c\124\uff0c\131\uff0c" +
    "\132\uff0c\001\002\000\040\047\uff1e\050\uff1e\070\uff1e\072" +
    "\uff1e\074\uff1e\076\uff1e\116\uff1e\117\uff1e\120\uff1e\121\uff1e" +
    "\122\uff1e\123\uff1e\124\uff1e\131\uff1e\132\uff1e\001\002\000" +
    "\040\047\uff09\050\uff09\070\uff09\072\uff09\074\uff09\076\uff09" +
    "\116\uff09\117\uff09\120\uff09\121\uff09\122\uff09\123\uff09\124" +
    "\uff09\131\uff09\132\uff09\001\002\000\040\047\uff1d\050\uff1d" +
    "\070\uff1d\072\uff1d\074\uff1d\076\uff1d\116\uff1d\117\uff1d\120" +
    "\uff1d\121\uff1d\122\uff1d\123\uff1d\124\uff1d\131\uff1d\132\uff1d" +
    "\001\002\000\040\047\uff14\050\uff14\070\uff14\072\uff14\074" +
    "\uff14\076\uff14\116\uff14\117\uff14\120\uff14\121\uff14\122\uff14" +
    "\123\uff14\124\uff14\131\uff14\132\uff14\001\002\000\040\047" +
    "\uff1f\050\uff1f\070\uff1f\072\uff1f\074\uff1f\076\uff1f\116\uff1f" +
    "\117\uff1f\120\uff1f\121\uff1f\122\uff1f\123\uff1f\124\uff1f\131" +
    "\uff1f\132\uff1f\001\002\000\040\047\uff12\050\uff12\070\uff12" +
    "\072\uff12\074\uff12\076\uff12\116\uff12\117\uff12\120\uff12\121" +
    "\uff12\122\uff12\123\uff12\124\uff12\131\uff12\132\uff12\001\002" +
    "\000\040\047\uff10\050\uff10\070\uff10\072\uff10\074\uff10\076" +
    "\uff10\116\uff10\117\uff10\120\uff10\121\uff10\122\uff10\123\uff10" +
    "\124\uff10\131\uff10\132\uff10\001\002\000\040\047\uff0f\050" +
    "\uff0f\070\uff0f\072\uff0f\074\uff0f\076\uff0f\116\uff0f\117\uff0f" +
    "\120\uff0f\121\uff0f\122\uff0f\123\uff0f\124\uff0f\131\uff0f\132" +
    "\uff0f\001\002\000\060\006\uff70\023\uff70\026\uff70\051\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\071\uff70\073\uff70\075" +
    "\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111\uff70" +
    "\112\uff70\113\uff70\114\uff70\115\uff70\125\uff70\126\uff70\001" +
    "\002\000\040\047\uff17\050\uff17\070\uff17\072\uff17\074\uff17" +
    "\076\uff17\116\uff17\117\uff17\120\uff17\121\uff17\122\uff17\123" +
    "\uff17\124\uff17\131\uff17\132\uff17\001\002\000\040\047\uff18" +
    "\050\uff18\070\uff18\072\uff18\074\uff18\076\uff18\116\uff18\117" +
    "\uff18\120\uff18\121\uff18\122\uff18\123\uff18\124\uff18\131\uff18" +
    "\132\uff18\001\002\000\004\002\ufffe\001\002\000\140\005" +
    "\uff67\006\uff67\023\uff67\026\uff67\030\uff67\031\uff67\033\uff67" +
    "\034\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053" +
    "\uff67\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\067\uff67\070" +
    "\uff67\071\uff67\073\uff67\074\uff67\075\uff67\077\uff67\100\uff67" +
    "\101\uff67\102\uff67\104\uff67\105\uff67\106\uff67\107\uff67\110" +
    "\uff67\111\uff67\112\uff67\113\uff67\114\uff67\115\uff67\125\uff67" +
    "\126\uff67\001\002\000\004\073\u017d\001\002\000\004\067" +
    "\u0179\001\002\000\042\032\022\047\054\050\075\070\026" +
    "\072\011\074\031\076\035\116\060\117\061\120\013\121" +
    "\025\122\071\123\041\124\113\131\023\132\107\001\002" +
    "\000\006\064\u017b\073\uff5e\001\002\000\044\032\022\047" +
    "\054\050\075\070\026\072\011\073\uff5d\074\031\076\035" +
    "\116\060\117\061\120\013\121\025\122\071\123\041\124" +
    "\113\131\023\132\107\001\002\000\004\073\uff5c\001\002" +
    "\000\140\005\uff63\006\uff63\023\uff63\026\uff63\030\uff63\031" +
    "\uff63\033\uff63\034\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\070\uff63\071\uff63\073\uff63\074\uff63\075\uff63\077" +
    "\uff63\100\uff63\101\uff63\102\uff63\104\uff63\105\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\112\uff63\113\uff63\114\uff63\115" +
    "\uff63\125\uff63\126\uff63\001\002\000\004\027\u0197\001\002" +
    "\000\004\131\174\001\002\000\006\055\u0182\131\uffa4\001" +
    "\002\000\006\027\u0184\131\uffa3\001\002\000\010\027\uffa4" +
    "\055\u0182\131\uffa4\001\002\000\006\027\uffa3\131\uffa3\001" +
    "\002\000\010\051\u0185\074\u0188\131\u0187\001\002\000\006" +
    "\065\uffb1\125\uffb1\001\002\000\012\064\u018e\065\uffa8\075" +
    "\uffa8\125\uffa8\001\002\000\014\006\u018c\064\uffa6\065\uffa6" +
    "\075\uffa6\125\uffa6\001\002\000\004\131\u0187\001\002\000" +
    "\006\065\uffaf\125\uffaf\001\002\000\004\075\u018b\001\002" +
    "\000\006\065\uffb0\125\uffb0\001\002\000\004\131\u018d\001" +
    "\002\000\012\064\uffa5\065\uffa5\075\uffa5\125\uffa5\001\002" +
    "\000\004\131\u0187\001\002\000\010\065\uffa7\075\uffa7\125" +
    "\uffa7\001\002\000\004\027\u0191\001\002\000\010\051\u0192" +
    "\074\u0193\131\u0187\001\002\000\006\065\uffb4\125\uffb4\001" +
    "\002\000\004\131\u0187\001\002\000\006\065\uffb2\125\uffb2" +
    "\001\002\000\004\075\u0196\001\002\000\006\065\uffb3\125" +
    "\uffb3\001\002\000\010\051\u0198\074\u0199\131\u0187\001\002" +
    "\000\006\065\uffb7\125\uffb7\001\002\000\004\131\u0187\001" +
    "\002\000\006\065\uffb5\125\uffb5\001\002\000\004\075\u019c" +
    "\001\002\000\006\065\uffb6\125\uffb6\001\002\000\006\074" +
    "\u019e\125\u019f\001\002\000\050\032\022\047\054\050\075" +
    "\051\341\070\026\072\011\074\031\075\u01a1\076\035\116" +
    "\060\117\061\120\013\121\025\122\071\123\041\124\113" +
    "\126\340\131\023\132\107\001\002\000\010\011\ufffc\014" +
    "\ufffc\103\ufffc\001\002\000\004\075\u01a3\001\002\000\004" +
    "\125\u01a2\001\002\000\010\011\ufffb\014\ufffb\103\ufffb\001" +
    "\002\000\004\125\u01a4\001\002\000\010\011\ufffa\014\ufffa" +
    "\103\ufffa\001\002\000\140\005\uff6a\006\uff6a\023\uff6a\026" +
    "\uff6a\030\uff6a\031\uff6a\033\uff6a\034\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\073\uff6a\074" +
    "\uff6a\075\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\104\uff6a" +
    "\105\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113" +
    "\uff6a\114\uff6a\115\uff6a\125\uff6a\126\uff6a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a3\000\110\002\045\003\005\004\011\005\110\006" +
    "\032\007\026\010\067\011\014\012\041\013\006\014\027" +
    "\015\111\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\065\027\101\033\050\050\042\051\015\072\054" +
    "\073\044\074\043\075\073\076\103\077\051\100\100\101" +
    "\037\102\017\105\107\115\047\116\063\001\001\000\010" +
    "\016\105\020\003\024\u01a4\001\001\000\004\052\u019c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\u017d" +
    "\057\u017e\001\001\000\022\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\u0177\032\u0176\001\001\000\106" +
    "\003\u0174\004\011\005\110\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\072\054\073\044\074\043\075\073" +
    "\076\103\077\051\100\100\101\037\102\017\105\107\115" +
    "\047\116\063\001\001\000\002\001\001\000\004\017\u0166" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\003" +
    "\u0158\004\011\005\110\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\072\054\073\044\074\043\075\073\076" +
    "\103\077\051\100\100\101\037\102\017\105\107\115\047" +
    "\116\063\001\001\000\002\001\001\000\020\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\u0153\001\001" +
    "\000\012\040\u014f\041\u0115\042\u0113\043\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u014a\031\u0149\033\u014b\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\u0138\027\u0139\030\u0137\033\u013a\001\001" +
    "\000\014\016\105\020\003\023\246\024\036\034\u0135\001" +
    "\001\000\002\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\u0134\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\304\047\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\105\020" +
    "\003\023\266\024\036\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\105\020\003" +
    "\023\246\024\036\034\245\001\001\000\022\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\065\033\244" +
    "\001\001\000\010\100\242\101\243\115\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\033\204\001\001" +
    "\000\010\052\171\053\174\054\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\152\001" +
    "\001\000\022\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\033\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\115\113\116\114\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\115\113\116\114\120\001\001\000\002\001\001\000" +
    "\012\016\105\020\003\023\122\024\036\001\001\000\002" +
    "\001\001\000\056\005\126\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\103\124\105\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\004" +
    "\131\005\110\006\032\007\026\010\067\011\014\012\041" +
    "\013\006\014\027\015\111\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\065\027\101\033\050\050\042" +
    "\051\015\072\054\073\044\074\043\075\073\076\103\077" +
    "\051\100\100\101\037\102\017\104\130\105\107\115\047" +
    "\116\063\001\001\000\104\004\133\005\110\006\032\007" +
    "\026\010\067\011\014\012\041\013\006\014\027\015\111" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\027\101\033\050\050\042\051\015\072\054\073\044" +
    "\074\043\075\073\076\103\077\051\100\100\101\037\102" +
    "\017\105\107\115\047\116\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\105\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\105\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\005\126\006\032" +
    "\007\026\010\067\011\014\012\041\013\006\014\027\015" +
    "\111\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\027\101\033\050\050\042\051\015\103\154\105" +
    "\107\001\001\000\004\110\157\001\001\000\002\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\005\126\006\032\007\026\010\067\011\014\012" +
    "\041\013\006\014\027\015\111\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\027\101\033\050\050" +
    "\042\051\015\103\162\105\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\126\006\032\007\026\010" +
    "\067\011\014\012\041\013\006\014\027\015\111\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\065\027" +
    "\101\033\050\050\042\051\015\103\165\105\107\001\001" +
    "\000\004\110\166\001\001\000\002\001\001\000\056\005" +
    "\126\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\103\170\105\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\176\001\001\000\002\001\001\000\006\052" +
    "\171\053\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\065\033\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\033\207\001\001" +
    "\000\002\001\001\000\056\005\126\006\032\007\026\010" +
    "\067\011\014\012\041\013\006\014\027\015\111\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\065\027" +
    "\101\033\050\050\042\051\015\103\211\105\107\001\001" +
    "\000\006\111\215\112\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\221\001\001\000\002\001\001\000" +
    "\056\005\126\006\032\007\026\010\067\011\014\012\041" +
    "\013\006\014\027\015\111\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\065\027\101\033\050\050\042" +
    "\051\015\103\217\105\107\001\001\000\006\111\215\112" +
    "\220\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\225\001\001\000\020\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\005\126\006\032\007\026\010\067" +
    "\011\014\012\041\013\006\014\027\015\111\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\065\027\101" +
    "\033\050\050\042\051\015\103\227\105\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\126\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\233\105\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\126\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\103\236\105\107\001\001\000\002" +
    "\001\001\000\056\005\126\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\103\240\105\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\105\020\003\023\246\024\036\034\250\001" +
    "\001\000\002\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\252\001\001\000" +
    "\002\001\001\000\056\005\126\006\032\007\026\010\067" +
    "\011\014\012\041\013\006\014\027\015\111\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\065\027\101" +
    "\033\050\050\042\051\015\103\254\105\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\005\126\006\032" +
    "\007\026\010\067\011\014\012\041\013\006\014\027\015" +
    "\111\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\027\101\033\050\050\042\051\015\103\257\105" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\126\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\262\105\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\126\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\103\265\105\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\270\001\001\000\002" +
    "\001\001\000\020\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\065\033" +
    "\311\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\033\310\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\126" +
    "\006\032\007\026\010\067\011\014\012\041\013\006\014" +
    "\027\015\111\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\027\101\033\050\050\042\051\015\103" +
    "\325\105\107\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\126\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\322\105\107\001\001\000\002\001\001\000\056" +
    "\005\126\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\324\105\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\u0100" +
    "\061\u0101\062\377\001\001\000\024\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\341\060\335\065\336" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\372\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\371\001\001\000\020\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\357\001\001\000\004\067\342\001" +
    "\001\000\002\001\001\000\014\016\105\020\003\023\246" +
    "\024\036\034\346\001\001\000\020\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\345\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\350\001\001\000\010" +
    "\067\352\070\351\071\353\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\355\001\001\000" +
    "\010\067\352\070\356\071\353\001\001\000\002\001\001" +
    "\000\004\066\361\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\341\065\364\001\001" +
    "\000\002\001\001\000\020\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\363\001\001\000\002\001\001" +
    "\000\004\066\370\001\001\000\020\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\366\001\001\000\002" +
    "\001\001\000\022\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\341\065\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\u010e\064\u010d\001" +
    "\001\000\004\063\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\u0106\064\u0105\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\u0108\001\001\000\002\001\001\000\004\064\u0107" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\u0100" +
    "\062\u010b\001\001\000\002\001\001\000\004\063\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\064\u010f" +
    "\001\001\000\002\001\001\000\004\117\u0111\001\001\000" +
    "\002\001\001\000\012\040\u0119\041\u0115\042\u0113\043\u0114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\u011d\044\u011c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\u012f\043\u0114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u0131\001\001\000\002\001\001\000\056\005\126\006\032" +
    "\007\026\010\067\011\014\012\041\013\006\014\027\015" +
    "\111\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\027\101\033\050\050\042\051\015\103\u0133\105" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\u013c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\105\020\003\023" +
    "\246\024\036\034\u013e\001\001\000\002\001\001\000\022" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\033\u0140\001\001\000\010\035\u0143\036\u0141\037\u0142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\u0145\001\001\000\010\035\u0146\036\u0141\037" +
    "\u0142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\u014c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u0152\001\001\000\002\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\u0151\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u0155\001\001\000\002\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\u0157\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\105\020\003" +
    "\021\u0171\023\013\024\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u0179\001\001\000\002\001\001\000\022\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\u0177\032\u017b\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\052\u018f\001\001\000\004\057\u0180\001\001\000" +
    "\002\001\001\000\004\057\u0182\001\001\000\002\001\001" +
    "\000\006\055\u0185\056\u0188\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\u0185\056\u0189" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\055\u0185" +
    "\056\u018e\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\u0185\056\u0193\001\001\000\002\001\001\000\006" +
    "\055\u0185\056\u0194\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\u0185\056\u0199\001\001" +
    "\000\002\001\001\000\006\055\u0185\056\u019a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\341\060\u019f\065\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    outputBuffer = new StringBuffer();
    counter = 0;

    }


 // Represent the number of the first usable label 
    public int label = 0;

    // It can be "stdout" to write output program to standard
    // output or "file" to dump program in a file.
    public static String dumpOutput;

    // It's true if the semantic check is enabled
    public boolean enableSem = true;
    
    // String buffer used to store output program
    public StringBuffer outputBuffer;
    
     // counter used to count indentation level
    public int counter;

    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {


	// Disable semantic check
    private void disableSem(){
        parser.enableSem = false;
    }
    // Return true if semantic is enabled, false otherwise
    private boolean sem(){
        return parser.enableSem;
    }
	// Error management
    private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        /* Quando c'e' un errore sintattico continuo il parsing ma disabilito la semantica */
        disableSem();
    }
        
    // Write a string in output
    private void dump(String s){
        parser.outputBuffer.append(s);
    }
    private void dumpln(String s){
        parser.outputBuffer.append(s+"\n");
    }
    
    private void incrementIndent()
    {
    	parser.counter++;
    }
    
    private int getCounter()
    {
    	return parser.counter;
    }


  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // number ::= BIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = b.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // number ::= OCT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = o.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // number ::= HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = h.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // number ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Integer.parseInt(d.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // number ::= LONGINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = li.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // number ::= IMAGNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = i.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // number ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Float.parseFloat(f.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // binop ::= DIVDIV 
            {
              Object RESULT =null;
		int double_divleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int double_divright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object double_div = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = double_div;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // binop ::= ECOM 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=ec;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // binop ::= PIPE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = not;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		int doublestarleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int doublestarright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object doublestar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = doublestar;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // binop ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = or;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // binop ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = and;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // binop ::= NEQ 
            {
              Object RESULT =null;
		int neqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = neq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = eq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = maieq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mag;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mineq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = min;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = rshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = lshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = notin;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = isnot;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = in;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // binop ::= EXPON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ex;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // comp_if ::= IF test comp_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if "+t.toString()+c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // comp_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // comp_for ::= FOR exprlist IN test comp_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // comp_for ::= FOR exprlist IN test 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // comp_iter ::= comp_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // comp_iter ::= comp_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // list_if ::= IF test list_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if "+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // list_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // list_for ::= FOR exprlist IN testlist list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // list_for ::= FOR exprlist IN testlist 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // list_iter ::= list_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // list_iter ::= list_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // argument ::= test ASSIGN test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString()+assign.toString()+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // argument ::= test comp_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString() + " " +c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // argument ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // argument_rec ::= COMMA 
            {
              Object RESULT =null;
		RESULT = ",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // argument_rec ::= COMMA argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ","+a+ar;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // argument_rec ::= COMMA argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ","+a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // arglist ::= MULT test argument_rec MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // arglist ::= MULT test argument_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // arglist ::= MULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // arglist ::= argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a + ar.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // arglist ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // classdef ::= CLASS NAME LPAREN testlist RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // classdef ::= CLASS NAME LPAREN RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // classdef ::= CLASS NAME COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sliceop ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sliceop ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // subscript ::= COLON sliceop 
            {
              Object RESULT =null;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // subscript ::= COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // subscript ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // subscript ::= test COLON sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // subscript ::= test COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // subscript ::= test COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // subscript ::= test COLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT=t.toString()+":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // subscript ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // subscript ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // subscript ::= TRIDOT 
            {
              Object RESULT =null;
		RESULT="...";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // subscript_rec ::= COMMA subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // subscript_rec ::= COMMA subscript 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // subscriptlist ::= subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // subscriptlist ::= subscript 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // trailer ::= DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "."+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // trailer ::= LBRACK subscriptlist RBRACK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "[" + s.toString() + "]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // trailer ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT = "[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // trailer ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "("+a.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // lambdef ::= LAMBDA varargslist COLON test 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda "+v.toString()+":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // lambdef ::= LAMBDA COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda:"+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exprlist ::= expr COMMA exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exprlist ::= expr COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = e + ",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // exprlist ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // testlist ::= test COMMA testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+","+tl.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // testlist ::= test COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = t.toString()+",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // testlist ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // testlist_comp ::= testlist 
            {
              Object RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tlist = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = tlist;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // testlist_comp ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t+" "+l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dictorsetmaker ::= test COLON test COMMA dictorsetmaker 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dictorsetmaker ::= test COLON test COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dictorsetmaker ::= test COLON test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // listmaker ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // listmaker ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // yield_expr ::= YIELD testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // yield_expr ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="{"+d.toString()+"}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // atom ::= LBRACK listmaker RBRACK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="["+l.toString()+"]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+t.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // atom ::= LPAREN yield_expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+y.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // atom ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		RESULT="{}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // atom ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT="[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // atom ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT="()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // atom ::= unop atom 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = u.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // atom ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // atom ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= atom trailer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a.toString() + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // comparison ::= expr binop comparison 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int binopleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int binopright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object binop = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int comparisonleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int comparisonright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object comparison = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e.toString()+binop.toString()+comparison.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // comparison ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // test ::= lambdef 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // test ::= comparison 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = c;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // assign_recoursive ::= ASSIGN testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int ass_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ass_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ass_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString()+ass_rec.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // assign_recoursive ::= ASSIGN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmt_rec ::= stmt_rec stmt 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("stmt_rec->stmt_rec stmt: " + sr + " " + s); RESULT = sr.toString() + " " +s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("stmt_rec->stmt: " + s); RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
				RESULT = "\n\t" + s;
				//System.out.println("suite->NEWLINE INDENT stmt_rec DEDENT: " + s);
				System.out.println("token: " + parser.getToken());
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("suite simple: " + simple.toString());RESULT = "\n"+simple.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // with_item ::= test AS expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // with_item ::= test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // with_item_recoursive ::= with_item COMMA with_item_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // with_item_recoursive ::= with_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // with_stmt ::= WITH with_item_recoursive COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_stmt",61, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // except_clause_recoursive ::= except_clause COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-9)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_stmt ::= FOR exprlist IN testlist COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT = "for "+ e+" in "+t+" do "+s.toString()+" end";
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT = new String[]{t.toString(),s1.toString(),s2.toString()};
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					//System.out.println("while_stmt->WHILE test COLON suite");
					RESULT = "while " + t.toString() + " do " + s.toString() + " end";
					//dumpln("while " + t.toString() + " do " + s.toString() + " end");
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_recoursive ::= ELIF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "elseif " + t.toString() + " then " + s.toString() + else_rec;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "elseif " + t.toString() + " then " + s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s1 + " " + else_rec + " else " + s2.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s1 + " else " + s2.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if " + t.toString() + " then " + s.toString() + " " + else_rec + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_stmt ::= decorated 
            {
              Object RESULT =null;
		System.out.println("decorated");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // compound_stmt ::= classdef 
            {
              Object RESULT =null;
		System.out.println("classdef");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("funcdef: " + f); RESULT = f.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // compound_stmt ::= with_stmt 
            {
              Object RESULT =null;
		System.out.println("with_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		System.out.println("try_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								System.out.println("for_stmt: " + f);
								RESULT = f.toString();
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = w.toString();
								System.out.println("compound_stmt-> while_stmt");
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = if_stmt; System.out.println(if_stmt);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exec_stmt ::= EXEC expr IN test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exec_stmt ::= EXEC expr IN test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exec_stmt ::= EXEC expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // name_recoursive ::= NAME COMMA name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+","+nr;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="global "+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n1+"as"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=i+","+is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT= i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+"."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"as"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=ds+","+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from." + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from." + d+" import("+i.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from." + d+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+n+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+n+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d+n+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d + " import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "import " + d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "return " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("return_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // flow_stmt ::= yield_expr 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = y;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;
		pSemWarning("Found raise statement, not supported in LUA");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = r;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		RESULT = "break ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_stmt ::= PRINT RSHIFT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print >>" + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print (" + t.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		System.out.println("print");RESULT = "print ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // augassign ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_stmt ::= testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString() + a.toString() + t2.toString(); System.out.println("Found testlist");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t; System.out.println("Found testlist");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // small_stmt ::= exec_stmt 
            {
              Object RESULT =null;
		System.out.println("Found exec_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		System.out.println("Found global_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		System.out.println("Found assert_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("Found import_stmt: " + i);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		System.out.println("Found flow_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p; System.out.println("Found PASS_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d; System.out.println("Found del_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p.toString(); System.out.println("small_stmt->print_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =e.toString(); System.out.println("Found expr_stmt"); System.out.println(e);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // small_stmt_rec ::= small_stmt_rec SEMI small_stmt 
            {
              Object RESULT =null;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = srec.toString()+";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // small_stmt_rec ::= SEMI small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_stmt ::= small_stmt small_stmt_rec SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+ srec.toString() + ";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_stmt ::= small_stmt small_stmt_rec NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+ srec.toString() + "\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+"\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int compoundleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int compoundright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object compound = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = compound;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = s;
								//System.out.println("simple_stmt: " + s.toString());
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fplist ::= fplist COMMA fpdef 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = fl+","+f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fplist ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fpdef ::= LPAREN fplist RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+f+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fpdef ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defparameter ::= fpdef ASSIGN test 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=f+"="+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defparameter ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defparameter_recoursive ::= defparameter_recoursive COMMA defparameter 
            {
              Object RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = dr+","+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defparameter_recoursive ::= defparameter 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varargslist ::= MULTMULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="**"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n1+",**"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varargslist ::= MULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varargslist ::= defparameter_recoursive MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"*"+n1+",**"+n2; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varargslist ::= defparameter_recoursive MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"**"+n; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varargslist ::= defparameter_recoursive MULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = d+",..."; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varargslist ::= defparameter_recoursive 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d.toString(); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= LPAREN varargslist RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "(" + v.toString() + ")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",77, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",77, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "function " + n +" "+ p.toString() + " " + s.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("funcdef",62, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decorated ::= decorators funcdef 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorated",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decorated ::= decorators classdef 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorated",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decorators ::= decorators decorator 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorators",76, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decorators ::= decorator 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorators",76, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decorator ::= AT dotted_name LPAREN arglist RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decorator ::= AT dotted_name LPAREN RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decorator ::= AT dotted_name NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
									RESULT = s.toString() + f.toString();
									if(s==null && f!=null)
										dumpln(f.toString());
									else if (s!=null && f == null)
										dumpln(s.toString());
									else if (s!=null && f != null)
										dumpln(s.toString() + f.toString());
								
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "\n"+f; dumpln("\n"+f);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;
		
								try {
									BufferedWriter out = new BufferedWriter(new FileWriter(parser.dumpOutput));
									String outText = parser.outputBuffer.toString();
									out.write(outText);
									out.close();
								}
                                catch (IOException e)
                                {
                                	e.printStackTrace();
                                }
                                
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

