
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 12 11:42:04 CET 2012
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 12 11:42:04 CET 2012
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\365\000\002\002\003\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\004\000\002\106\003" +
    "\000\002\106\003\000\002\040\003\000\002\040\005\000" +
    "\002\040\005\000\002\040\010\000\002\040\004\000\002" +
    "\040\007\000\002\040\004\000\002\041\003\000\002\041" +
    "\004\000\002\041\005\000\002\042\003\000\002\042\005" +
    "\000\002\043\003\000\002\043\005\000\002\044\003\000" +
    "\002\044\004\000\002\044\005\000\002\004\003\000\002" +
    "\004\003\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\105\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\006\003\000\002\006\005\000\002\006\004\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\007\003\000\002\007\004\000\002\007\005\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\050\004\000" +
    "\002\051\004\000\002\051\006\000\002\051\010\000\002" +
    "\012\004\000\002\012\006\000\002\012\010\000\002\012" +
    "\006\000\002\012\007\000\002\012\011\000\002\012\007" +
    "\000\002\012\007\000\002\012\011\000\002\012\007\000" +
    "\002\054\003\000\002\054\005\000\002\053\003\000\002" +
    "\053\005\000\002\052\003\000\002\052\005\000\002\056" +
    "\003\000\002\056\005\000\002\055\003\000\002\055\005" +
    "\000\002\057\003\000\002\057\004\000\002\014\004\000" +
    "\002\045\003\000\002\045\005\000\002\015\004\000\002" +
    "\015\006\000\002\015\010\000\002\013\004\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\073\007\000\002\073\006\000\002" +
    "\073\011\000\002\073\012\000\002\107\006\000\002\107" +
    "\007\000\002\074\006\000\002\074\011\000\002\075\010" +
    "\000\002\075\013\000\002\076\010\000\002\076\006\000" +
    "\002\076\011\000\002\076\011\000\002\076\014\000\002" +
    "\111\005\000\002\111\006\000\002\110\003\000\002\110" +
    "\004\000\002\110\006\000\002\110\006\000\002\077\006" +
    "\000\002\113\003\000\002\113\005\000\002\112\003\000" +
    "\002\112\005\000\002\103\003\000\002\103\006\000\002" +
    "\104\003\000\002\104\004\000\002\047\004\000\002\047" +
    "\005\000\002\025\003\000\002\025\003\000\002\021\003" +
    "\000\002\021\005\000\002\023\003\000\002\023\004\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\004\000\002\024\004\000\002\024\004\000\002\024" +
    "\004\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\027\003\000\002\027\004\000" +
    "\002\031\004\000\002\031\003\000\002\032\005\000\002" +
    "\032\006\000\002\032\007\000\002\030\004\000\002\030" +
    "\003\000\002\033\003\000\002\033\004\000\002\033\005" +
    "\000\002\034\003\000\002\034\004\000\002\034\005\000" +
    "\002\022\005\000\002\022\006\000\002\026\004\000\002" +
    "\026\005\000\002\026\004\000\002\026\005\000\002\026" +
    "\004\000\002\061\003\000\002\061\004\000\002\063\004" +
    "\000\002\063\005\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\004\000\002\062\005\000\002" +
    "\062\006\000\002\062\005\000\002\062\004\000\002\062" +
    "\005\000\002\062\004\000\002\064\003\000\002\064\004" +
    "\000\002\060\003\000\002\060\004\000\002\060\004\000" +
    "\002\060\005\000\002\060\007\000\002\060\007\000\002" +
    "\060\004\000\002\066\004\000\002\066\005\000\002\066" +
    "\003\000\002\065\003\000\002\065\004\000\002\065\005" +
    "\000\002\035\003\000\002\035\003\000\002\036\006\000" +
    "\002\036\007\000\002\037\004\000\002\037\005\000\002" +
    "\070\003\000\002\070\003\000\002\067\006\000\002\067" +
    "\007\000\002\071\004\000\002\071\005\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\112\002\uffff\006\023\007\053\011\017\013" +
    "\072\017\102\021\024\022\060\023\050\024\036\025\061" +
    "\030\042\033\031\034\105\035\106\036\041\037\047\040" +
    "\066\041\007\042\012\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\126\046\001\002" +
    "\000\132\004\uff78\005\uff78\021\uff78\024\uff78\026\uff78\027" +
    "\uff78\031\uff78\032\uff78\045\uff78\046\uff78\047\uff78\050\uff78" +
    "\051\uff78\052\uff78\054\u0145\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78" +
    "\067\u0143\070\uff78\072\uff78\073\u0144\074\uff78\100\uff78\101" +
    "\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78" +
    "\111\uff78\112\uff78\113\uff78\114\uff78\126\uff78\127\uff78\001" +
    "\002\000\006\064\uffdf\126\uffdf\001\002\000\114\002\uffa2" +
    "\006\uffa2\007\uffa2\011\uffa2\013\uffa2\017\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\025\uffa2\030\uffa2\033\uffa2\034\uffa2" +
    "\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\046" +
    "\uffa2\047\uffa2\067\uffa2\071\uffa2\073\uffa2\075\uffa2\115\uffa2" +
    "\116\uffa2\117\uffa2\120\uffa2\121\uffa2\122\uffa2\123\uffa2\124" +
    "\uffa2\125\uffa2\126\uffa2\131\uffa2\001\002\000\042\030\042" +
    "\046\035\047\025\067\057\071\045\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\001\002\000\132\004\uff0e\005\uff0e\021" +
    "\uff0e\024\uff0e\026\uff0e\027\uff0e\031\uff0e\032\uff0e\045\uff0e" +
    "\046\uff0e\047\uff0e\050\uff0e\051\uff0e\052\uff0e\054\uff0e\055" +
    "\uff0e\056\uff0e\057\uff0e\060\uff0e\061\uff0e\062\uff0e\063\uff0e" +
    "\064\uff0e\065\uff0e\066\uff0e\067\uff0e\070\uff0e\072\uff0e\073" +
    "\uff0e\074\uff0e\100\uff0e\101\uff0e\103\uff0e\104\uff0e\105\uff0e" +
    "\106\uff0e\107\uff0e\110\uff0e\111\uff0e\112\uff0e\113\uff0e\114" +
    "\uff0e\126\uff0e\127\uff0e\001\002\000\060\005\uff7b\021\uff7b" +
    "\024\uff7b\050\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\070" +
    "\uff7b\072\uff7b\074\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b" +
    "\107\uff7b\110\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\126" +
    "\uff7b\127\uff7b\001\002\000\050\030\042\046\035\047\025" +
    "\064\uff6b\067\057\071\045\073\015\074\uff6b\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\126\uff6b\001\002\000\004\002\001\001" +
    "\002\000\050\021\uff62\024\uff62\063\264\064\uff62\065\uff62" +
    "\066\uff62\070\uff62\074\uff62\103\uff62\104\uff62\105\uff62\106" +
    "\uff62\107\uff62\110\uff62\111\uff62\112\uff62\113\uff62\114\uff62" +
    "\126\uff62\001\002\000\046\030\042\042\012\046\035\047" +
    "\025\067\057\071\045\073\015\074\u0130\075\026\115\075" +
    "\116\040\117\104\120\021\121\010\122\064\123\070\124" +
    "\063\125\056\001\002\000\006\064\uffe3\126\uffe3\001\002" +
    "\000\006\064\uffc9\126\uffc9\001\002\000\114\002\uff9e\006" +
    "\uff9e\007\uff9e\011\uff9e\013\uff9e\017\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\025\uff9e\030\uff9e\033\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\046\uff9e" +
    "\047\uff9e\067\uff9e\071\uff9e\073\uff9e\075\uff9e\115\uff9e\116" +
    "\uff9e\117\uff9e\120\uff9e\121\uff9e\122\uff9e\123\uff9e\124\uff9e" +
    "\125\uff9e\126\uff9e\131\uff9e\001\002\000\132\004\uff0f\005" +
    "\uff0f\021\uff0f\024\uff0f\026\uff0f\027\uff0f\031\uff0f\032\uff0f" +
    "\045\uff0f\046\uff0f\047\uff0f\050\uff0f\051\uff0f\052\uff0f\054" +
    "\uff0f\055\uff0f\056\uff0f\057\uff0f\060\uff0f\061\uff0f\062\uff0f" +
    "\063\uff0f\064\uff0f\065\uff0f\066\uff0f\067\uff0f\070\uff0f\072" +
    "\uff0f\073\uff0f\074\uff0f\100\uff0f\101\uff0f\103\uff0f\104\uff0f" +
    "\105\uff0f\106\uff0f\107\uff0f\110\uff0f\111\uff0f\112\uff0f\113" +
    "\uff0f\114\uff0f\126\uff0f\127\uff0f\001\002\000\114\002\uff9d" +
    "\006\uff9d\007\uff9d\011\uff9d\013\uff9d\017\uff9d\021\uff9d\022" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\030\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\046" +
    "\uff9d\047\uff9d\067\uff9d\071\uff9d\073\uff9d\075\uff9d\115\uff9d" +
    "\116\uff9d\117\uff9d\120\uff9d\121\uff9d\122\uff9d\123\uff9d\124" +
    "\uff9d\125\uff9d\126\uff9d\131\uff9d\001\002\000\042\030\042" +
    "\046\035\047\025\067\057\071\045\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\001\002\000\040\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\040\046\uff16\047\uff16\067\uff16\071\uff16\073\uff16" +
    "\075\uff16\115\uff16\116\uff16\117\uff16\120\uff16\121\uff16\122" +
    "\uff16\123\uff16\124\uff16\125\uff16\001\002\000\040\046\uff14" +
    "\047\uff14\067\uff14\071\uff14\073\uff14\075\uff14\115\uff14\116" +
    "\uff14\117\uff14\120\uff14\121\uff14\122\uff14\123\uff14\124\uff14" +
    "\125\uff14\001\002\000\006\064\uffde\126\uffde\001\002\000" +
    "\006\064\uffdd\126\uffdd\001\002\000\006\064\uffe1\126\uffe1" +
    "\001\002\000\034\064\uffdb\065\u011e\103\u011b\104\u011c\105" +
    "\u0119\106\u0118\107\u0123\110\u011a\111\u011d\112\u0122\113\u0117" +
    "\114\u011f\126\uffdb\001\002\000\114\002\uffe8\006\uffe8\007" +
    "\uffe8\011\uffe8\013\uffe8\017\uffe8\021\uffe8\022\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\030\uffe8\033\uffe8\034\uffe8\035\uffe8\036" +
    "\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\046\uffe8\047\uffe8" +
    "\067\uffe8\071\uffe8\073\uffe8\075\uffe8\115\uffe8\116\uffe8\117" +
    "\uffe8\120\uffe8\121\uffe8\122\uffe8\123\uffe8\124\uffe8\125\uffe8" +
    "\126\uffe8\131\uffe8\001\002\000\006\064\uffc8\126\uffc8\001" +
    "\002\000\040\046\uff15\047\uff15\067\uff15\071\uff15\073\uff15" +
    "\075\uff15\115\uff15\116\uff15\117\uff15\120\uff15\121\uff15\122" +
    "\uff15\123\uff15\124\uff15\125\uff15\001\002\000\042\030\042" +
    "\046\035\047\025\067\057\071\045\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\001\002\000\006\064\uffc6\126\uffc6\001" +
    "\002\000\132\004\uff10\005\uff10\021\uff10\024\uff10\026\uff10" +
    "\027\uff10\031\uff10\032\uff10\045\uff10\046\uff10\047\uff10\050" +
    "\uff10\051\uff10\052\uff10\054\uff10\055\uff10\056\uff10\057\uff10" +
    "\060\uff10\061\uff10\062\uff10\063\uff10\064\uff10\065\uff10\066" +
    "\uff10\067\uff10\070\uff10\072\uff10\073\uff10\074\uff10\100\uff10" +
    "\101\uff10\103\uff10\104\uff10\105\uff10\106\uff10\107\uff10\110" +
    "\uff10\111\uff10\112\uff10\113\uff10\114\uff10\126\uff10\127\uff10" +
    "\001\002\000\042\030\042\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\001\002\000" +
    "\014\050\352\066\350\073\355\125\356\127\353\001\002" +
    "\000\006\064\uffe4\126\uffe4\001\002\000\114\002\uff9f\006" +
    "\uff9f\007\uff9f\011\uff9f\013\uff9f\017\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\024\uff9f\025\uff9f\030\uff9f\033\uff9f\034\uff9f\035" +
    "\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\046\uff9f" +
    "\047\uff9f\067\uff9f\071\uff9f\073\uff9f\075\uff9f\115\uff9f\116" +
    "\uff9f\117\uff9f\120\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f" +
    "\125\uff9f\126\uff9f\131\uff9f\001\002\000\044\030\042\046" +
    "\035\047\025\067\057\071\045\072\336\073\015\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\001\002\000\112\002\ufffc\006\ufffc" +
    "\007\ufffc\011\ufffc\013\ufffc\017\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\030\ufffc\033\ufffc\034\ufffc\035\ufffc" +
    "\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\046\ufffc\047" +
    "\ufffc\067\ufffc\071\ufffc\073\ufffc\075\ufffc\115\ufffc\116\ufffc" +
    "\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\125" +
    "\ufffc\126\ufffc\001\002\000\004\066\305\001\002\000\004" +
    "\125\301\001\002\000\006\064\uffe0\126\uffe0\001\002\000" +
    "\114\002\uffa3\006\uffa3\007\uffa3\011\uffa3\013\uffa3\017\uffa3" +
    "\021\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\030\uffa3\033" +
    "\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\046\uffa3\047\uffa3\067\uffa3\071\uffa3\073\uffa3\075" +
    "\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\122\uffa3" +
    "\123\uffa3\124\uffa3\125\uffa3\126\uffa3\131\uffa3\001\002\000" +
    "\006\064\uffca\126\uffca\001\002\000\114\002\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\013\uffe9\017\uffe9\021\uffe9\022\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\030\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\046\uffe9\047" +
    "\uffe9\067\uffe9\071\uffe9\073\uffe9\075\uffe9\115\uffe9\116\uffe9" +
    "\117\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125" +
    "\uffe9\126\uffe9\131\uffe9\001\002\000\006\064\uffc7\126\uffc7" +
    "\001\002\000\132\004\uff76\005\uff76\021\uff76\024\uff76\026" +
    "\uff76\027\uff76\031\uff76\032\uff76\045\uff76\046\uff76\047\uff76" +
    "\050\uff76\051\uff76\052\uff76\054\uff76\055\uff76\056\uff76\057" +
    "\uff76\060\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065\uff76" +
    "\066\uff76\067\uff76\070\uff76\072\uff76\073\uff76\074\uff76\100" +
    "\uff76\101\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76" +
    "\110\uff76\111\uff76\112\uff76\113\uff76\114\uff76\126\uff76\127" +
    "\uff76\001\002\000\044\030\042\046\035\047\025\067\057" +
    "\070\257\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\006\054\222\125\210\001\002\000\004\125" +
    "\210\001\002\000\004\002\205\001\002\000\132\004\uff12" +
    "\005\uff12\021\uff12\024\uff12\026\uff12\027\uff12\031\uff12\032" +
    "\uff12\045\uff12\046\uff12\047\uff12\050\uff12\051\uff12\052\uff12" +
    "\054\uff12\055\uff12\056\uff12\057\uff12\060\uff12\061\uff12\062" +
    "\uff12\063\uff12\064\uff12\065\uff12\066\uff12\067\uff12\070\uff12" +
    "\072\uff12\073\uff12\074\uff12\100\uff12\101\uff12\103\uff12\104" +
    "\uff12\105\uff12\106\uff12\107\uff12\110\uff12\111\uff12\112\uff12" +
    "\113\uff12\114\uff12\126\uff12\127\uff12\001\002\000\132\004" +
    "\uff0d\005\uff0d\021\uff0d\024\uff0d\026\uff0d\027\uff0d\031\uff0d" +
    "\032\uff0d\045\uff0d\046\uff0d\047\uff0d\050\uff0d\051\uff0d\052" +
    "\uff0d\054\uff0d\055\uff0d\056\uff0d\057\uff0d\060\uff0d\061\uff0d" +
    "\062\uff0d\063\uff0d\064\uff0d\065\uff0d\066\uff0d\067\uff0d\070" +
    "\uff0d\072\uff0d\073\uff0d\074\uff0d\100\uff0d\101\uff0d\103\uff0d" +
    "\104\uff0d\105\uff0d\106\uff0d\107\uff0d\110\uff0d\111\uff0d\112" +
    "\uff0d\113\uff0d\114\uff0d\126\uff0d\127\uff0d\001\002\000\006" +
    "\064\uffdc\126\uffdc\001\002\000\042\030\042\046\035\047" +
    "\025\067\057\071\045\073\015\075\026\115\075\116\040" +
    "\117\104\120\021\121\010\122\064\123\070\124\063\125" +
    "\056\001\002\000\114\002\uffa1\006\uffa1\007\uffa1\011\uffa1" +
    "\013\uffa1\017\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\030\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\042\uffa1\046\uffa1\047\uffa1\067\uffa1\071" +
    "\uffa1\073\uffa1\075\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\121\uffa1\122\uffa1\123\uffa1\124\uffa1\125\uffa1\126\uffa1\131" +
    "\uffa1\001\002\000\132\004\uff13\005\uff13\021\uff13\024\uff13" +
    "\026\uff13\027\uff13\031\uff13\032\uff13\045\uff13\046\uff13\047" +
    "\uff13\050\uff13\051\uff13\052\uff13\054\uff13\055\uff13\056\uff13" +
    "\057\uff13\060\uff13\061\uff13\062\uff13\063\uff13\064\uff13\065" +
    "\uff13\066\uff13\067\uff13\070\uff13\072\uff13\073\uff13\074\uff13" +
    "\100\uff13\101\uff13\103\uff13\104\uff13\105\uff13\106\uff13\107" +
    "\uff13\110\uff13\111\uff13\112\uff13\113\uff13\114\uff13\126\uff13" +
    "\127\uff13\001\002\000\006\064\uffe2\126\uffe2\001\002\000" +
    "\040\046\035\047\025\067\057\071\045\073\015\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\001\002\000\124\004\135\005\uff7a" +
    "\021\uff7a\024\uff7a\026\141\027\136\031\142\032\140\045" +
    "\157\046\137\047\154\050\151\051\152\052\134\055\153" +
    "\056\144\057\155\060\145\061\156\062\160\063\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\070\uff7a\072\uff7a\074\uff7a\100\147" +
    "\101\143\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110" +
    "\uff7a\111\uff7a\112\uff7a\113\uff7a\114\uff7a\126\uff7a\127\150" +
    "\001\002\000\112\002\ufffe\006\023\007\053\011\017\013" +
    "\072\017\102\021\024\022\060\023\050\024\036\025\061" +
    "\030\042\033\031\034\105\035\106\036\041\037\047\040" +
    "\066\041\007\042\012\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\126\046\001\002" +
    "\000\132\004\uff74\005\uff74\021\uff74\024\uff74\026\uff74\027" +
    "\uff74\031\uff74\032\uff74\045\uff74\046\uff74\047\uff74\050\uff74" +
    "\051\uff74\052\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060" +
    "\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74" +
    "\067\uff74\070\uff74\072\uff74\073\uff74\074\uff74\100\uff74\101" +
    "\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107\uff74\110\uff74" +
    "\111\uff74\112\uff74\113\uff74\114\uff74\126\uff74\127\uff74\001" +
    "\002\000\114\002\uffa0\006\uffa0\007\uffa0\011\uffa0\013\uffa0" +
    "\017\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\030" +
    "\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\046\uffa0\047\uffa0\067\uffa0\071\uffa0\073" +
    "\uffa0\075\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0" +
    "\122\uffa0\123\uffa0\124\uffa0\125\uffa0\126\uffa0\131\uffa0\001" +
    "\002\000\114\002\uffa4\006\uffa4\007\uffa4\011\uffa4\013\uffa4" +
    "\017\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\030" +
    "\uffa4\033\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4" +
    "\041\uffa4\042\uffa4\046\uffa4\047\uffa4\067\uffa4\071\uffa4\073" +
    "\uffa4\075\uffa4\115\uffa4\116\uffa4\117\uffa4\120\uffa4\121\uffa4" +
    "\122\uffa4\123\uffa4\124\uffa4\125\uffa4\126\uffa4\131\uffa4\001" +
    "\002\000\040\046\035\047\025\067\057\071\045\073\015" +
    "\075\026\115\075\116\040\117\104\120\021\121\010\122" +
    "\064\123\070\124\063\125\056\001\002\000\006\064\126" +
    "\126\127\001\002\000\040\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\001\002\000" +
    "\060\005\uff7c\021\uff7c\024\uff7c\050\uff7c\063\uff7c\064\uff7c" +
    "\065\uff7c\066\uff7c\070\uff7c\072\uff7c\074\uff7c\103\uff7c\104" +
    "\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111\uff7c\112\uff7c" +
    "\113\uff7c\114\uff7c\126\uff7c\127\uff7c\001\002\000\132\004" +
    "\uff11\005\uff11\021\uff11\024\uff11\026\uff11\027\uff11\031\uff11" +
    "\032\uff11\045\uff11\046\uff11\047\uff11\050\uff11\051\uff11\052" +
    "\uff11\054\uff11\055\uff11\056\uff11\057\uff11\060\uff11\061\uff11" +
    "\062\uff11\063\uff11\064\uff11\065\uff11\066\uff11\067\uff11\070" +
    "\uff11\072\uff11\073\uff11\074\uff11\100\uff11\101\uff11\103\uff11" +
    "\104\uff11\105\uff11\106\uff11\107\uff11\110\uff11\111\uff11\112" +
    "\uff11\113\uff11\114\uff11\126\uff11\127\uff11\001\002\000\050" +
    "\030\042\046\035\047\025\064\uffce\067\057\071\045\073" +
    "\015\075\026\101\116\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\126\uffce\001" +
    "\002\000\042\030\042\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\001\002\000\112" +
    "\002\ufffb\006\ufffb\007\ufffb\011\ufffb\013\ufffb\017\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\030\ufffb\033\ufffb" +
    "\034\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042" +
    "\ufffb\046\ufffb\047\ufffb\067\ufffb\071\ufffb\073\ufffb\075\ufffb" +
    "\115\ufffb\116\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123" +
    "\ufffb\124\ufffb\125\ufffb\126\ufffb\001\002\000\132\004\uff75" +
    "\005\uff75\021\uff75\024\uff75\026\uff75\027\uff75\031\uff75\032" +
    "\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75" +
    "\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062" +
    "\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75" +
    "\072\uff75\073\uff75\074\uff75\100\uff75\101\uff75\103\uff75\104" +
    "\uff75\105\uff75\106\uff75\107\uff75\110\uff75\111\uff75\112\uff75" +
    "\113\uff75\114\uff75\126\uff75\127\uff75\001\002\000\010\063" +
    "\112\064\uffc4\126\uffc4\001\002\000\042\030\042\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\001\002\000\010\063\114\064\uffc3\126\uffc3\001" +
    "\002\000\042\030\042\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\001\002\000\006" +
    "\064\uffc2\126\uffc2\001\002\000\042\030\042\046\035\047" +
    "\025\067\057\071\045\073\015\075\026\115\075\116\040" +
    "\117\104\120\021\121\010\122\064\123\070\124\063\125" +
    "\056\001\002\000\006\064\uffcd\126\uffcd\001\002\000\006" +
    "\064\uffcc\126\uffcc\001\002\000\010\026\122\064\uffa8\126" +
    "\uffa8\001\002\000\042\030\042\046\035\047\025\067\057" +
    "\071\045\073\015\075\026\115\075\116\040\117\104\120" +
    "\021\121\010\122\064\123\070\124\063\125\056\001\002" +
    "\000\010\063\124\064\uffa7\126\uffa7\001\002\000\042\030" +
    "\042\046\035\047\025\067\057\071\045\073\015\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\001\002\000\006\064\uffa6\126\uffa6" +
    "\001\002\000\076\006\023\007\053\011\017\013\072\017" +
    "\102\022\060\023\050\025\061\030\042\033\031\034\105" +
    "\035\106\036\041\042\012\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\126\130\001" +
    "\002\000\124\002\uffe7\006\uffe7\007\uffe7\011\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\024\uffe7\025\uffe7\030\uffe7\033\uffe7\034\uffe7" +
    "\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\046" +
    "\uffe7\047\uffe7\067\uffe7\071\uffe7\073\uffe7\075\uffe7\115\uffe7" +
    "\116\uffe7\117\uffe7\120\uffe7\121\uffe7\122\uffe7\123\uffe7\124" +
    "\uffe7\125\uffe7\126\uffe7\131\uffe7\001\002\000\124\002\uffe6" +
    "\006\uffe6\007\uffe6\011\uffe6\013\uffe6\014\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\030\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\046\uffe6\047\uffe6\067\uffe6" +
    "\071\uffe6\073\uffe6\075\uffe6\115\uffe6\116\uffe6\117\uffe6\120" +
    "\uffe6\121\uffe6\122\uffe6\123\uffe6\124\uffe6\125\uffe6\126\uffe6" +
    "\131\uffe6\001\002\000\124\002\uffe5\006\uffe5\007\uffe5\011" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\046\uffe5\047\uffe5\067\uffe5\071\uffe5\073\uffe5\075" +
    "\uffe5\115\uffe5\116\uffe5\117\uffe5\120\uffe5\121\uffe5\122\uffe5" +
    "\123\uffe5\124\uffe5\125\uffe5\126\uffe5\131\uffe5\001\002\000" +
    "\132\004\uff73\005\uff73\021\uff73\024\uff73\026\uff73\027\uff73" +
    "\031\uff73\032\uff73\045\uff73\046\uff73\047\uff73\050\uff73\051" +
    "\uff73\052\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73" +
    "\061\uff73\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067" +
    "\uff73\070\uff73\072\uff73\073\uff73\074\uff73\100\uff73\101\uff73" +
    "\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110\uff73\111" +
    "\uff73\112\uff73\113\uff73\114\uff73\126\uff73\127\uff73\001\002" +
    "\000\004\002\ufffd\001\002\000\040\046\uff27\047\uff27\067" +
    "\uff27\071\uff27\073\uff27\075\uff27\115\uff27\116\uff27\117\uff27" +
    "\120\uff27\121\uff27\122\uff27\123\uff27\124\uff27\125\uff27\001" +
    "\002\000\040\046\uff1a\047\uff1a\067\uff1a\071\uff1a\073\uff1a" +
    "\075\uff1a\115\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122" +
    "\uff1a\123\uff1a\124\uff1a\125\uff1a\001\002\000\042\031\163" +
    "\046\uff26\047\uff26\067\uff26\071\uff26\073\uff26\075\uff26\115" +
    "\uff26\116\uff26\117\uff26\120\uff26\121\uff26\122\uff26\123\uff26" +
    "\124\uff26\125\uff26\001\002\000\040\046\uff2c\047\uff2c\067" +
    "\uff2c\071\uff2c\073\uff2c\075\uff2c\115\uff2c\116\uff2c\117\uff2c" +
    "\120\uff2c\121\uff2c\122\uff2c\123\uff2c\124\uff2c\125\uff2c\001" +
    "\002\000\040\046\uff19\047\uff19\067\uff19\071\uff19\073\uff19" +
    "\075\uff19\115\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122" +
    "\uff19\123\uff19\124\uff19\125\uff19\001\002\000\040\046\uff25" +
    "\047\uff25\067\uff25\071\uff25\073\uff25\075\uff25\115\uff25\116" +
    "\uff25\117\uff25\120\uff25\121\uff25\122\uff25\123\uff25\124\uff25" +
    "\125\uff25\001\002\000\042\026\162\046\uff17\047\uff17\067" +
    "\uff17\071\uff17\073\uff17\075\uff17\115\uff17\116\uff17\117\uff17" +
    "\120\uff17\121\uff17\122\uff17\123\uff17\124\uff17\125\uff17\001" +
    "\002\000\040\046\uff21\047\uff21\067\uff21\071\uff21\073\uff21" +
    "\075\uff21\115\uff21\116\uff21\117\uff21\120\uff21\121\uff21\122" +
    "\uff21\123\uff21\124\uff21\125\uff21\001\002\000\040\046\uff1f" +
    "\047\uff1f\067\uff1f\071\uff1f\073\uff1f\075\uff1f\115\uff1f\116" +
    "\uff1f\117\uff1f\120\uff1f\121\uff1f\122\uff1f\123\uff1f\124\uff1f" +
    "\125\uff1f\001\002\000\040\046\uff1d\047\uff1d\067\uff1d\071" +
    "\uff1d\073\uff1d\075\uff1d\115\uff1d\116\uff1d\117\uff1d\120\uff1d" +
    "\121\uff1d\122\uff1d\123\uff1d\124\uff1d\125\uff1d\001\002\000" +
    "\040\046\035\047\025\067\057\071\045\073\015\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\001\002\000\040\046\uff22\047\uff22" +
    "\067\uff22\071\uff22\073\uff22\075\uff22\115\uff22\116\uff22\117" +
    "\uff22\120\uff22\121\uff22\122\uff22\123\uff22\124\uff22\125\uff22" +
    "\001\002\000\040\046\uff18\047\uff18\067\uff18\071\uff18\073" +
    "\uff18\075\uff18\115\uff18\116\uff18\117\uff18\120\uff18\121\uff18" +
    "\122\uff18\123\uff18\124\uff18\125\uff18\001\002\000\040\046" +
    "\uff2a\047\uff2a\067\uff2a\071\uff2a\073\uff2a\075\uff2a\115\uff2a" +
    "\116\uff2a\117\uff2a\120\uff2a\121\uff2a\122\uff2a\123\uff2a\124" +
    "\uff2a\125\uff2a\001\002\000\040\046\uff29\047\uff29\067\uff29" +
    "\071\uff29\073\uff29\075\uff29\115\uff29\116\uff29\117\uff29\120" +
    "\uff29\121\uff29\122\uff29\123\uff29\124\uff29\125\uff29\001\002" +
    "\000\040\046\uff20\047\uff20\067\uff20\071\uff20\073\uff20\075" +
    "\uff20\115\uff20\116\uff20\117\uff20\120\uff20\121\uff20\122\uff20" +
    "\123\uff20\124\uff20\125\uff20\001\002\000\040\046\uff2b\047" +
    "\uff2b\067\uff2b\071\uff2b\073\uff2b\075\uff2b\115\uff2b\116\uff2b" +
    "\117\uff2b\120\uff2b\121\uff2b\122\uff2b\123\uff2b\124\uff2b\125" +
    "\uff2b\001\002\000\040\046\uff1e\047\uff1e\067\uff1e\071\uff1e" +
    "\073\uff1e\075\uff1e\115\uff1e\116\uff1e\117\uff1e\120\uff1e\121" +
    "\uff1e\122\uff1e\123\uff1e\124\uff1e\125\uff1e\001\002\000\040" +
    "\046\uff1c\047\uff1c\067\uff1c\071\uff1c\073\uff1c\075\uff1c\115" +
    "\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122\uff1c\123\uff1c" +
    "\124\uff1c\125\uff1c\001\002\000\040\046\uff28\047\uff28\067" +
    "\uff28\071\uff28\073\uff28\075\uff28\115\uff28\116\uff28\117\uff28" +
    "\120\uff28\121\uff28\122\uff28\123\uff28\124\uff28\125\uff28\001" +
    "\002\000\040\046\uff1b\047\uff1b\067\uff1b\071\uff1b\073\uff1b" +
    "\075\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122" +
    "\uff1b\123\uff1b\124\uff1b\125\uff1b\001\002\000\060\005\uff79" +
    "\021\uff79\024\uff79\050\uff79\063\uff79\064\uff79\065\uff79\066" +
    "\uff79\070\uff79\072\uff79\074\uff79\103\uff79\104\uff79\105\uff79" +
    "\106\uff79\107\uff79\110\uff79\111\uff79\112\uff79\113\uff79\114" +
    "\uff79\126\uff79\127\uff79\001\002\000\040\046\uff23\047\uff23" +
    "\067\uff23\071\uff23\073\uff23\075\uff23\115\uff23\116\uff23\117" +
    "\uff23\120\uff23\121\uff23\122\uff23\123\uff23\124\uff23\125\uff23" +
    "\001\002\000\040\046\uff24\047\uff24\067\uff24\071\uff24\073" +
    "\uff24\075\uff24\115\uff24\116\uff24\117\uff24\120\uff24\121\uff24" +
    "\122\uff24\123\uff24\124\uff24\125\uff24\001\002\000\006\064" +
    "\uffcb\126\uffcb\001\002\000\012\026\uff5f\063\166\064\uff5f" +
    "\126\uff5f\001\002\000\046\026\uff5e\046\035\047\025\064" +
    "\uff5e\067\057\071\045\073\015\075\026\115\075\116\040" +
    "\117\104\120\021\121\010\122\064\123\070\124\063\125" +
    "\056\126\uff5e\001\002\000\010\026\uff5d\064\uff5d\126\uff5d" +
    "\001\002\000\004\066\171\001\002\000\076\006\023\007" +
    "\053\011\017\013\072\017\102\022\060\023\050\025\061" +
    "\030\042\033\031\034\105\035\106\036\041\042\012\046" +
    "\035\047\025\067\057\071\045\073\015\075\026\115\075" +
    "\116\040\117\104\120\021\121\010\122\064\123\070\124" +
    "\063\125\056\126\173\001\002\000\116\002\uff96\006\uff96" +
    "\007\uff96\011\uff96\013\uff96\015\202\017\uff96\021\uff96\022" +
    "\uff96\023\uff96\024\uff96\025\uff96\030\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\046" +
    "\uff96\047\uff96\067\uff96\071\uff96\073\uff96\075\uff96\115\uff96" +
    "\116\uff96\117\uff96\120\uff96\121\uff96\122\uff96\123\uff96\124" +
    "\uff96\125\uff96\126\uff96\131\uff96\001\002\000\004\130\175" +
    "\001\002\000\124\002\uff82\006\uff82\007\uff82\011\uff82\013" +
    "\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\021\uff82" +
    "\022\uff82\023\uff82\024\uff82\025\uff82\030\uff82\033\uff82\034" +
    "\uff82\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82" +
    "\046\uff82\047\uff82\067\uff82\071\uff82\073\uff82\075\uff82\115" +
    "\uff82\116\uff82\117\uff82\120\uff82\121\uff82\122\uff82\123\uff82" +
    "\124\uff82\125\uff82\126\uff82\131\uff82\001\002\000\106\006" +
    "\023\007\053\011\017\013\072\017\102\021\024\022\060" +
    "\023\050\024\036\025\061\030\042\033\031\034\105\035" +
    "\106\036\041\037\047\040\066\041\007\042\012\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\001\002\000\004\131\201\001\002\000\110\006" +
    "\023\007\053\011\017\013\072\017\102\021\024\022\060" +
    "\023\050\024\036\025\061\030\042\033\031\034\105\035" +
    "\106\036\041\037\047\040\066\041\007\042\012\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\131\uff80\001\002\000\004\131\uff7f\001\002\000" +
    "\124\002\uff81\006\uff81\007\uff81\011\uff81\013\uff81\014\uff81" +
    "\015\uff81\016\uff81\017\uff81\020\uff81\021\uff81\022\uff81\023" +
    "\uff81\024\uff81\025\uff81\030\uff81\033\uff81\034\uff81\035\uff81" +
    "\036\uff81\037\uff81\040\uff81\041\uff81\042\uff81\046\uff81\047" +
    "\uff81\067\uff81\071\uff81\073\uff81\075\uff81\115\uff81\116\uff81" +
    "\117\uff81\120\uff81\121\uff81\122\uff81\123\uff81\124\uff81\125" +
    "\uff81\126\uff81\131\uff81\001\002\000\004\066\203\001\002" +
    "\000\076\006\023\007\053\011\017\013\072\017\102\022" +
    "\060\023\050\025\061\030\042\033\031\034\105\035\106" +
    "\036\041\042\012\046\035\047\025\067\057\071\045\073" +
    "\015\075\026\115\075\116\040\117\104\120\021\121\010" +
    "\122\064\123\070\124\063\125\056\126\173\001\002\000" +
    "\114\002\uff95\006\uff95\007\uff95\011\uff95\013\uff95\017\uff95" +
    "\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\030\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\046\uff95\047\uff95\067\uff95\071\uff95\073\uff95\075" +
    "\uff95\115\uff95\116\uff95\117\uff95\120\uff95\121\uff95\122\uff95" +
    "\123\uff95\124\uff95\125\uff95\126\uff95\131\uff95\001\002\000" +
    "\004\002\000\001\002\000\012\005\216\063\uffb5\064\uffb5" +
    "\126\uffb5\001\002\000\006\064\uffc1\126\uffc1\001\002\000" +
    "\016\005\uffb3\025\uffb3\054\214\063\uffb3\064\uffb3\126\uffb3" +
    "\001\002\000\010\063\212\064\uffb7\126\uffb7\001\002\000" +
    "\004\125\210\001\002\000\006\064\uffb6\126\uffb6\001\002" +
    "\000\004\125\210\001\002\000\014\005\uffb2\025\uffb2\063" +
    "\uffb2\064\uffb2\126\uffb2\001\002\000\004\125\217\001\002" +
    "\000\010\063\uffb4\064\uffb4\126\uffb4\001\002\000\004\025" +
    "\251\001\002\000\004\125\210\001\002\000\006\054\224" +
    "\125\uffad\001\002\000\006\025\226\125\uffac\001\002\000" +
    "\010\025\uffad\054\224\125\uffad\001\002\000\006\025\uffac" +
    "\125\uffac\001\002\000\010\050\227\073\231\125\232\001" +
    "\002\000\006\064\uffba\126\uffba\001\002\000\012\063\240" +
    "\064\uffb1\074\uffb1\126\uffb1\001\002\000\004\125\232\001" +
    "\002\000\014\005\234\063\uffaf\064\uffaf\074\uffaf\126\uffaf" +
    "\001\002\000\006\064\uffb8\126\uffb8\001\002\000\004\125" +
    "\235\001\002\000\012\063\uffae\064\uffae\074\uffae\126\uffae" +
    "\001\002\000\004\074\237\001\002\000\006\064\uffb9\126" +
    "\uffb9\001\002\000\004\125\232\001\002\000\010\064\uffb0" +
    "\074\uffb0\126\uffb0\001\002\000\004\025\243\001\002\000" +
    "\010\050\244\073\245\125\232\001\002\000\006\064\uffbd" +
    "\126\uffbd\001\002\000\004\125\232\001\002\000\006\064" +
    "\uffbb\126\uffbb\001\002\000\004\074\250\001\002\000\006" +
    "\064\uffbc\126\uffbc\001\002\000\010\050\252\073\253\125" +
    "\232\001\002\000\006\064\uffc0\126\uffc0\001\002\000\004" +
    "\125\232\001\002\000\006\064\uffbe\126\uffbe\001\002\000" +
    "\004\074\256\001\002\000\006\064\uffbf\126\uffbf\001\002" +
    "\000\132\004\uff71\005\uff71\021\uff71\024\uff71\026\uff71\027" +
    "\uff71\031\uff71\032\uff71\045\uff71\046\uff71\047\uff71\050\uff71" +
    "\051\uff71\052\uff71\054\uff71\055\uff71\056\uff71\057\uff71\060" +
    "\uff71\061\uff71\062\uff71\063\uff71\064\uff71\065\uff71\066\uff71" +
    "\067\uff71\070\uff71\072\uff71\073\uff71\074\uff71\100\uff71\101" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71" +
    "\111\uff71\112\uff71\113\uff71\114\uff71\126\uff71\127\uff71\001" +
    "\002\000\004\070\300\001\002\000\010\021\265\063\264" +
    "\070\uff62\001\002\000\004\070\uff68\001\002\000\004\070" +
    "\uff69\001\002\000\106\021\uff61\024\uff61\030\042\046\035" +
    "\047\025\064\uff61\065\uff61\066\uff61\067\057\070\uff61\071" +
    "\045\073\015\074\uff61\075\026\103\uff61\104\uff61\105\uff61" +
    "\106\uff61\107\uff61\110\uff61\111\uff61\112\uff61\113\uff61\114" +
    "\uff61\115\075\116\040\117\104\120\021\121\010\122\064" +
    "\123\070\124\063\125\056\126\uff61\001\002\000\040\046" +
    "\035\047\025\067\057\071\045\073\015\075\026\115\075" +
    "\116\040\117\104\120\021\121\010\122\064\123\070\124" +
    "\063\125\056\001\002\000\004\026\267\001\002\000\042" +
    "\030\042\046\035\047\025\067\057\071\045\073\015\075" +
    "\026\115\075\116\040\117\104\120\021\121\010\122\064" +
    "\123\070\124\063\125\056\001\002\000\012\021\265\024" +
    "\274\070\uff36\074\uff36\001\002\000\006\070\uff38\074\uff38" +
    "\001\002\000\006\070\uff37\074\uff37\001\002\000\006\070" +
    "\uff35\074\uff35\001\002\000\042\030\042\046\035\047\025" +
    "\067\057\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\012\021\265\024\274\070\uff34\074\uff34\001" +
    "\002\000\006\070\uff33\074\uff33\001\002\000\046\021\uff60" +
    "\024\uff60\064\uff60\065\uff60\066\uff60\070\uff60\074\uff60\103" +
    "\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110\uff60\111\uff60" +
    "\112\uff60\113\uff60\114\uff60\126\uff60\001\002\000\132\004" +
    "\uff6d\005\uff6d\021\uff6d\024\uff6d\026\uff6d\027\uff6d\031\uff6d" +
    "\032\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052" +
    "\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d" +
    "\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070" +
    "\uff6d\072\uff6d\073\uff6d\074\uff6d\100\uff6d\101\uff6d\103\uff6d" +
    "\104\uff6d\105\uff6d\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112" +
    "\uff6d\113\uff6d\114\uff6d\126\uff6d\127\uff6d\001\002\000\010" +
    "\063\303\064\uffaa\126\uffaa\001\002\000\006\064\uffab\126" +
    "\uffab\001\002\000\004\125\301\001\002\000\006\064\uffa9" +
    "\126\uffa9\001\002\000\076\006\023\007\053\011\017\013" +
    "\072\017\102\022\060\023\050\025\061\030\042\033\031" +
    "\034\105\035\106\036\041\042\012\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\126" +
    "\173\001\002\000\006\016\310\020\311\001\002\000\120" +
    "\002\uff91\006\uff91\007\uff91\011\uff91\013\uff91\015\326\017" +
    "\uff91\020\325\021\uff91\022\uff91\023\uff91\024\uff91\025\uff91" +
    "\030\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040" +
    "\uff91\041\uff91\042\uff91\046\uff91\047\uff91\067\uff91\071\uff91" +
    "\073\uff91\075\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121" +
    "\uff91\122\uff91\123\uff91\124\uff91\125\uff91\126\uff91\131\uff91" +
    "\001\002\000\044\030\042\046\035\047\025\066\uff8b\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\004\066\316\001\002\000\004\066\313\001\002" +
    "\000\076\006\023\007\053\011\017\013\072\017\102\022" +
    "\060\023\050\025\061\030\042\033\031\034\105\035\106" +
    "\036\041\042\012\046\035\047\025\067\057\071\045\073" +
    "\015\075\026\115\075\116\040\117\104\120\021\121\010" +
    "\122\064\123\070\124\063\125\056\126\173\001\002\000" +
    "\122\002\uff8d\006\uff8d\007\uff8d\011\uff8d\013\uff8d\015\uff8d" +
    "\016\310\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\030\uff8d\033\uff8d\034\uff8d\035\uff8d\036\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\046\uff8d\047\uff8d\067" +
    "\uff8d\071\uff8d\073\uff8d\075\uff8d\115\uff8d\116\uff8d\117\uff8d" +
    "\120\uff8d\121\uff8d\122\uff8d\123\uff8d\124\uff8d\125\uff8d\126" +
    "\uff8d\131\uff8d\001\002\000\120\002\uff8c\006\uff8c\007\uff8c" +
    "\011\uff8c\013\uff8c\015\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\025\uff8c\030\uff8c\033\uff8c\034\uff8c" +
    "\035\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\046" +
    "\uff8c\047\uff8c\067\uff8c\071\uff8c\073\uff8c\075\uff8c\115\uff8c" +
    "\116\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c\124" +
    "\uff8c\125\uff8c\126\uff8c\131\uff8c\001\002\000\076\006\023" +
    "\007\053\011\017\013\072\017\102\022\060\023\050\025" +
    "\061\030\042\033\031\034\105\035\106\036\041\042\012" +
    "\046\035\047\025\067\057\071\045\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\126\173\001\002\000\114\002\uff92\006" +
    "\uff92\007\uff92\011\uff92\013\uff92\017\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\030\uff92\033\uff92\034\uff92\035" +
    "\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\046\uff92" +
    "\047\uff92\067\uff92\071\uff92\073\uff92\075\uff92\115\uff92\116" +
    "\uff92\117\uff92\120\uff92\121\uff92\122\uff92\123\uff92\124\uff92" +
    "\125\uff92\126\uff92\131\uff92\001\002\000\010\005\322\063" +
    "\321\066\uff8a\001\002\000\042\030\042\046\035\047\025" +
    "\067\057\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\042\030\042\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\001\002\000" +
    "\004\066\uff89\001\002\000\004\066\uff88\001\002\000\004" +
    "\066\334\001\002\000\004\066\327\001\002\000\076\006" +
    "\023\007\053\011\017\013\072\017\102\022\060\023\050" +
    "\025\061\030\042\033\031\034\105\035\106\036\041\042" +
    "\012\046\035\047\025\067\057\071\045\073\015\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\126\173\001\002\000\116\002\uff90" +
    "\006\uff90\007\uff90\011\uff90\013\uff90\017\uff90\020\331\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\025\uff90\030\uff90\033\uff90" +
    "\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042" +
    "\uff90\046\uff90\047\uff90\067\uff90\071\uff90\073\uff90\075\uff90" +
    "\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90\123" +
    "\uff90\124\uff90\125\uff90\126\uff90\131\uff90\001\002\000\004" +
    "\066\332\001\002\000\076\006\023\007\053\011\017\013" +
    "\072\017\102\022\060\023\050\025\061\030\042\033\031" +
    "\034\105\035\106\036\041\042\012\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\126" +
    "\173\001\002\000\114\002\uff8e\006\uff8e\007\uff8e\011\uff8e" +
    "\013\uff8e\017\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\030\uff8e\033\uff8e\034\uff8e\035\uff8e\036\uff8e\037\uff8e" +
    "\040\uff8e\041\uff8e\042\uff8e\046\uff8e\047\uff8e\067\uff8e\071" +
    "\uff8e\073\uff8e\075\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\121\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\131" +
    "\uff8e\001\002\000\076\006\023\007\053\011\017\013\072" +
    "\017\102\022\060\023\050\025\061\030\042\033\031\034" +
    "\105\035\106\036\041\042\012\046\035\047\025\067\057" +
    "\071\045\073\015\075\026\115\075\116\040\117\104\120" +
    "\021\121\010\122\064\123\070\124\063\125\056\126\173" +
    "\001\002\000\114\002\uff8f\006\uff8f\007\uff8f\011\uff8f\013" +
    "\uff8f\017\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f\025\uff8f" +
    "\030\uff8f\033\uff8f\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040" +
    "\uff8f\041\uff8f\042\uff8f\046\uff8f\047\uff8f\067\uff8f\071\uff8f" +
    "\073\uff8f\075\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\121" +
    "\uff8f\122\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f\131\uff8f" +
    "\001\002\000\132\004\uff70\005\uff70\021\uff70\024\uff70\026" +
    "\uff70\027\uff70\031\uff70\032\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\054\uff70\055\uff70\056\uff70\057" +
    "\uff70\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70" +
    "\066\uff70\067\uff70\070\uff70\072\uff70\073\uff70\074\uff70\100" +
    "\uff70\101\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70" +
    "\110\uff70\111\uff70\112\uff70\113\uff70\114\uff70\126\uff70\127" +
    "\uff70\001\002\000\004\072\345\001\002\000\004\066\341" +
    "\001\002\000\042\030\042\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\001\002\000" +
    "\006\063\343\072\uff67\001\002\000\044\030\042\046\035" +
    "\047\025\067\057\071\045\072\uff66\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\001\002\000\004\072\uff65\001\002\000" +
    "\132\004\uff6c\005\uff6c\021\uff6c\024\uff6c\026\uff6c\027\uff6c" +
    "\031\uff6c\032\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051" +
    "\uff6c\052\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060\uff6c" +
    "\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\066\uff6c\067" +
    "\uff6c\070\uff6c\072\uff6c\073\uff6c\074\uff6c\100\uff6c\101\uff6c" +
    "\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110\uff6c\111" +
    "\uff6c\112\uff6c\113\uff6c\114\uff6c\126\uff6c\127\uff6c\001\002" +
    "\000\012\050\ufff3\063\u0105\066\ufff3\127\ufff3\001\002\000" +
    "\014\050\ufff0\063\ufff0\065\u0103\066\ufff0\127\ufff0\001\002" +
    "\000\042\030\042\046\035\047\025\067\057\071\045\073" +
    "\015\075\026\115\075\116\040\117\104\120\021\121\010" +
    "\122\064\123\070\124\063\125\056\001\002\000\010\050" +
    "\373\066\ufffa\127\374\001\002\000\004\125\367\001\002" +
    "\000\004\125\366\001\002\000\004\066\364\001\002\000" +
    "\006\073\355\125\356\001\002\000\016\050\uffee\063\uffee" +
    "\065\uffee\066\uffee\074\uffee\127\uffee\001\002\000\004\074" +
    "\363\001\002\000\006\063\361\074\uffec\001\002\000\010" +
    "\073\355\074\uffeb\125\356\001\002\000\004\074\uffea\001" +
    "\002\000\016\050\uffed\063\uffed\065\uffed\066\uffed\074\uffed" +
    "\127\uffed\001\002\000\042\030\042\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\060\005\uff5b\021\uff5b\024\uff5b\050\uff5b\063\uff5b" +
    "\064\uff5b\065\uff5b\066\uff5b\070\uff5b\072\uff5b\074\uff5b\103" +
    "\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b\111\uff5b" +
    "\112\uff5b\113\uff5b\114\uff5b\126\uff5b\127\uff5b\001\002\000" +
    "\004\066\ufff4\001\002\000\006\063\370\066\ufff6\001\002" +
    "\000\004\127\371\001\002\000\004\125\372\001\002\000" +
    "\004\066\ufff5\001\002\000\004\125\376\001\002\000\004" +
    "\125\375\001\002\000\004\066\ufff8\001\002\000\006\063" +
    "\377\066\ufff9\001\002\000\004\127\u0100\001\002\000\004" +
    "\125\u0101\001\002\000\004\066\ufff7\001\002\000\060\005" +
    "\uff5c\021\uff5c\024\uff5c\050\uff5c\063\uff5c\064\uff5c\065\uff5c" +
    "\066\uff5c\070\uff5c\072\uff5c\074\uff5c\103\uff5c\104\uff5c\105" +
    "\uff5c\106\uff5c\107\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c" +
    "\114\uff5c\126\uff5c\127\uff5c\001\002\000\042\030\042\046" +
    "\035\047\025\067\057\071\045\073\015\075\026\115\075" +
    "\116\040\117\104\120\021\121\010\122\064\123\070\124" +
    "\063\125\056\001\002\000\012\050\uffef\063\uffef\066\uffef" +
    "\127\uffef\001\002\000\014\050\ufff2\066\ufff2\073\355\125" +
    "\356\127\ufff2\001\002\000\010\050\ufff1\066\ufff1\127\ufff1" +
    "\001\002\000\006\064\uffc5\126\uffc5\001\002\000\004\066" +
    "\u0109\001\002\000\076\006\023\007\053\011\017\013\072" +
    "\017\102\022\060\023\050\025\061\030\042\033\031\034" +
    "\105\035\106\036\041\042\012\046\035\047\025\067\057" +
    "\071\045\073\015\075\026\115\075\116\040\117\104\120" +
    "\021\121\010\122\064\123\070\124\063\125\056\126\173" +
    "\001\002\000\120\002\uff9b\006\uff9b\007\uff9b\011\uff9b\013" +
    "\uff9b\014\u010c\015\u010b\017\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\030\uff9b\033\uff9b\034\uff9b\035\uff9b\036" +
    "\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b\046\uff9b\047\uff9b" +
    "\067\uff9b\071\uff9b\073\uff9b\075\uff9b\115\uff9b\116\uff9b\117" +
    "\uff9b\120\uff9b\121\uff9b\122\uff9b\123\uff9b\124\uff9b\125\uff9b" +
    "\126\uff9b\131\uff9b\001\002\000\004\066\u0115\001\002\000" +
    "\042\030\042\046\035\047\025\067\057\071\045\073\015" +
    "\075\026\115\075\116\040\117\104\120\021\121\010\122" +
    "\064\123\070\124\063\125\056\001\002\000\116\002\uff9c" +
    "\006\uff9c\007\uff9c\011\uff9c\013\uff9c\015\u010e\017\uff9c\021" +
    "\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\030\uff9c\033\uff9c" +
    "\034\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\046\uff9c\047\uff9c\067\uff9c\071\uff9c\073\uff9c\075\uff9c" +
    "\115\uff9c\116\uff9c\117\uff9c\120\uff9c\121\uff9c\122\uff9c\123" +
    "\uff9c\124\uff9c\125\uff9c\126\uff9c\131\uff9c\001\002\000\004" +
    "\066\u010f\001\002\000\076\006\023\007\053\011\017\013" +
    "\072\017\102\022\060\023\050\025\061\030\042\033\031" +
    "\034\105\035\106\036\041\042\012\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\126" +
    "\173\001\002\000\114\002\uff99\006\uff99\007\uff99\011\uff99" +
    "\013\uff99\017\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025" +
    "\uff99\030\uff99\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99" +
    "\040\uff99\041\uff99\042\uff99\046\uff99\047\uff99\067\uff99\071" +
    "\uff99\073\uff99\075\uff99\115\uff99\116\uff99\117\uff99\120\uff99" +
    "\121\uff99\122\uff99\123\uff99\124\uff99\125\uff99\126\uff99\131" +
    "\uff99\001\002\000\004\066\u0112\001\002\000\076\006\023" +
    "\007\053\011\017\013\072\017\102\022\060\023\050\025" +
    "\061\030\042\033\031\034\105\035\106\036\041\042\012" +
    "\046\035\047\025\067\057\071\045\073\015\075\026\115" +
    "\075\116\040\117\104\120\021\121\010\122\064\123\070" +
    "\124\063\125\056\126\173\001\002\000\120\002\uff98\006" +
    "\uff98\007\uff98\011\uff98\013\uff98\014\u010c\015\uff98\017\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\030\uff98\033" +
    "\uff98\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98" +
    "\042\uff98\046\uff98\047\uff98\067\uff98\071\uff98\073\uff98\075" +
    "\uff98\115\uff98\116\uff98\117\uff98\120\uff98\121\uff98\122\uff98" +
    "\123\uff98\124\uff98\125\uff98\126\uff98\131\uff98\001\002\000" +
    "\116\002\uff97\006\uff97\007\uff97\011\uff97\013\uff97\015\uff97" +
    "\017\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\030" +
    "\uff97\033\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97" +
    "\041\uff97\042\uff97\046\uff97\047\uff97\067\uff97\071\uff97\073" +
    "\uff97\075\uff97\115\uff97\116\uff97\117\uff97\120\uff97\121\uff97" +
    "\122\uff97\123\uff97\124\uff97\125\uff97\126\uff97\131\uff97\001" +
    "\002\000\076\006\023\007\053\011\017\013\072\017\102" +
    "\022\060\023\050\025\061\030\042\033\031\034\105\035" +
    "\106\036\041\042\012\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\126\173\001\002" +
    "\000\114\002\uff9a\006\uff9a\007\uff9a\011\uff9a\013\uff9a\017" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\030\uff9a" +
    "\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\046\uff9a\047\uff9a\067\uff9a\071\uff9a\073\uff9a" +
    "\075\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\121\uff9a\122" +
    "\uff9a\123\uff9a\124\uff9a\125\uff9a\126\uff9a\131\uff9a\001\002" +
    "\000\042\030\uffd0\046\uffd0\047\uffd0\067\uffd0\071\uffd0\073" +
    "\uffd0\075\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0" +
    "\122\uffd0\123\uffd0\124\uffd0\125\uffd0\001\002\000\042\030" +
    "\uffd5\046\uffd5\047\uffd5\067\uffd5\071\uffd5\073\uffd5\075\uffd5" +
    "\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5\122\uffd5\123" +
    "\uffd5\124\uffd5\125\uffd5\001\002\000\042\030\uffd6\046\uffd6" +
    "\047\uffd6\067\uffd6\071\uffd6\073\uffd6\075\uffd6\115\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6" +
    "\125\uffd6\001\002\000\042\030\uffd3\046\uffd3\047\uffd3\067" +
    "\uffd3\071\uffd3\073\uffd3\075\uffd3\115\uffd3\116\uffd3\117\uffd3" +
    "\120\uffd3\121\uffd3\122\uffd3\123\uffd3\124\uffd3\125\uffd3\001" +
    "\002\000\042\030\uffd8\046\uffd8\047\uffd8\067\uffd8\071\uffd8" +
    "\073\uffd8\075\uffd8\115\uffd8\116\uffd8\117\uffd8\120\uffd8\121" +
    "\uffd8\122\uffd8\123\uffd8\124\uffd8\125\uffd8\001\002\000\042" +
    "\030\uffd7\046\uffd7\047\uffd7\067\uffd7\071\uffd7\073\uffd7\075" +
    "\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7\121\uffd7\122\uffd7" +
    "\123\uffd7\124\uffd7\125\uffd7\001\002\000\042\030\uffd2\046" +
    "\uffd2\047\uffd2\067\uffd2\071\uffd2\073\uffd2\075\uffd2\115\uffd2" +
    "\116\uffd2\117\uffd2\120\uffd2\121\uffd2\122\uffd2\123\uffd2\124" +
    "\uffd2\125\uffd2\001\002\000\042\030\042\046\035\047\025" +
    "\067\057\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\042\030\uffcf\046\uffcf\047\uffcf\067\uffcf\071" +
    "\uffcf\073\uffcf\075\uffcf\115\uffcf\116\uffcf\117\uffcf\120\uffcf" +
    "\121\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf\001\002\000" +
    "\042\030\042\046\035\047\025\067\057\071\045\073\015" +
    "\075\026\115\075\116\040\117\104\120\021\121\010\122" +
    "\064\123\070\124\063\125\056\001\002\000\006\064\uffd9" +
    "\126\uffd9\001\002\000\042\030\uffd1\046\uffd1\047\uffd1\067" +
    "\uffd1\071\uffd1\073\uffd1\075\uffd1\115\uffd1\116\uffd1\117\uffd1" +
    "\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\001" +
    "\002\000\042\030\uffd4\046\uffd4\047\uffd4\067\uffd4\071\uffd4" +
    "\073\uffd4\075\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121" +
    "\uffd4\122\uffd4\123\uffd4\124\uffd4\125\uffd4\001\002\000\006" +
    "\064\uffda\126\uffda\001\002\000\010\064\uff7e\065\u011e\126" +
    "\uff7e\001\002\000\006\064\uff7d\126\uff7d\001\002\000\004" +
    "\026\u0128\001\002\000\042\030\042\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\004\066\u012a\001\002\000\076\006\023\007\053" +
    "\011\017\013\072\017\102\022\060\023\050\025\061\030" +
    "\042\033\031\034\105\035\106\036\041\042\012\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\126\173\001\002\000\116\002\uff94\006\uff94\007" +
    "\uff94\011\uff94\013\uff94\015\u012c\017\uff94\021\uff94\022\uff94" +
    "\023\uff94\024\uff94\025\uff94\030\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\046\uff94" +
    "\047\uff94\067\uff94\071\uff94\073\uff94\075\uff94\115\uff94\116" +
    "\uff94\117\uff94\120\uff94\121\uff94\122\uff94\123\uff94\124\uff94" +
    "\125\uff94\126\uff94\131\uff94\001\002\000\004\066\u012d\001" +
    "\002\000\076\006\023\007\053\011\017\013\072\017\102" +
    "\022\060\023\050\025\061\030\042\033\031\034\105\035" +
    "\106\036\041\042\012\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\126\173\001\002" +
    "\000\114\002\uff93\006\uff93\007\uff93\011\uff93\013\uff93\017" +
    "\uff93\021\uff93\022\uff93\023\uff93\024\uff93\025\uff93\030\uff93" +
    "\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\046\uff93\047\uff93\067\uff93\071\uff93\073\uff93" +
    "\075\uff93\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93\122" +
    "\uff93\123\uff93\124\uff93\125\uff93\126\uff93\131\uff93\001\002" +
    "\000\006\064\uffa5\126\uffa5\001\002\000\132\004\uff72\005" +
    "\uff72\021\uff72\024\uff72\026\uff72\027\uff72\031\uff72\032\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\054" +
    "\uff72\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72" +
    "\063\uff72\064\uff72\065\uff72\066\uff72\067\uff72\070\uff72\072" +
    "\uff72\073\uff72\074\uff72\100\uff72\101\uff72\103\uff72\104\uff72" +
    "\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72\112\uff72\113" +
    "\uff72\114\uff72\126\uff72\127\uff72\001\002\000\004\074\u0137" +
    "\001\002\000\010\021\265\063\264\074\uff62\001\002\000" +
    "\004\074\u0135\001\002\000\004\074\uff63\001\002\000\132" +
    "\004\uff6f\005\uff6f\021\uff6f\024\uff6f\026\uff6f\027\uff6f\031" +
    "\uff6f\032\uff6f\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\052\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f" +
    "\070\uff6f\072\uff6f\073\uff6f\074\uff6f\100\uff6f\101\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\114\uff6f\126\uff6f\127\uff6f\001\002\000" +
    "\004\074\uff64\001\002\000\132\004\uff6e\005\uff6e\021\uff6e" +
    "\024\uff6e\026\uff6e\027\uff6e\031\uff6e\032\uff6e\045\uff6e\046" +
    "\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\054\uff6e\055\uff6e" +
    "\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064" +
    "\uff6e\065\uff6e\066\uff6e\067\uff6e\070\uff6e\072\uff6e\073\uff6e" +
    "\074\uff6e\100\uff6e\101\uff6e\103\uff6e\104\uff6e\105\uff6e\106" +
    "\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e\113\uff6e\114\uff6e" +
    "\126\uff6e\127\uff6e\001\002\000\010\064\uff6a\074\uff6a\126" +
    "\uff6a\001\002\000\004\066\u0140\001\002\000\010\005\u013e" +
    "\063\uff84\066\uff84\001\002\000\006\063\u013c\066\uff86\001" +
    "\002\000\042\030\042\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\001\002\000\004" +
    "\066\uff85\001\002\000\040\046\035\047\025\067\057\071" +
    "\045\073\015\075\026\115\075\116\040\117\104\120\021" +
    "\121\010\122\064\123\070\124\063\125\056\001\002\000" +
    "\006\063\uff83\066\uff83\001\002\000\076\006\023\007\053" +
    "\011\017\013\072\017\102\022\060\023\050\025\061\030" +
    "\042\033\031\034\105\035\106\036\041\042\012\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\126\173\001\002\000\114\002\uff87\006\uff87\007" +
    "\uff87\011\uff87\013\uff87\017\uff87\021\uff87\022\uff87\023\uff87" +
    "\024\uff87\025\uff87\030\uff87\033\uff87\034\uff87\035\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\046\uff87\047\uff87" +
    "\067\uff87\071\uff87\073\uff87\075\uff87\115\uff87\116\uff87\117" +
    "\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\125\uff87" +
    "\126\uff87\131\uff87\001\002\000\124\004\uff77\005\uff77\021" +
    "\uff77\024\uff77\026\uff77\027\uff77\031\uff77\032\uff77\045\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\055\uff77\056" +
    "\uff77\057\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77" +
    "\065\uff77\066\uff77\070\uff77\072\uff77\074\uff77\100\uff77\101" +
    "\uff77\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\110\uff77" +
    "\111\uff77\112\uff77\113\uff77\114\uff77\126\uff77\127\uff77\001" +
    "\002\000\050\030\042\043\u0168\046\035\047\025\066\u0169" +
    "\067\057\070\u0167\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\001\002\000\050\030\042\046\035\047\025\050" +
    "\u014b\067\057\071\045\073\015\074\u0147\075\026\115\075" +
    "\116\040\117\104\120\021\121\010\122\064\123\070\124" +
    "\063\125\056\127\u014a\001\002\000\004\125\u0146\001\002" +
    "\000\124\004\uff56\005\uff56\021\uff56\024\uff56\026\uff56\027" +
    "\uff56\031\uff56\032\uff56\045\uff56\046\uff56\047\uff56\050\uff56" +
    "\051\uff56\052\uff56\055\uff56\056\uff56\057\uff56\060\uff56\061" +
    "\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56\070\uff56" +
    "\072\uff56\074\uff56\100\uff56\101\uff56\103\uff56\104\uff56\105" +
    "\uff56\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56" +
    "\114\uff56\126\uff56\127\uff56\001\002\000\124\004\uff5a\005" +
    "\uff5a\021\uff5a\024\uff5a\026\uff5a\027\uff5a\031\uff5a\032\uff5a" +
    "\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a\052\uff5a\055" +
    "\uff5a\056\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063\uff5a" +
    "\064\uff5a\065\uff5a\066\uff5a\070\uff5a\072\uff5a\074\uff5a\100" +
    "\uff5a\101\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a" +
    "\110\uff5a\111\uff5a\112\uff5a\113\uff5a\114\uff5a\126\uff5a\127" +
    "\uff5a\001\002\000\004\074\u0166\001\002\000\006\063\u0162" +
    "\074\uff45\001\002\000\042\030\042\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\042\030\042\046\035\047\025\067\057\071\045" +
    "\073\015\075\026\115\075\116\040\117\104\120\021\121" +
    "\010\122\064\123\070\124\063\125\056\001\002\000\014" +
    "\021\u014e\063\uff3b\065\u014f\074\uff3b\127\uff3b\001\002\000" +
    "\010\063\uff3a\074\uff3a\127\uff3a\001\002\000\040\046\035" +
    "\047\025\067\057\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\001\002\000\042\030\042\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\010\063\uff39\074\uff39\127\uff39\001\002\000\004" +
    "\026\u0152\001\002\000\042\030\042\046\035\047\025\067" +
    "\057\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\014\021\u014e\024\u0157\063\uff30\074\uff30\127\uff30" +
    "\001\002\000\010\063\uff2f\074\uff2f\127\uff2f\001\002\000" +
    "\010\063\uff32\074\uff32\127\uff32\001\002\000\010\063\uff31" +
    "\074\uff31\127\uff31\001\002\000\042\030\042\046\035\047" +
    "\025\067\057\071\045\073\015\075\026\115\075\116\040" +
    "\117\104\120\021\121\010\122\064\123\070\124\063\125" +
    "\056\001\002\000\014\021\u014e\024\u0157\063\uff2e\074\uff2e" +
    "\127\uff2e\001\002\000\010\063\uff2d\074\uff2d\127\uff2d\001" +
    "\002\000\006\063\u015b\074\uff43\001\002\000\046\030\042" +
    "\046\035\047\025\067\057\071\045\073\015\074\uff3c\075" +
    "\026\115\075\116\040\117\104\120\021\121\010\122\064" +
    "\123\070\124\063\125\056\127\u0160\001\002\000\006\074" +
    "\uff42\127\u015d\001\002\000\042\030\042\046\035\047\025" +
    "\067\057\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\004\074\uff40\001\002\000\010\063\u0162\074" +
    "\uff3e\127\uff3e\001\002\000\042\030\042\046\035\047\025" +
    "\067\057\071\045\073\015\075\026\115\075\116\040\117" +
    "\104\120\021\121\010\122\064\123\070\124\063\125\056" +
    "\001\002\000\004\074\uff41\001\002\000\046\030\042\046" +
    "\035\047\025\067\057\071\045\073\015\074\uff3c\075\026" +
    "\115\075\116\040\117\104\120\021\121\010\122\064\123" +
    "\070\124\063\125\056\127\uff3c\001\002\000\006\074\uff3d" +
    "\127\uff3d\001\002\000\004\074\uff3f\001\002\000\004\074" +
    "\uff44\001\002\000\124\004\uff59\005\uff59\021\uff59\024\uff59" +
    "\026\uff59\027\uff59\031\uff59\032\uff59\045\uff59\046\uff59\047" +
    "\uff59\050\uff59\051\uff59\052\uff59\055\uff59\056\uff59\057\uff59" +
    "\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066" +
    "\uff59\070\uff59\072\uff59\074\uff59\100\uff59\101\uff59\103\uff59" +
    "\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59\112" +
    "\uff59\113\uff59\114\uff59\126\uff59\127\uff59\001\002\000\124" +
    "\004\uff58\005\uff58\021\uff58\024\uff58\026\uff58\027\uff58\031" +
    "\uff58\032\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58" +
    "\052\uff58\055\uff58\056\uff58\057\uff58\060\uff58\061\uff58\062" +
    "\uff58\063\uff58\064\uff58\065\uff58\066\uff58\070\uff58\072\uff58" +
    "\074\uff58\100\uff58\101\uff58\103\uff58\104\uff58\105\uff58\106" +
    "\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58" +
    "\126\uff58\127\uff58\001\002\000\006\063\uff51\070\uff51\001" +
    "\002\000\050\030\042\046\035\047\025\063\uff4f\066\u016f" +
    "\067\057\070\uff4f\071\045\073\015\075\026\115\075\116" +
    "\040\117\104\120\021\121\010\122\064\123\070\124\063" +
    "\125\056\001\002\000\006\063\u0174\070\uff55\001\002\000" +
    "\010\063\uff50\066\u016e\070\uff50\001\002\000\004\070\u016d" +
    "\001\002\000\124\004\uff57\005\uff57\021\uff57\024\uff57\026" +
    "\uff57\027\uff57\031\uff57\032\uff57\045\uff57\046\uff57\047\uff57" +
    "\050\uff57\051\uff57\052\uff57\055\uff57\056\uff57\057\uff57\060" +
    "\uff57\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57" +
    "\070\uff57\072\uff57\074\uff57\100\uff57\101\uff57\103\uff57\104" +
    "\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57" +
    "\113\uff57\114\uff57\126\uff57\127\uff57\001\002\000\050\030" +
    "\042\046\035\047\025\063\uff4e\066\u016f\067\057\070\uff4e" +
    "\071\045\073\015\075\026\115\075\116\040\117\104\120" +
    "\021\121\010\122\064\123\070\124\063\125\056\001\002" +
    "\000\046\030\042\046\035\047\025\063\uff47\067\057\070" +
    "\uff47\071\045\073\015\075\026\115\075\116\040\117\104" +
    "\120\021\121\010\122\064\123\070\124\063\125\056\001" +
    "\002\000\006\063\uff4b\070\uff4b\001\002\000\010\063\uff4d" +
    "\066\u016f\070\uff4d\001\002\000\006\063\uff4c\070\uff4c\001" +
    "\002\000\006\063\uff46\070\uff46\001\002\000\046\030\042" +
    "\043\u0168\046\035\047\025\066\u0169\067\057\071\045\073" +
    "\015\075\026\115\075\116\040\117\104\120\021\121\010" +
    "\122\064\123\070\124\063\125\056\001\002\000\004\070" +
    "\uff54\001\002\000\006\063\u0174\070\uff53\001\002\000\004" +
    "\070\uff52\001\002\000\006\063\uff48\070\uff48\001\002\000" +
    "\010\063\uff4a\066\u016f\070\uff4a\001\002\000\006\063\uff49" +
    "\070\uff49\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0178\000\106\002\061\003\012\004\106\005\053\006" +
    "\042\007\015\010\070\011\050\012\004\013\026\014\027" +
    "\015\064\016\107\020\077\021\102\022\010\023\072\024" +
    "\003\025\013\027\036\033\031\050\033\051\054\072\032" +
    "\073\076\074\051\075\005\076\066\077\075\100\043\101" +
    "\017\102\021\105\100\106\073\001\001\000\004\026\u0141" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\107\020\077\021\102\022\010\023\072\024\003\025\u0139" +
    "\112\u013a\113\u0138\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\107\020\077\021\102\022\010\023\072" +
    "\024\003\025\013\033\u0137\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\u0131\027\u0132\030\u0130\033\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\013\033\u012e" +
    "\001\001\000\014\016\107\020\077\023\164\024\003\034" +
    "\u0126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\u011f\047\u0120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\u0107\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\013\033\u0106\001\001\000\012" +
    "\040\353\041\350\042\345\043\346\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\337\032\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\301\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\107\020\077\021\102\022\010\023\072\024\003\025" +
    "\260\031\257\033\261\001\001\000\006\052\217\057\220" +
    "\001\001\000\010\052\205\053\210\054\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\016\107\020\077\021\102\022\010\023" +
    "\072\024\003\025\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\016\107\020\077\023" +
    "\164\024\003\034\163\001\001\000\004\017\145\001\001" +
    "\000\104\003\132\004\106\005\053\006\042\007\015\010" +
    "\070\011\050\012\004\013\026\014\027\015\064\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\013\027" +
    "\036\033\031\050\033\051\054\072\032\073\076\074\051" +
    "\075\005\076\066\077\075\100\043\101\017\102\021\105" +
    "\100\106\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\107\020\077\024\131\001" +
    "\001\000\002\001\001\000\012\016\107\020\077\023\120" +
    "\024\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\013\033\116\001\001\000\020\016\107\020\077\021" +
    "\102\022\010\023\072\024\003\025\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\107\020\077\021\102\022\010\023\072\024\003\025\112" +
    "\001\001\000\002\001\001\000\020\016\107\020\077\021" +
    "\102\022\010\023\072\024\003\025\114\001\001\000\002" +
    "\001\001\000\022\016\107\020\077\021\102\022\010\023" +
    "\072\024\003\025\013\033\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\122\001\001" +
    "\000\002\001\001\000\020\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\124\001\001\000\002\001\001" +
    "\000\054\005\130\006\042\007\015\010\070\011\050\012" +
    "\004\013\026\014\027\015\064\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\013\027\036\033\031\050" +
    "\033\051\054\105\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\016\107\020\077\021\160\023\072\024" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\016\107\020\077\023\164\024\003\034\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\005\173\006\042" +
    "\007\015\010\070\011\050\012\004\013\026\014\027\015" +
    "\064\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\013\027\036\033\031\050\033\051\054\103\171\105" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\004\176\005\053\006\042\007\015\010" +
    "\070\011\050\012\004\013\026\014\027\015\064\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\013\027" +
    "\036\033\031\050\033\051\054\072\032\073\076\074\051" +
    "\075\005\076\066\077\075\100\043\101\017\102\021\104" +
    "\175\105\100\001\001\000\002\001\001\000\102\004\176" +
    "\005\053\006\042\007\015\010\070\011\050\012\004\013" +
    "\026\014\027\015\064\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\013\027\036\033\031\050\033\051" +
    "\054\072\032\073\076\074\051\075\005\076\066\077\075" +
    "\100\043\101\017\102\021\104\177\105\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\173\006\042\007\015\010\070\011\050\012\004\013" +
    "\026\014\027\015\064\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\013\027\036\033\031\050\033\051" +
    "\054\103\203\105\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\205\053\210\054\212" +
    "\001\001\000\002\001\001\000\004\052\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\241\001\001\000\004\057\222\001" +
    "\001\000\002\001\001\000\004\057\224\001\001\000\002" +
    "\001\001\000\006\055\227\056\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\227\056\235\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\227\056\240\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\227\056\245\001\001\000\002\001\001" +
    "\000\006\055\227\056\246\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\055\227\056\253" +
    "\001\001\000\002\001\001\000\006\055\227\056\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\262\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\013\033" +
    "\276\001\001\000\014\016\107\020\077\023\164\024\003" +
    "\034\265\001\001\000\002\001\001\000\022\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\013\033\267" +
    "\001\001\000\010\035\272\036\270\037\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\107\020\077\021\102\022\010\023\072\024\003\025" +
    "\274\001\001\000\010\035\275\036\270\037\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\303\001\001" +
    "\000\002\001\001\000\056\005\173\006\042\007\015\010" +
    "\070\011\050\012\004\013\026\014\027\015\064\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\013\027" +
    "\036\033\031\050\033\051\054\103\305\105\100\001\001" +
    "\000\006\110\311\111\306\001\001\000\002\001\001\000" +
    "\020\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\317\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\005\173\006\042\007\015\010\070\011\050\012\004" +
    "\013\026\014\027\015\064\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\013\027\036\033\031\050\033" +
    "\051\054\103\313\105\100\001\001\000\006\110\311\111" +
    "\314\001\001\000\002\001\001\000\056\005\173\006\042" +
    "\007\015\010\070\011\050\012\004\013\026\014\027\015" +
    "\064\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\013\027\036\033\031\050\033\051\054\103\316\105" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\016\107\020\077\021\102\022\010\023\072\024\003\025" +
    "\323\001\001\000\020\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\173\006\042\007\015\010\070\011\050\012\004\013" +
    "\026\014\027\015\064\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\013\027\036\033\031\050\033\051" +
    "\054\103\327\105\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\173\006\042\007\015\010\070\011" +
    "\050\012\004\013\026\014\027\015\064\016\107\020\077" +
    "\021\102\022\010\023\072\024\003\025\013\027\036\033" +
    "\031\050\033\051\054\103\332\105\100\001\001\000\002" +
    "\001\001\000\056\005\173\006\042\007\015\010\070\011" +
    "\050\012\004\013\026\014\027\015\064\016\107\020\077" +
    "\021\102\022\010\023\072\024\003\025\013\027\036\033" +
    "\031\050\033\051\054\103\334\105\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\107\020\077\021\102\022\010\023\072" +
    "\024\003\025\341\001\001\000\002\001\001\000\022\016" +
    "\107\020\077\021\102\022\010\023\072\024\003\025\337" +
    "\032\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\016\107\020\077" +
    "\021\102\022\010\023\072\024\003\025\u0101\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\357\044\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\357" +
    "\044\361\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\364\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u0103\001\001" +
    "\000\002\001\001\000\010\041\u0105\042\345\043\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\005\173\006\042\007\015\010\070\011\050\012" +
    "\004\013\026\014\027\015\064\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\013\027\036\033\031\050" +
    "\033\051\054\103\u0109\105\100\001\001\000\004\107\u010c" +
    "\001\001\000\002\001\001\000\020\016\107\020\077\021" +
    "\102\022\010\023\072\024\003\025\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\056\005\173\006\042\007" +
    "\015\010\070\011\050\012\004\013\026\014\027\015\064" +
    "\016\107\020\077\021\102\022\010\023\072\024\003\025" +
    "\013\027\036\033\031\050\033\051\054\103\u010f\105\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\005" +
    "\173\006\042\007\015\010\070\011\050\012\004\013\026" +
    "\014\027\015\064\016\107\020\077\021\102\022\010\023" +
    "\072\024\003\025\013\027\036\033\031\050\033\051\054" +
    "\103\u0112\105\100\001\001\000\004\107\u0113\001\001\000" +
    "\002\001\001\000\056\005\173\006\042\007\015\010\070" +
    "\011\050\012\004\013\026\014\027\015\064\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\013\027\036" +
    "\033\031\050\033\051\054\103\u0115\105\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\013\033\u0124\001\001\000" +
    "\002\001\001\000\022\016\107\020\077\021\102\022\010" +
    "\023\072\024\003\025\013\033\u0123\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\107\020\077\021\102\022\010\023\072" +
    "\024\003\025\013\033\u0128\001\001\000\002\001\001\000" +
    "\056\005\173\006\042\007\015\010\070\011\050\012\004" +
    "\013\026\014\027\015\064\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\013\027\036\033\031\050\033" +
    "\051\054\103\u012a\105\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\005\173\006\042\007\015\010\070" +
    "\011\050\012\004\013\026\014\027\015\064\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\013\027\036" +
    "\033\031\050\033\051\054\103\u012d\105\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u0135\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\u0139\112\u013a\113\u013c\001" +
    "\001\000\002\001\001\000\012\016\107\020\077\023\u013e" +
    "\024\003\001\001\000\002\001\001\000\056\005\173\006" +
    "\042\007\015\010\070\011\050\012\004\013\026\014\027" +
    "\015\064\016\107\020\077\021\102\022\010\023\072\024" +
    "\003\025\013\027\036\033\031\050\033\051\054\103\u0140" +
    "\105\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\u016a\061\u016b\062\u0169\001\001\000\024\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u014b\060\u0147" +
    "\065\u0148\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\066\u0164\001\001" +
    "\000\020\016\107\020\077\021\102\022\010\023\072\024" +
    "\003\025\u0163\001\001\000\020\016\107\020\077\021\102" +
    "\022\010\023\072\024\003\025\u0159\001\001\000\004\067" +
    "\u014c\001\001\000\002\001\001\000\014\016\107\020\077" +
    "\023\164\024\003\034\u0150\001\001\000\020\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u014f\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u0152\001\001" +
    "\000\010\067\u0154\070\u0153\071\u0155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\u0157\001" +
    "\001\000\010\067\u0154\070\u0158\071\u0155\001\001\000\002" +
    "\001\001\000\004\066\u015b\001\001\000\022\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u014b\065\u015e" +
    "\001\001\000\002\001\001\000\020\016\107\020\077\021" +
    "\102\022\010\023\072\024\003\025\u015d\001\001\000\002" +
    "\001\001\000\004\066\u0162\001\001\000\020\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u0160\001\001" +
    "\000\002\001\001\000\022\016\107\020\077\021\102\022" +
    "\010\023\072\024\003\025\u014b\065\u015e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\107" +
    "\020\077\021\102\022\010\023\072\024\003\025\u0178\064" +
    "\u0177\001\001\000\004\063\u0174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\107\020" +
    "\077\021\102\022\010\023\072\024\003\025\u0170\064\u016f" +
    "\001\001\000\020\016\107\020\077\021\102\022\010\023" +
    "\072\024\003\025\u0172\001\001\000\002\001\001\000\004" +
    "\064\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\107\020\077\021\102\022\010\023\072\024\003" +
    "\025\u016a\062\u0175\001\001\000\002\001\001\000\004\063" +
    "\u0176\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\064\u0179\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {



  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // number ::= BIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = b.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // number ::= OCT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = o.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // number ::= HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = h.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // number ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Integer.parseInt(d.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // number ::= LONGINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = li.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // number ::= IMAGNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = i.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // number ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Float.parseFloat(f.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = not;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		int doublestarleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int doublestarright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object doublestar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = doublestar;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // binop ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = or;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // binop ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = and;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // binop ::= NEQ 
            {
              Object RESULT =null;
		int neqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = neq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = eq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = maieq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mag;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mineq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = min;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = rshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = lshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = notin;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = isnot;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = in;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // binop ::= XOR 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = x;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // comp_if ::= IF test comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // comp_if ::= IF test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // comp_for ::= FOR exprlist IN test comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // comp_for ::= FOR exprlist IN test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // comp_iter ::= comp_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // comp_iter ::= comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // list_if ::= IF test list_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if"+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // list_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // list_for ::= FOR exprlist IN testlist list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for"+e.toString()+"in"+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // list_for ::= FOR exprlist IN testlist 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for"+e.toString()+"in"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // list_iter ::= list_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // list_iter ::= list_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // argument ::= test ASSIGN test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString()+assign.toString()+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // argument ::= test comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // argument ::= test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // argument_rec ::= COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // argument_rec ::= COMMA argument argument_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // argument_rec ::= COMMA argument 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // arglist ::= MULT test argument_rec MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // arglist ::= MULT test argument_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // arglist ::= MULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // arglist ::= argument argument_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // arglist ::= argument 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // sliceop ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // sliceop ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // subscript ::= COLON sliceop 
            {
              Object RESULT =null;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // subscript ::= COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // subscript ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // subscript ::= test COLON sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // subscript ::= test COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // subscript ::= test COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // subscript ::= test COLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT=t.toString()+":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // subscript ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // subscript ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // subscript ::= TRIDOT 
            {
              Object RESULT =null;
		RESULT="...";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // subscript_rec ::= COMMA subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // subscript_rec ::= COMMA subscript 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // subscriptlist ::= subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // subscriptlist ::= subscript 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // trailer ::= DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "."+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // trailer ::= LBRACK subscriptlist RBRACK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "[" + s.toString() + "]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // trailer ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT = "[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // trailer ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "("+a.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // lambdef ::= LAMBDA varargslist COLON test 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda "+v.toString()+":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // lambdef ::= LAMBDA COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda:"+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // exprlist ::= expr COMMA exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // exprlist ::= expr COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = e + ",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // exprlist ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // testlist ::= test COMMA testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+","+tl.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // testlist ::= test COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = t.toString()+",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // testlist ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // testlist_comp ::= testlist 
            {
              Object RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tlist = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = tlist;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // testlist_comp ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t+" "+l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // dictorsetmaker ::= test COLON test COMMA dictorsetmaker 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // dictorsetmaker ::= test COLON test COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // dictorsetmaker ::= test COLON test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // listmaker ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // listmaker ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // yield_expr ::= YIELD testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // yield_expr ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="{"+d.toString()+"}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // atom ::= LBRACK listmaker RBRACK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="["+l.toString()+"]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+t.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // atom ::= LPAREN yield_expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+y.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // atom ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		RESULT="{}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // atom ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT="[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // atom ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT="()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // atom ::= unop atom 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = u.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // atom ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // atom ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= atom trailer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a.toString() + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // comparison ::= expr binop comparison 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int binopleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int binopright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object binop = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int comparisonleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int comparisonright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object comparison = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e.toString()+binop.toString()+comparison.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // comparison ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // test ::= lambdef 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // test ::= comparison 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = c;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // assign_recoursive ::= ASSIGN testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int ass_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ass_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ass_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString()+ass_rec.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // assign_recoursive ::= ASSIGN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // stmt_rec ::= stmt stmt_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = simple;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // with_item ::= test AS expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // with_item ::= test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // with_item_recoursive ::= with_item COMMA with_item_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // with_item_recoursive ::= with_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // with_stmt ::= WITH with_item_recoursive COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_stmt",61, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // except_clause_recoursive ::= except_clause COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-9)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // for_stmt ::= FOR exprlist IN testlist COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // else_recoursive ::= ELIF test COLON suite else_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + ":" + s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // compound_stmt ::= decorated 
            {
              Object RESULT =null;
		System.out.println("decorated");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // compound_stmt ::= classdef 
            {
              Object RESULT =null;
		System.out.println("classdef");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		System.out.println("funcdef");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // compound_stmt ::= with_stmt 
            {
              Object RESULT =null;
		System.out.println("with_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		System.out.println("try_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		System.out.println("for_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		System.out.println("while_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("if_stmt"); System.out.println(if_stmt);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // exec_stmt ::= EXEC expr IN test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // exec_stmt ::= EXEC expr IN test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // exec_stmt ::= EXEC expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // name_recoursive ::= NAME COMMA name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+","+nr;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="global"+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n1+"as"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=i+","+is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT= i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+"."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"as"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dotted_as_names ::= dotted_as_name COMMA dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d+","+ds;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from." + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from." + d+" import("+i.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from." + d+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+n+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+n+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d+n+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d + " import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "import " + d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("return_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // flow_stmt ::= yield_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // print_stmt ::= PRINT RSHIFT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print >>" + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print" + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		RESULT = "print";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // augassign ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr_stmt ::= testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString() + a.toString() + t2.toString(); System.out.println("Found testlist");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t; System.out.println("Found testlist");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // small_stmt ::= exec_stmt 
            {
              Object RESULT =null;
		System.out.println("Found exec_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		System.out.println("Found global_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		System.out.println("Found assert_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=i; System.out.println("Found import_stmt: " + i);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		System.out.println("Found flow_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p; System.out.println("Found PASS_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d; System.out.println("Found del_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p; System.out.println("Found print_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =e; System.out.println("Found expr_stmt"); System.out.println(e);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_stmt ::= small_stmt SEMI simple_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+"\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= compound_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= simple_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fplist ::= fpdef COMMA fplist 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f+","+fl;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fplist ::= fpdef COMMA 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = f+",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fplist ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fpdef ::= LPAREN fplist RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+f+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fpdef ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defparameter ::= fpdef ASSIGN test 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=f+"="+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // defparameter ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // defparameter_recoursive ::= defparameter COMMA defparameter_recoursive 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int drleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int drright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+","+dr;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // defparameter_recoursive ::= defparameter COMMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = d+",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // defparameter_recoursive ::= defparameter 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varargslist ::= MULTMULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="**"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n1+",**"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varargslist ::= MULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varargslist ::= defparameter_recoursive MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"*"+n1+",**"+n2; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varargslist ::= defparameter_recoursive MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"**"+n; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varargslist ::= defparameter_recoursive MULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"*"+n; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varargslist ::= defparameter_recoursive 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // newline_or_stmt ::= stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("newline_or_stmt",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // newline_or_stmt ::= NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("newline_or_stmt",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= newline_or_stmt file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= newline_or_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input ::= 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

