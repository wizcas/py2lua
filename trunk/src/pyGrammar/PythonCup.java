
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jan 18 11:37:37 CET 2012
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jan 18 11:37:37 CET 2012
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\115\005" +
    "\000\002\115\007\000\002\115\010\000\002\116\003\000" +
    "\002\116\004\000\002\102\004\000\002\102\004\000\002" +
    "\100\007\000\002\117\004\000\002\117\005\000\002\040" +
    "\003\000\002\040\005\000\002\040\005\000\002\040\010" +
    "\000\002\040\004\000\002\040\007\000\002\040\004\000" +
    "\002\041\003\000\002\041\005\000\002\042\003\000\002" +
    "\042\005\000\002\043\003\000\002\043\005\000\002\044" +
    "\003\000\002\044\005\000\002\004\003\000\002\004\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\006\000\002\106\004\000\002\106\005\000\002" +
    "\105\003\000\002\105\003\000\002\105\003\000\002\105" +
    "\003\000\002\105\003\000\002\105\003\000\002\105\003" +
    "\000\002\105\003\000\002\105\003\000\002\006\003\000" +
    "\002\006\005\000\002\006\004\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\007\003\000" +
    "\002\007\004\000\002\007\005\000\002\010\004\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\050\004\000\002\051\004" +
    "\000\002\051\006\000\002\051\010\000\002\012\004\000" +
    "\002\012\006\000\002\012\010\000\002\012\006\000\002" +
    "\012\007\000\002\012\011\000\002\012\007\000\002\012" +
    "\007\000\002\012\011\000\002\012\007\000\002\054\003" +
    "\000\002\054\005\000\002\053\003\000\002\053\005\000" +
    "\002\052\003\000\002\052\005\000\002\056\003\000\002" +
    "\056\005\000\002\055\003\000\002\055\005\000\002\057" +
    "\003\000\002\057\004\000\002\014\004\000\002\045\003" +
    "\000\002\045\005\000\002\015\004\000\002\015\006\000" +
    "\002\015\010\000\002\013\004\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\073\007\000\002\073\006\000\002\073\011\000" +
    "\002\073\012\000\002\110\006\000\002\110\007\000\002" +
    "\074\006\000\002\074\011\000\002\075\010\000\002\075" +
    "\013\000\002\076\010\000\002\076\006\000\002\076\011" +
    "\000\002\076\011\000\002\076\014\000\002\112\005\000" +
    "\002\112\006\000\002\111\003\000\002\111\004\000\002" +
    "\111\006\000\002\111\006\000\002\077\007\000\002\114" +
    "\004\000\002\114\005\000\002\113\003\000\002\113\005" +
    "\000\002\103\003\000\002\103\006\000\002\104\003\000" +
    "\002\104\004\000\002\047\004\000\002\047\005\000\002" +
    "\025\003\000\002\025\003\000\002\021\003\000\002\021" +
    "\005\000\002\023\003\000\002\023\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\004\000" +
    "\002\024\004\000\002\024\004\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\027\003\000\002\027\004\000\002\031\004" +
    "\000\002\031\003\000\002\032\005\000\002\032\006\000" +
    "\002\032\007\000\002\030\004\000\002\030\003\000\002" +
    "\033\003\000\002\033\004\000\002\033\005\000\002\034" +
    "\003\000\002\034\004\000\002\034\005\000\002\022\005" +
    "\000\002\022\006\000\002\026\004\000\002\026\005\000" +
    "\002\026\004\000\002\026\005\000\002\026\004\000\002" +
    "\061\003\000\002\061\004\000\002\063\004\000\002\063" +
    "\005\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\004\000\002\062\005\000\002\062\006\000" +
    "\002\062\005\000\002\062\004\000\002\062\005\000\002" +
    "\062\004\000\002\064\003\000\002\064\004\000\002\101" +
    "\006\000\002\101\010\000\002\101\011\000\002\060\003" +
    "\000\002\060\004\000\002\060\004\000\002\060\005\000" +
    "\002\060\007\000\002\060\007\000\002\060\004\000\002" +
    "\066\004\000\002\066\005\000\002\066\003\000\002\065" +
    "\003\000\002\065\004\000\002\065\005\000\002\035\003" +
    "\000\002\035\003\000\002\036\006\000\002\036\007\000" +
    "\002\037\004\000\002\037\005\000\002\070\003\000\002" +
    "\070\003\000\002\067\006\000\002\067\007\000\002\071" +
    "\004\000\002\071\005\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\120\002\ufffd\006\100\007\067\010\047\011" +
    "\076\013\036\014\032\020\056\022\062\023\010\024\105" +
    "\025\077\026\073\031\022\034\024\035\072\036\021\037" +
    "\063\040\065\041\057\042\114\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\102\005\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\017" +
    "\130\023\131\107\001\002\000\040\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\004\130\176\001\002\000\004\002\001\001\002" +
    "\000\006\064\uffd5\124\uffd5\001\002\000\006\054\u0182\130" +
    "\176\001\002\000\044\031\022\046\054\047\075\067\026" +
    "\071\011\072\u0178\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\130\023\131\107" +
    "\001\002\000\120\002\ufffd\006\100\007\067\010\047\011" +
    "\076\013\036\014\032\020\056\022\062\023\010\024\105" +
    "\025\077\026\073\031\022\034\024\035\072\036\021\037" +
    "\063\040\065\041\057\042\114\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\102\005\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\017" +
    "\130\023\131\107\001\002\000\140\004\uff00\005\uff00\022" +
    "\uff00\025\uff00\027\uff00\030\uff00\032\uff00\033\uff00\045\uff00" +
    "\046\uff00\047\uff00\050\uff00\051\uff00\052\uff00\053\uff00\054" +
    "\uff00\055\uff00\056\uff00\057\uff00\060\uff00\061\uff00\062\uff00" +
    "\063\uff00\064\uff00\065\uff00\066\uff00\067\uff00\070\uff00\072" +
    "\uff00\073\uff00\074\uff00\076\uff00\077\uff00\100\uff00\101\uff00" +
    "\103\uff00\104\uff00\105\uff00\106\uff00\107\uff00\110\uff00\111" +
    "\uff00\112\uff00\113\uff00\114\uff00\124\uff00\125\uff00\001\002" +
    "\000\132\004\u015e\005\uff71\022\uff71\025\uff71\027\u0164\030" +
    "\u015f\032\u0165\033\u0161\045\u0163\046\u0160\047\u0170\050\u016c" +
    "\051\u016e\052\u015c\053\u0162\055\u016f\056\u0167\057\u0171\060" +
    "\u0168\061\u0172\062\u0173\063\uff71\064\uff71\065\uff71\066\uff71" +
    "\070\uff71\072\uff71\074\uff71\076\u016d\077\u015d\100\u016a\101" +
    "\u0166\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71" +
    "\111\uff71\112\uff71\113\uff71\114\uff71\124\uff71\125\u016b\001" +
    "\002\000\006\064\uffd7\124\uffd7\001\002\000\006\064\uffbe" +
    "\124\uffbe\001\002\000\120\002\ufffd\006\100\007\067\010" +
    "\047\011\076\013\036\014\032\020\056\022\062\023\010" +
    "\024\105\025\077\026\073\031\022\034\024\035\072\036" +
    "\021\037\063\040\065\041\057\042\114\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\102\005\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\124\017\130\023\131\107\001\002\000\122\002\uff94\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\013\uff94\014\uff94\020\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\031\uff94\034" +
    "\uff94\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94" +
    "\043\uff94\046\uff94\047\uff94\067\uff94\071\uff94\073\uff94\075" +
    "\uff94\102\uff94\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94" +
    "\122\uff94\123\uff94\124\uff94\127\uff94\130\uff94\131\uff94\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\014" +
    "\050\u0119\066\u0151\073\u011d\125\u011a\130\u011e\001\002\000" +
    "\140\004\uff6d\005\uff6d\022\uff6d\025\uff6d\027\uff6d\030\uff6d" +
    "\032\uff6d\033\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\051" +
    "\uff6d\052\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d" +
    "\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066" +
    "\uff6d\067\uff6d\070\uff6d\072\uff6d\073\uff6d\074\uff6d\076\uff6d" +
    "\077\uff6d\100\uff6d\101\uff6d\103\uff6d\104\uff6d\105\uff6d\106" +
    "\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\114\uff6d" +
    "\124\uff6d\125\uff6d\001\002\000\006\064\uffd8\124\uffd8\001" +
    "\002\000\140\004\ufeff\005\ufeff\022\ufeff\025\ufeff\027\ufeff" +
    "\030\ufeff\032\ufeff\033\ufeff\045\ufeff\046\ufeff\047\ufeff\050" +
    "\ufeff\051\ufeff\052\ufeff\053\ufeff\054\ufeff\055\ufeff\056\ufeff" +
    "\057\ufeff\060\ufeff\061\ufeff\062\ufeff\063\ufeff\064\ufeff\065" +
    "\ufeff\066\ufeff\067\ufeff\070\ufeff\072\ufeff\073\ufeff\074\ufeff" +
    "\076\ufeff\077\ufeff\100\ufeff\101\ufeff\103\ufeff\104\ufeff\105" +
    "\ufeff\106\ufeff\107\ufeff\110\ufeff\111\ufeff\112\ufeff\113\ufeff" +
    "\114\ufeff\124\ufeff\125\ufeff\001\002\000\044\031\022\046" +
    "\054\047\075\067\026\070\u014b\071\011\073\031\075\035" +
    "\115\060\116\061\117\013\120\025\121\071\122\041\123" +
    "\113\130\023\131\107\001\002\000\006\064\uffda\124\uffda" +
    "\001\002\000\006\064\uffd4\124\uffd4\001\002\000\046\031" +
    "\022\043\034\046\054\047\075\067\026\071\011\073\031" +
    "\074\u0139\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\040" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\130\023\131\107\001\002\000\006\064\uffdb\124\uffdb\001" +
    "\002\000\050\031\022\046\054\047\075\064\uff62\067\026" +
    "\071\011\073\031\074\uff62\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\124\uff62\130\023" +
    "\131\107\001\002\000\040\046\uff05\047\uff05\067\uff05\071" +
    "\uff05\073\uff05\075\uff05\115\uff05\116\uff05\117\uff05\120\uff05" +
    "\121\uff05\122\uff05\123\uff05\130\uff05\131\uff05\001\002\000" +
    "\004\130\u0113\001\002\000\140\004\uff6f\005\uff6f\022\uff6f" +
    "\025\uff6f\027\uff6f\030\uff6f\032\uff6f\033\uff6f\045\uff6f\046" +
    "\uff6f\047\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\335" +
    "\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063" +
    "\uff6f\064\uff6f\065\uff6f\066\uff6f\067\333\070\uff6f\072\uff6f" +
    "\073\334\074\uff6f\076\uff6f\077\uff6f\100\uff6f\101\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\114\uff6f\124\uff6f\125\uff6f\001\002\000" +
    "\122\002\uff95\006\uff95\007\uff95\010\uff95\011\uff95\013\uff95" +
    "\014\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026" +
    "\uff95\031\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95" +
    "\041\uff95\042\uff95\043\uff95\046\uff95\047\uff95\067\uff95\071" +
    "\uff95\073\uff95\075\uff95\102\uff95\115\uff95\116\uff95\117\uff95" +
    "\120\uff95\121\uff95\122\uff95\123\uff95\124\uff95\127\uff95\130" +
    "\uff95\131\uff95\001\002\000\140\004\uff04\005\uff04\022\uff04" +
    "\025\uff04\027\uff04\030\uff04\032\uff04\033\uff04\045\uff04\046" +
    "\uff04\047\uff04\050\uff04\051\uff04\052\uff04\053\uff04\054\uff04" +
    "\055\uff04\056\uff04\057\uff04\060\uff04\061\uff04\062\uff04\063" +
    "\uff04\064\uff04\065\uff04\066\uff04\067\uff04\070\uff04\072\uff04" +
    "\073\uff04\074\uff04\076\uff04\077\uff04\100\uff04\101\uff04\103" +
    "\uff04\104\uff04\105\uff04\106\uff04\107\uff04\110\uff04\111\uff04" +
    "\112\uff04\113\uff04\114\uff04\124\uff04\125\uff04\001\002\000" +
    "\006\064\uffd6\124\uffd6\001\002\000\006\064\uffbf\124\uffbf" +
    "\001\002\000\122\002\uff9a\006\uff9a\007\uff9a\010\uff9a\011" +
    "\uff9a\013\uff9a\014\uff9a\020\uff9a\022\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\031\uff9a\034\uff9a\035\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\046\uff9a\047\uff9a" +
    "\067\uff9a\071\uff9a\073\uff9a\075\uff9a\102\uff9a\115\uff9a\116" +
    "\uff9a\117\uff9a\120\uff9a\121\uff9a\122\uff9a\123\uff9a\124\uff9a" +
    "\127\uff9a\130\uff9a\131\uff9a\001\002\000\122\002\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\013\uff9b\014\uff9b\020\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\031\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\046\uff9b\047\uff9b\067\uff9b\071\uff9b\073\uff9b\075" +
    "\uff9b\102\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b" +
    "\122\uff9b\123\uff9b\124\uff9b\127\uff9b\130\uff9b\131\uff9b\001" +
    "\002\000\004\002\331\001\002\000\004\130\316\001\002" +
    "\000\010\010\ufff9\013\ufff9\102\ufff9\001\002\000\034\064" +
    "\uffd2\065\304\103\302\104\303\105\277\106\300\107\312" +
    "\110\301\111\305\112\311\113\276\114\306\124\uffd2\001" +
    "\002\000\122\002\uff97\006\uff97\007\uff97\010\uff97\011\uff97" +
    "\013\uff97\014\uff97\020\uff97\022\uff97\023\uff97\024\uff97\025" +
    "\uff97\026\uff97\031\uff97\034\uff97\035\uff97\036\uff97\037\uff97" +
    "\040\uff97\041\uff97\042\uff97\043\uff97\046\uff97\047\uff97\067" +
    "\uff97\071\uff97\073\uff97\075\uff97\102\uff97\115\uff97\116\uff97" +
    "\117\uff97\120\uff97\121\uff97\122\uff97\123\uff97\124\uff97\127" +
    "\uff97\130\uff97\131\uff97\001\002\000\060\005\uff73\022\uff73" +
    "\025\uff73\050\uff73\063\uff73\064\uff73\065\uff73\066\uff73\070" +
    "\uff73\072\uff73\074\uff73\103\uff73\104\uff73\105\uff73\106\uff73" +
    "\107\uff73\110\uff73\111\uff73\112\uff73\113\uff73\114\uff73\124" +
    "\uff73\125\uff73\001\002\000\040\046\uff06\047\uff06\067\uff06" +
    "\071\uff06\073\uff06\075\uff06\115\uff06\116\uff06\117\uff06\120" +
    "\uff06\121\uff06\122\uff06\123\uff06\130\uff06\131\uff06\001\002" +
    "\000\122\002\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\031\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\046\uffe2\047\uffe2\067\uffe2" +
    "\071\uffe2\073\uffe2\075\uffe2\102\uffe2\115\uffe2\116\uffe2\117" +
    "\uffe2\120\uffe2\121\uffe2\122\uffe2\123\uffe2\124\uffe2\127\uffe2" +
    "\130\uffe2\131\uffe2\001\002\000\040\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\140" +
    "\004\uff01\005\uff01\022\uff01\025\uff01\027\uff01\030\uff01\032" +
    "\uff01\033\uff01\045\uff01\046\uff01\047\uff01\050\uff01\051\uff01" +
    "\052\uff01\053\uff01\054\uff01\055\uff01\056\uff01\057\uff01\060" +
    "\uff01\061\uff01\062\uff01\063\uff01\064\uff01\065\uff01\066\uff01" +
    "\067\uff01\070\uff01\072\uff01\073\uff01\074\uff01\076\uff01\077" +
    "\uff01\100\uff01\101\uff01\103\uff01\104\uff01\105\uff01\106\uff01" +
    "\107\uff01\110\uff01\111\uff01\112\uff01\113\uff01\114\uff01\124" +
    "\uff01\125\uff01\001\002\000\140\004\uff02\005\uff02\022\uff02" +
    "\025\uff02\027\uff02\030\uff02\032\uff02\033\uff02\045\uff02\046" +
    "\uff02\047\uff02\050\uff02\051\uff02\052\uff02\053\uff02\054\uff02" +
    "\055\uff02\056\uff02\057\uff02\060\uff02\061\uff02\062\uff02\063" +
    "\uff02\064\uff02\065\uff02\066\uff02\067\uff02\070\uff02\072\uff02" +
    "\073\uff02\074\uff02\076\uff02\077\uff02\100\uff02\101\uff02\103" +
    "\uff02\104\uff02\105\uff02\106\uff02\107\uff02\110\uff02\111\uff02" +
    "\112\uff02\113\uff02\114\uff02\124\uff02\125\uff02\001\002\000" +
    "\040\046\054\047\075\067\026\071\011\073\031\075\035" +
    "\115\060\116\061\117\013\120\025\121\071\122\041\123" +
    "\113\130\023\131\107\001\002\000\042\031\022\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\130\023" +
    "\131\107\001\002\000\010\010\047\013\036\102\005\001" +
    "\002\000\004\066\213\001\002\000\050\022\uff59\025\uff59" +
    "\063\211\064\uff59\065\uff59\066\uff59\070\uff59\074\uff59\103" +
    "\uff59\104\uff59\105\uff59\106\uff59\107\uff59\110\uff59\111\uff59" +
    "\112\uff59\113\uff59\114\uff59\124\uff59\001\002\000\006\064" +
    "\uffc1\124\uffc1\001\002\000\006\064\uffd9\124\uffd9\001\002" +
    "\000\140\004\ufefe\005\ufefe\022\ufefe\025\ufefe\027\ufefe\030" +
    "\ufefe\032\ufefe\033\ufefe\045\ufefe\046\ufefe\047\ufefe\050\ufefe" +
    "\051\ufefe\052\ufefe\053\ufefe\054\ufefe\055\ufefe\056\ufefe\057" +
    "\ufefe\060\ufefe\061\ufefe\062\ufefe\063\ufefe\064\ufefe\065\ufefe" +
    "\066\ufefe\067\ufefe\070\ufefe\072\ufefe\073\ufefe\074\ufefe\076" +
    "\ufefe\077\ufefe\100\ufefe\101\ufefe\103\ufefe\104\ufefe\105\ufefe" +
    "\106\ufefe\107\ufefe\110\ufefe\111\ufefe\112\ufefe\113\ufefe\114" +
    "\ufefe\124\ufefe\125\ufefe\001\002\000\050\031\022\046\054" +
    "\047\075\064\uffc5\067\026\071\011\073\031\075\035\101" +
    "\206\115\060\116\061\117\013\120\025\121\071\122\041" +
    "\123\113\124\uffc5\130\023\131\107\001\002\000\004\130" +
    "\176\001\002\000\122\002\uff99\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\013\uff99\014\uff99\020\uff99\022\uff99\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\031\uff99\034\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\046\uff99\047" +
    "\uff99\067\uff99\071\uff99\073\uff99\075\uff99\102\uff99\115\uff99" +
    "\116\uff99\117\uff99\120\uff99\121\uff99\122\uff99\123\uff99\124" +
    "\uff99\127\uff99\130\uff99\131\uff99\001\002\000\040\046\uff07" +
    "\047\uff07\067\uff07\071\uff07\073\uff07\075\uff07\115\uff07\116" +
    "\uff07\117\uff07\120\uff07\121\uff07\122\uff07\123\uff07\130\uff07" +
    "\131\uff07\001\002\000\006\064\uffc0\124\uffc0\001\002\000" +
    "\042\031\022\046\054\047\075\067\026\071\011\073\031" +
    "\075\035\115\060\116\061\117\013\120\025\121\071\122" +
    "\041\123\113\130\023\131\107\001\002\000\042\031\022" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\130\023\131\107\001\002\000\122\002\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\013\uff96\014\uff96\020\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\026\uff96\031\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\046\uff96\047\uff96\067\uff96\071\uff96\073\uff96\075\uff96\102" +
    "\uff96\115\uff96\116\uff96\117\uff96\120\uff96\121\uff96\122\uff96" +
    "\123\uff96\124\uff96\127\uff96\130\uff96\131\uff96\001\002\000" +
    "\006\064\uffbd\124\uffbd\001\002\000\060\005\uff72\022\uff72" +
    "\025\uff72\050\uff72\063\uff72\064\uff72\065\uff72\066\uff72\070" +
    "\uff72\072\uff72\074\uff72\103\uff72\104\uff72\105\uff72\106\uff72" +
    "\107\uff72\110\uff72\111\uff72\112\uff72\113\uff72\114\uff72\124" +
    "\uff72\125\uff72\001\002\000\122\002\uff98\006\uff98\007\uff98" +
    "\010\uff98\011\uff98\013\uff98\014\uff98\020\uff98\022\uff98\023" +
    "\uff98\024\uff98\025\uff98\026\uff98\031\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\046" +
    "\uff98\047\uff98\067\uff98\071\uff98\073\uff98\075\uff98\102\uff98" +
    "\115\uff98\116\uff98\117\uff98\120\uff98\121\uff98\122\uff98\123" +
    "\uff98\124\uff98\127\uff98\130\uff98\131\uff98\001\002\000\004" +
    "\130\150\001\002\000\140\004\uff6c\005\uff6c\022\uff6c\025" +
    "\uff6c\027\uff6c\030\uff6c\032\uff6c\033\uff6c\045\uff6c\046\uff6c" +
    "\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055" +
    "\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c" +
    "\064\uff6c\065\uff6c\066\uff6c\067\uff6c\070\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c\103\uff6c" +
    "\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112" +
    "\uff6c\113\uff6c\114\uff6c\124\uff6c\125\uff6c\001\002\000\140" +
    "\004\uff6b\005\uff6b\022\uff6b\025\uff6b\027\uff6b\030\uff6b\032" +
    "\uff6b\033\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b" +
    "\052\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\060" +
    "\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065\uff6b\066\uff6b" +
    "\067\uff6b\070\uff6b\072\uff6b\073\uff6b\074\uff6b\076\uff6b\077" +
    "\uff6b\100\uff6b\101\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b" +
    "\107\uff6b\110\uff6b\111\uff6b\112\uff6b\113\uff6b\114\uff6b\124" +
    "\uff6b\125\uff6b\001\002\000\006\064\140\124\141\001\002" +
    "\000\122\002\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\031\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040" +
    "\uffe3\041\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\067\uffe3" +
    "\071\uffe3\073\uffe3\075\uffe3\102\uffe3\115\uffe3\116\uffe3\117" +
    "\uffe3\120\uffe3\121\uffe3\122\uffe3\123\uffe3\124\uffe3\127\uffe3" +
    "\130\uffe3\131\uffe3\001\002\000\006\064\uffd3\124\uffd3\001" +
    "\002\000\140\004\uff03\005\uff03\022\uff03\025\uff03\027\uff03" +
    "\030\uff03\032\uff03\033\uff03\045\uff03\046\uff03\047\uff03\050" +
    "\uff03\051\uff03\052\uff03\053\uff03\054\uff03\055\uff03\056\uff03" +
    "\057\uff03\060\uff03\061\uff03\062\uff03\063\uff03\064\uff03\065" +
    "\uff03\066\uff03\067\uff03\070\uff03\072\uff03\073\uff03\074\uff03" +
    "\076\uff03\077\uff03\100\uff03\101\uff03\103\uff03\104\uff03\105" +
    "\uff03\106\uff03\107\uff03\110\uff03\111\uff03\112\uff03\113\uff03" +
    "\114\uff03\124\uff03\125\uff03\001\002\000\042\031\022\046" +
    "\054\047\075\067\026\071\011\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\130" +
    "\023\131\107\001\002\000\010\005\135\063\uff7b\066\uff7b" +
    "\001\002\000\004\063\117\001\002\000\042\031\022\046" +
    "\054\047\075\067\026\071\011\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\130" +
    "\023\131\107\001\002\000\006\063\121\066\122\001\002" +
    "\000\042\031\022\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\130\023\131\107\001\002\000\076\006" +
    "\100\007\067\011\076\014\032\020\056\023\010\024\105" +
    "\026\073\031\022\034\024\035\072\036\021\037\063\043" +
    "\034\046\054\047\075\067\026\071\011\073\031\075\035" +
    "\115\060\116\061\117\013\120\025\121\071\122\041\123" +
    "\113\124\124\130\023\131\107\001\002\000\122\002\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\011\uff7e\013\uff7e\014\uff7e\020" +
    "\uff7e\022\uff7e\023\uff7e\024\uff7e\025\uff7e\026\uff7e\031\uff7e" +
    "\034\uff7e\035\uff7e\036\uff7e\037\uff7e\040\uff7e\041\uff7e\042" +
    "\uff7e\043\uff7e\046\uff7e\047\uff7e\067\uff7e\071\uff7e\073\uff7e" +
    "\075\uff7e\102\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e\121" +
    "\uff7e\122\uff7e\123\uff7e\124\uff7e\127\uff7e\130\uff7e\131\uff7e" +
    "\001\002\000\004\126\126\001\002\000\132\002\uff79\006" +
    "\uff79\007\uff79\010\uff79\011\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\017\uff79\020\uff79\021\uff79\022\uff79\023\uff79\024" +
    "\uff79\025\uff79\026\uff79\031\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\046\uff79\047" +
    "\uff79\067\uff79\071\uff79\073\uff79\075\uff79\102\uff79\115\uff79" +
    "\116\uff79\117\uff79\120\uff79\121\uff79\122\uff79\123\uff79\124" +
    "\uff79\127\uff79\130\uff79\131\uff79\001\002\000\114\006\100" +
    "\007\067\010\047\011\076\013\036\014\032\020\056\022" +
    "\062\023\010\024\105\025\077\026\073\031\022\034\024" +
    "\035\072\036\021\037\063\040\065\041\057\042\114\043" +
    "\034\046\054\047\075\067\026\071\011\073\031\075\035" +
    "\102\005\115\060\116\061\117\013\120\025\121\071\122" +
    "\041\123\113\130\023\131\107\001\002\000\116\006\100" +
    "\007\067\010\047\011\076\013\036\014\032\020\056\022" +
    "\062\023\010\024\105\025\077\026\073\031\022\034\024" +
    "\035\072\036\021\037\063\040\065\041\057\042\114\043" +
    "\034\046\054\047\075\067\026\071\011\073\031\075\035" +
    "\102\005\115\060\116\061\117\013\120\025\121\071\122" +
    "\041\123\113\127\131\130\023\131\107\001\002\000\116" +
    "\006\uff77\007\uff77\010\uff77\011\uff77\013\uff77\014\uff77\020" +
    "\uff77\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\031\uff77" +
    "\034\uff77\035\uff77\036\uff77\037\uff77\040\uff77\041\uff77\042" +
    "\uff77\043\uff77\046\uff77\047\uff77\067\uff77\071\uff77\073\uff77" +
    "\075\uff77\102\uff77\115\uff77\116\uff77\117\uff77\120\uff77\121" +
    "\uff77\122\uff77\123\uff77\127\uff77\130\uff77\131\uff77\001\002" +
    "\000\132\002\uff78\006\uff78\007\uff78\010\uff78\011\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\uff78\023\uff78\024\uff78\025\uff78\026\uff78\031\uff78\034" +
    "\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041\uff78\042\uff78" +
    "\043\uff78\046\uff78\047\uff78\067\uff78\071\uff78\073\uff78\075" +
    "\uff78\102\uff78\115\uff78\116\uff78\117\uff78\120\uff78\121\uff78" +
    "\122\uff78\123\uff78\124\uff78\127\uff78\130\uff78\131\uff78\001" +
    "\002\000\116\006\uff76\007\uff76\010\uff76\011\uff76\013\uff76" +
    "\014\uff76\020\uff76\022\uff76\023\uff76\024\uff76\025\uff76\026" +
    "\uff76\031\uff76\034\uff76\035\uff76\036\uff76\037\uff76\040\uff76" +
    "\041\uff76\042\uff76\043\uff76\046\uff76\047\uff76\067\uff76\071" +
    "\uff76\073\uff76\075\uff76\102\uff76\115\uff76\116\uff76\117\uff76" +
    "\120\uff76\121\uff76\122\uff76\123\uff76\127\uff76\130\uff76\131" +
    "\uff76\001\002\000\006\063\uff7c\066\uff7c\001\002\000\006" +
    "\063\uff7d\066\uff7d\001\002\000\040\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\006\063\uff7a\066\uff7a\001\002\000\006\064\144" +
    "\124\145\001\002\000\076\006\100\007\067\011\076\014" +
    "\032\020\056\023\010\024\105\026\073\031\022\034\024" +
    "\035\072\036\021\037\063\043\034\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\124\142\130\023\131" +
    "\107\001\002\000\132\002\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\031\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\067\uffe1\071\uffe1" +
    "\073\uffe1\075\uffe1\102\uffe1\115\uffe1\116\uffe1\117\uffe1\120" +
    "\uffe1\121\uffe1\122\uffe1\123\uffe1\124\uffe1\127\uffe1\130\uffe1" +
    "\131\uffe1\001\002\000\132\002\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0\040\uffe0" +
    "\041\uffe0\042\uffe0\043\uffe0\046\uffe0\047\uffe0\067\uffe0\071" +
    "\uffe0\073\uffe0\075\uffe0\102\uffe0\115\uffe0\116\uffe0\117\uffe0" +
    "\120\uffe0\121\uffe0\122\uffe0\123\uffe0\124\uffe0\127\uffe0\130" +
    "\uffe0\131\uffe0\001\002\000\006\064\uffdd\124\uffdd\001\002" +
    "\000\076\006\100\007\067\011\076\014\032\020\056\023" +
    "\010\024\105\026\073\031\022\034\024\035\072\036\021" +
    "\037\063\043\034\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\124\146\130\023\131\107\001\002\000" +
    "\132\002\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\013\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\031\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042\uffdf\043" +
    "\uffdf\046\uffdf\047\uffdf\067\uffdf\071\uffdf\073\uffdf\075\uffdf" +
    "\102\uffdf\115\uffdf\116\uffdf\117\uffdf\120\uffdf\121\uffdf\122" +
    "\uffdf\123\uffdf\124\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002" +
    "\000\132\002\uffde\006\uffde\007\uffde\010\uffde\011\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\031\uffde\034" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\043\uffde\046\uffde\047\uffde\067\uffde\071\uffde\073\uffde\075" +
    "\uffde\102\uffde\115\uffde\116\uffde\117\uffde\120\uffde\121\uffde" +
    "\122\uffde\123\uffde\124\uffde\127\uffde\130\uffde\131\uffde\001" +
    "\002\000\006\064\uffdc\124\uffdc\001\002\000\010\063\uffa1" +
    "\064\uffa1\124\uffa1\001\002\000\010\063\152\064\uffa2\124" +
    "\uffa2\001\002\000\004\130\153\001\002\000\010\063\uffa0" +
    "\064\uffa0\124\uffa0\001\002\000\006\064\uff9c\124\uff9c\001" +
    "\002\000\004\066\156\001\002\000\076\006\100\007\067" +
    "\011\076\014\032\020\056\023\010\024\105\026\073\031" +
    "\022\034\024\035\072\036\021\037\063\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\124" +
    "\130\023\131\107\001\002\000\126\002\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\013\uff92\014\uff92\015\161\016\160" +
    "\020\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026\uff92\031" +
    "\uff92\034\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92" +
    "\042\uff92\043\uff92\046\uff92\047\uff92\067\uff92\071\uff92\073" +
    "\uff92\075\uff92\102\uff92\115\uff92\116\uff92\117\uff92\120\uff92" +
    "\121\uff92\122\uff92\123\uff92\124\uff92\127\uff92\130\uff92\131" +
    "\uff92\001\002\000\004\066\172\001\002\000\042\031\022" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\130\023\131\107\001\002\000\124\002\uff93\006\uff93\007" +
    "\uff93\010\uff93\011\uff93\013\uff93\014\uff93\016\163\020\uff93" +
    "\022\uff93\023\uff93\024\uff93\025\uff93\026\uff93\031\uff93\034" +
    "\uff93\035\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\046\uff93\047\uff93\067\uff93\071\uff93\073\uff93\075" +
    "\uff93\102\uff93\115\uff93\116\uff93\117\uff93\120\uff93\121\uff93" +
    "\122\uff93\123\uff93\124\uff93\127\uff93\130\uff93\131\uff93\001" +
    "\002\000\004\066\164\001\002\000\076\006\100\007\067" +
    "\011\076\014\032\020\056\023\010\024\105\026\073\031" +
    "\022\034\024\035\072\036\021\037\063\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\124" +
    "\130\023\131\107\001\002\000\122\002\uff90\006\uff90\007" +
    "\uff90\010\uff90\011\uff90\013\uff90\014\uff90\020\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\026\uff90\031\uff90\034\uff90\035" +
    "\uff90\036\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90" +
    "\046\uff90\047\uff90\067\uff90\071\uff90\073\uff90\075\uff90\102" +
    "\uff90\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122\uff90" +
    "\123\uff90\124\uff90\127\uff90\130\uff90\131\uff90\001\002\000" +
    "\004\066\167\001\002\000\076\006\100\007\067\011\076" +
    "\014\032\020\056\023\010\024\105\026\073\031\022\034" +
    "\024\035\072\036\021\037\063\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\124\124\130\023" +
    "\131\107\001\002\000\126\002\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\011\uff8f\013\uff8f\014\uff8f\015\161\016\uff8f\020\uff8f" +
    "\022\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\031\uff8f\034" +
    "\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\046\uff8f\047\uff8f\067\uff8f\071\uff8f\073\uff8f\075" +
    "\uff8f\102\uff8f\115\uff8f\116\uff8f\117\uff8f\120\uff8f\121\uff8f" +
    "\122\uff8f\123\uff8f\124\uff8f\127\uff8f\130\uff8f\131\uff8f\001" +
    "\002\000\124\002\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e" +
    "\013\uff8e\014\uff8e\016\uff8e\020\uff8e\022\uff8e\023\uff8e\024" +
    "\uff8e\025\uff8e\026\uff8e\031\uff8e\034\uff8e\035\uff8e\036\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\046\uff8e\047" +
    "\uff8e\067\uff8e\071\uff8e\073\uff8e\075\uff8e\102\uff8e\115\uff8e" +
    "\116\uff8e\117\uff8e\120\uff8e\121\uff8e\122\uff8e\123\uff8e\124" +
    "\uff8e\127\uff8e\130\uff8e\131\uff8e\001\002\000\076\006\100" +
    "\007\067\011\076\014\032\020\056\023\010\024\105\026" +
    "\073\031\022\034\024\035\072\036\021\037\063\043\034" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\124\124\130\023\131\107\001\002\000\122\002\uff91\006" +
    "\uff91\007\uff91\010\uff91\011\uff91\013\uff91\014\uff91\020\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\031\uff91\034" +
    "\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\046\uff91\047\uff91\067\uff91\071\uff91\073\uff91\075" +
    "\uff91\102\uff91\115\uff91\116\uff91\117\uff91\120\uff91\121\uff91" +
    "\122\uff91\123\uff91\124\uff91\127\uff91\130\uff91\131\uff91\001" +
    "\002\000\012\005\204\063\uffac\064\uffac\124\uffac\001\002" +
    "\000\010\063\202\064\uffb8\124\uffb8\001\002\000\020\005" +
    "\uffaa\026\uffaa\054\200\063\uffaa\064\uffaa\073\uffaa\124\uffaa" +
    "\001\002\000\010\063\uffae\064\uffae\124\uffae\001\002\000" +
    "\004\130\176\001\002\000\016\005\uffa9\026\uffa9\063\uffa9" +
    "\064\uffa9\073\uffa9\124\uffa9\001\002\000\004\130\176\001" +
    "\002\000\010\063\uffad\064\uffad\124\uffad\001\002\000\004" +
    "\130\205\001\002\000\010\063\uffab\064\uffab\124\uffab\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\006" +
    "\064\uffc4\124\uffc4\001\002\000\006\064\uffc3\124\uffc3\001" +
    "\002\000\106\022\uff58\025\uff58\031\022\046\054\047\075" +
    "\064\uff58\065\uff58\066\uff58\067\026\070\uff58\071\011\073" +
    "\031\074\uff58\075\035\103\uff58\104\uff58\105\uff58\106\uff58" +
    "\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\114\uff58\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\124\uff58\130\023\131\107\001\002\000\046\022\uff57\025" +
    "\uff57\064\uff57\065\uff57\066\uff57\070\uff57\074\uff57\103\uff57" +
    "\104\uff57\105\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112" +
    "\uff57\113\uff57\114\uff57\124\uff57\001\002\000\076\006\100" +
    "\007\067\011\076\014\032\020\056\023\010\024\105\026" +
    "\073\031\022\034\024\035\072\036\021\037\063\043\034" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\124\124\130\023\131\107\001\002\000\006\017\217\021" +
    "\216\001\002\000\126\002\uff88\006\uff88\007\uff88\010\uff88" +
    "\011\uff88\013\uff88\014\uff88\016\234\020\uff88\021\233\022" +
    "\uff88\023\uff88\024\uff88\025\uff88\026\uff88\031\uff88\034\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\046\uff88\047\uff88\067\uff88\071\uff88\073\uff88\075\uff88" +
    "\102\uff88\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122" +
    "\uff88\123\uff88\124\uff88\127\uff88\130\uff88\131\uff88\001\002" +
    "\000\004\066\231\001\002\000\044\031\022\046\054\047" +
    "\075\066\uff82\067\026\071\011\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\130" +
    "\023\131\107\001\002\000\004\066\221\001\002\000\076" +
    "\006\100\007\067\011\076\014\032\020\056\023\010\024" +
    "\105\026\073\031\022\034\024\035\072\036\021\037\063" +
    "\043\034\046\054\047\075\067\026\071\011\073\031\075" +
    "\035\115\060\116\061\117\013\120\025\121\071\122\041" +
    "\123\113\124\124\130\023\131\107\001\002\000\130\002" +
    "\uff84\006\uff84\007\uff84\010\uff84\011\uff84\013\uff84\014\uff84" +
    "\016\uff84\017\217\020\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\025\uff84\026\uff84\031\uff84\034\uff84\035\uff84\036\uff84" +
    "\037\uff84\040\uff84\041\uff84\042\uff84\043\uff84\046\uff84\047" +
    "\uff84\067\uff84\071\uff84\073\uff84\075\uff84\102\uff84\115\uff84" +
    "\116\uff84\117\uff84\120\uff84\121\uff84\122\uff84\123\uff84\124" +
    "\uff84\127\uff84\130\uff84\131\uff84\001\002\000\126\002\uff83" +
    "\006\uff83\007\uff83\010\uff83\011\uff83\013\uff83\014\uff83\016" +
    "\uff83\020\uff83\021\uff83\022\uff83\023\uff83\024\uff83\025\uff83" +
    "\026\uff83\031\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\046\uff83\047\uff83\067\uff83" +
    "\071\uff83\073\uff83\075\uff83\102\uff83\115\uff83\116\uff83\117" +
    "\uff83\120\uff83\121\uff83\122\uff83\123\uff83\124\uff83\127\uff83" +
    "\130\uff83\131\uff83\001\002\000\010\005\226\063\225\066" +
    "\uff81\001\002\000\042\031\022\046\054\047\075\067\026" +
    "\071\011\073\031\075\035\115\060\116\061\117\013\120" +
    "\025\121\071\122\041\123\113\130\023\131\107\001\002" +
    "\000\042\031\022\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\130\023\131\107\001\002\000\004\066" +
    "\uff80\001\002\000\004\066\uff7f\001\002\000\076\006\100" +
    "\007\067\011\076\014\032\020\056\023\010\024\105\026" +
    "\073\031\022\034\024\035\072\036\021\037\063\043\034" +
    "\046\054\047\075\067\026\071\011\073\031\075\035\115" +
    "\060\116\061\117\013\120\025\121\071\122\041\123\113" +
    "\124\124\130\023\131\107\001\002\000\122\002\uff89\006" +
    "\uff89\007\uff89\010\uff89\011\uff89\013\uff89\014\uff89\020\uff89" +
    "\022\uff89\023\uff89\024\uff89\025\uff89\026\uff89\031\uff89\034" +
    "\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\046\uff89\047\uff89\067\uff89\071\uff89\073\uff89\075" +
    "\uff89\102\uff89\115\uff89\116\uff89\117\uff89\120\uff89\121\uff89" +
    "\122\uff89\123\uff89\124\uff89\127\uff89\130\uff89\131\uff89\001" +
    "\002\000\004\066\242\001\002\000\004\066\235\001\002" +
    "\000\076\006\100\007\067\011\076\014\032\020\056\023" +
    "\010\024\105\026\073\031\022\034\024\035\072\036\021" +
    "\037\063\043\034\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\124\124\130\023\131\107\001\002\000" +
    "\124\002\uff87\006\uff87\007\uff87\010\uff87\011\uff87\013\uff87" +
    "\014\uff87\020\uff87\021\237\022\uff87\023\uff87\024\uff87\025" +
    "\uff87\026\uff87\031\uff87\034\uff87\035\uff87\036\uff87\037\uff87" +
    "\040\uff87\041\uff87\042\uff87\043\uff87\046\uff87\047\uff87\067" +
    "\uff87\071\uff87\073\uff87\075\uff87\102\uff87\115\uff87\116\uff87" +
    "\117\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\127" +
    "\uff87\130\uff87\131\uff87\001\002\000\004\066\240\001\002" +
    "\000\076\006\100\007\067\011\076\014\032\020\056\023" +
    "\010\024\105\026\073\031\022\034\024\035\072\036\021" +
    "\037\063\043\034\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\124\124\130\023\131\107\001\002\000" +
    "\122\002\uff85\006\uff85\007\uff85\010\uff85\011\uff85\013\uff85" +
    "\014\uff85\020\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026" +
    "\uff85\031\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85" +
    "\041\uff85\042\uff85\043\uff85\046\uff85\047\uff85\067\uff85\071" +
    "\uff85\073\uff85\075\uff85\102\uff85\115\uff85\116\uff85\117\uff85" +
    "\120\uff85\121\uff85\122\uff85\123\uff85\124\uff85\127\uff85\130" +
    "\uff85\131\uff85\001\002\000\076\006\100\007\067\011\076" +
    "\014\032\020\056\023\010\024\105\026\073\031\022\034" +
    "\024\035\072\036\021\037\063\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\124\124\130\023" +
    "\131\107\001\002\000\122\002\uff86\006\uff86\007\uff86\010" +
    "\uff86\011\uff86\013\uff86\014\uff86\020\uff86\022\uff86\023\uff86" +
    "\024\uff86\025\uff86\026\uff86\031\uff86\034\uff86\035\uff86\036" +
    "\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\046\uff86" +
    "\047\uff86\067\uff86\071\uff86\073\uff86\075\uff86\102\uff86\115" +
    "\uff86\116\uff86\117\uff86\120\uff86\121\uff86\122\uff86\123\uff86" +
    "\124\uff86\127\uff86\130\uff86\131\uff86\001\002\000\010\010" +
    "\ufff8\013\ufff8\102\ufff8\001\002\000\122\002\ufff6\006\ufff6" +
    "\007\ufff6\010\ufff6\011\ufff6\013\ufff6\014\ufff6\020\ufff6\022" +
    "\ufff6\023\ufff6\024\ufff6\025\ufff6\026\ufff6\031\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\046\ufff6\047\ufff6\067\ufff6\071\ufff6\073\ufff6\075\ufff6" +
    "\102\ufff6\115\ufff6\116\ufff6\117\ufff6\120\ufff6\121\ufff6\122" +
    "\ufff6\123\ufff6\124\ufff6\127\ufff6\130\ufff6\131\ufff6\001\002" +
    "\000\122\002\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\013" +
    "\ufff7\014\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7" +
    "\026\ufff7\031\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040" +
    "\ufff7\041\ufff7\042\ufff7\043\ufff7\046\ufff7\047\ufff7\067\ufff7" +
    "\071\ufff7\073\ufff7\075\ufff7\102\ufff7\115\ufff7\116\ufff7\117" +
    "\ufff7\120\ufff7\121\ufff7\122\ufff7\123\ufff7\124\ufff7\127\ufff7" +
    "\130\ufff7\131\ufff7\001\002\000\006\064\uffbc\124\uffbc\001" +
    "\002\000\004\027\254\001\002\000\012\027\uff56\063\252" +
    "\064\uff56\124\uff56\001\002\000\046\027\uff55\046\054\047" +
    "\075\064\uff55\067\026\071\011\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\124" +
    "\uff55\130\023\131\107\001\002\000\010\027\uff54\064\uff54" +
    "\124\uff54\001\002\000\042\031\022\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\004\066\256\001\002\000\076\006\100\007\067" +
    "\011\076\014\032\020\056\023\010\024\105\026\073\031" +
    "\022\034\024\035\072\036\021\037\063\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\124" +
    "\130\023\131\107\001\002\000\124\002\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\013\uff8b\014\uff8b\016\260\020\uff8b" +
    "\022\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\031\uff8b\034" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b" +
    "\043\uff8b\046\uff8b\047\uff8b\067\uff8b\071\uff8b\073\uff8b\075" +
    "\uff8b\102\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b" +
    "\122\uff8b\123\uff8b\124\uff8b\127\uff8b\130\uff8b\131\uff8b\001" +
    "\002\000\004\066\261\001\002\000\076\006\100\007\067" +
    "\011\076\014\032\020\056\023\010\024\105\026\073\031" +
    "\022\034\024\035\072\036\021\037\063\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\124" +
    "\130\023\131\107\001\002\000\122\002\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\011\uff8a\013\uff8a\014\uff8a\020\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\025\uff8a\026\uff8a\031\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a" +
    "\046\uff8a\047\uff8a\067\uff8a\071\uff8a\073\uff8a\075\uff8a\102" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\122\uff8a" +
    "\123\uff8a\124\uff8a\127\uff8a\130\uff8a\131\uff8a\001\002\000" +
    "\004\066\264\001\002\000\076\006\100\007\067\011\076" +
    "\014\032\020\056\023\010\024\105\026\073\031\022\034" +
    "\024\035\072\036\021\037\063\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\124\124\130\023" +
    "\131\107\001\002\000\124\002\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\013\uff8d\014\uff8d\016\266\020\uff8d\022\uff8d" +
    "\023\uff8d\024\uff8d\025\uff8d\026\uff8d\031\uff8d\034\uff8d\035" +
    "\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d" +
    "\046\uff8d\047\uff8d\067\uff8d\071\uff8d\073\uff8d\075\uff8d\102" +
    "\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\122\uff8d" +
    "\123\uff8d\124\uff8d\127\uff8d\130\uff8d\131\uff8d\001\002\000" +
    "\004\066\267\001\002\000\076\006\100\007\067\011\076" +
    "\014\032\020\056\023\010\024\105\026\073\031\022\034" +
    "\024\035\072\036\021\037\063\043\034\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\124\124\130\023" +
    "\131\107\001\002\000\122\002\uff8c\006\uff8c\007\uff8c\010" +
    "\uff8c\011\uff8c\013\uff8c\014\uff8c\020\uff8c\022\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\031\uff8c\034\uff8c\035\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\046\uff8c" +
    "\047\uff8c\067\uff8c\071\uff8c\073\uff8c\075\uff8c\102\uff8c\115" +
    "\uff8c\116\uff8c\117\uff8c\120\uff8c\121\uff8c\122\uff8c\123\uff8c" +
    "\124\uff8c\127\uff8c\130\uff8c\131\uff8c\001\002\000\010\027" +
    "\272\064\uff9f\124\uff9f\001\002\000\042\031\022\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\130\023" +
    "\131\107\001\002\000\010\063\274\064\uff9e\124\uff9e\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\006" +
    "\064\uff9d\124\uff9d\001\002\000\042\031\uffc7\046\uffc7\047" +
    "\uffc7\067\uffc7\071\uffc7\073\uffc7\075\uffc7\115\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\130\uffc7\131" +
    "\uffc7\001\002\000\042\031\uffcd\046\uffcd\047\uffcd\067\uffcd" +
    "\071\uffcd\073\uffcd\075\uffcd\115\uffcd\116\uffcd\117\uffcd\120" +
    "\uffcd\121\uffcd\122\uffcd\123\uffcd\130\uffcd\131\uffcd\001\002" +
    "\000\042\031\uffcc\046\uffcc\047\uffcc\067\uffcc\071\uffcc\073" +
    "\uffcc\075\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121\uffcc" +
    "\122\uffcc\123\uffcc\130\uffcc\131\uffcc\001\002\000\042\031" +
    "\uffca\046\uffca\047\uffca\067\uffca\071\uffca\073\uffca\075\uffca" +
    "\115\uffca\116\uffca\117\uffca\120\uffca\121\uffca\122\uffca\123" +
    "\uffca\130\uffca\131\uffca\001\002\000\042\031\uffcf\046\uffcf" +
    "\047\uffcf\067\uffcf\071\uffcf\073\uffcf\075\uffcf\115\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\130\uffcf" +
    "\131\uffcf\001\002\000\042\031\uffce\046\uffce\047\uffce\067" +
    "\uffce\071\uffce\073\uffce\075\uffce\115\uffce\116\uffce\117\uffce" +
    "\120\uffce\121\uffce\122\uffce\123\uffce\130\uffce\131\uffce\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\042" +
    "\031\uffc9\046\uffc9\047\uffc9\067\uffc9\071\uffc9\073\uffc9\075" +
    "\uffc9\115\uffc9\116\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9" +
    "\123\uffc9\130\uffc9\131\uffc9\001\002\000\042\031\uffc6\046" +
    "\uffc6\047\uffc6\067\uffc6\071\uffc6\073\uffc6\075\uffc6\115\uffc6" +
    "\116\uffc6\117\uffc6\120\uffc6\121\uffc6\122\uffc6\123\uffc6\130" +
    "\uffc6\131\uffc6\001\002\000\042\031\022\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\130\023\131\107" +
    "\001\002\000\006\064\uffd0\124\uffd0\001\002\000\042\031" +
    "\uffc8\046\uffc8\047\uffc8\067\uffc8\071\uffc8\073\uffc8\075\uffc8" +
    "\115\uffc8\116\uffc8\117\uffc8\120\uffc8\121\uffc8\122\uffc8\123" +
    "\uffc8\130\uffc8\131\uffc8\001\002\000\042\031\uffcb\046\uffcb" +
    "\047\uffcb\067\uffcb\071\uffcb\073\uffcb\075\uffcb\115\uffcb\116" +
    "\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\130\uffcb" +
    "\131\uffcb\001\002\000\006\064\uffd1\124\uffd1\001\002\000" +
    "\010\064\uff75\065\304\124\uff75\001\002\000\006\064\uff74" +
    "\124\uff74\001\002\000\006\066\317\073\320\001\002\000" +
    "\076\006\100\007\067\011\076\014\032\020\056\023\010" +
    "\024\105\026\073\031\022\034\024\035\072\036\021\037" +
    "\063\043\034\046\054\047\075\067\026\071\011\073\031" +
    "\075\035\115\060\116\061\117\013\120\025\121\071\122" +
    "\041\123\113\124\124\130\023\131\107\001\002\000\044" +
    "\031\022\046\054\047\075\067\026\071\011\073\031\074" +
    "\321\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\130\023\131\107\001\002\000\004\066" +
    "\326\001\002\000\004\074\323\001\002\000\004\066\324" +
    "\001\002\000\076\006\100\007\067\011\076\014\032\020" +
    "\056\023\010\024\105\026\073\031\022\034\024\035\072" +
    "\036\021\037\063\043\034\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\124\124\130\023\131\107\001" +
    "\002\000\122\002\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a" +
    "\013\uff3a\014\uff3a\020\uff3a\022\uff3a\023\uff3a\024\uff3a\025" +
    "\uff3a\026\uff3a\031\uff3a\034\uff3a\035\uff3a\036\uff3a\037\uff3a" +
    "\040\uff3a\041\uff3a\042\uff3a\043\uff3a\046\uff3a\047\uff3a\067" +
    "\uff3a\071\uff3a\073\uff3a\075\uff3a\102\uff3a\115\uff3a\116\uff3a" +
    "\117\uff3a\120\uff3a\121\uff3a\122\uff3a\123\uff3a\124\uff3a\127" +
    "\uff3a\130\uff3a\131\uff3a\001\002\000\076\006\100\007\067" +
    "\011\076\014\032\020\056\023\010\024\105\026\073\031" +
    "\022\034\024\035\072\036\021\037\063\043\034\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\124\124" +
    "\130\023\131\107\001\002\000\122\002\uff3b\006\uff3b\007" +
    "\uff3b\010\uff3b\011\uff3b\013\uff3b\014\uff3b\020\uff3b\022\uff3b" +
    "\023\uff3b\024\uff3b\025\uff3b\026\uff3b\031\uff3b\034\uff3b\035" +
    "\uff3b\036\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b" +
    "\046\uff3b\047\uff3b\067\uff3b\071\uff3b\073\uff3b\075\uff3b\102" +
    "\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b\122\uff3b" +
    "\123\uff3b\124\uff3b\127\uff3b\130\uff3b\131\uff3b\001\002\000" +
    "\122\002\uff3c\006\uff3c\007\uff3c\010\uff3c\011\uff3c\013\uff3c" +
    "\014\uff3c\020\uff3c\022\uff3c\023\uff3c\024\uff3c\025\uff3c\026" +
    "\uff3c\031\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c" +
    "\041\uff3c\042\uff3c\043\uff3c\046\uff3c\047\uff3c\067\uff3c\071" +
    "\uff3c\073\uff3c\075\uff3c\102\uff3c\115\uff3c\116\uff3c\117\uff3c" +
    "\120\uff3c\121\uff3c\122\uff3c\123\uff3c\124\uff3c\127\uff3c\130" +
    "\uff3c\131\uff3c\001\002\000\004\002\000\001\002\000\132" +
    "\004\uff6e\005\uff6e\022\uff6e\025\uff6e\027\uff6e\030\uff6e\032" +
    "\uff6e\033\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061" +
    "\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066\uff6e\070\uff6e" +
    "\072\uff6e\074\uff6e\076\uff6e\077\uff6e\100\uff6e\101\uff6e\103" +
    "\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e" +
    "\112\uff6e\113\uff6e\114\uff6e\124\uff6e\125\uff6e\001\002\000" +
    "\050\031\022\044\u0100\046\054\047\075\066\u0101\067\026" +
    "\070\377\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\130\023\131\107" +
    "\001\002\000\050\031\022\046\054\047\075\050\343\067" +
    "\026\071\011\073\031\074\337\075\035\115\060\116\061" +
    "\117\013\120\025\121\071\122\041\123\113\125\342\130" +
    "\023\131\107\001\002\000\004\130\336\001\002\000\132" +
    "\004\uff4d\005\uff4d\022\uff4d\025\uff4d\027\uff4d\030\uff4d\032" +
    "\uff4d\033\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d" +
    "\052\uff4d\053\uff4d\055\uff4d\056\uff4d\057\uff4d\060\uff4d\061" +
    "\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066\uff4d\070\uff4d" +
    "\072\uff4d\074\uff4d\076\uff4d\077\uff4d\100\uff4d\101\uff4d\103" +
    "\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d" +
    "\112\uff4d\113\uff4d\114\uff4d\124\uff4d\125\uff4d\001\002\000" +
    "\132\004\uff51\005\uff51\022\uff51\025\uff51\027\uff51\030\uff51" +
    "\032\uff51\033\uff51\045\uff51\046\uff51\047\uff51\050\uff51\051" +
    "\uff51\052\uff51\053\uff51\055\uff51\056\uff51\057\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\070" +
    "\uff51\072\uff51\074\uff51\076\uff51\077\uff51\100\uff51\101\uff51" +
    "\103\uff51\104\uff51\105\uff51\106\uff51\107\uff51\110\uff51\111" +
    "\uff51\112\uff51\113\uff51\114\uff51\124\uff51\125\uff51\001\002" +
    "\000\004\074\376\001\002\000\006\063\372\074\uff39\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\042" +
    "\031\022\046\054\047\075\067\026\071\011\073\031\075" +
    "\035\115\060\116\061\117\013\120\025\121\071\122\041" +
    "\123\113\130\023\131\107\001\002\000\014\022\346\063" +
    "\uff2f\065\347\074\uff2f\125\uff2f\001\002\000\010\063\uff2e" +
    "\074\uff2e\125\uff2e\001\002\000\040\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\010" +
    "\063\uff2d\074\uff2d\125\uff2d\001\002\000\004\027\352\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\014" +
    "\022\346\025\357\063\uff24\074\uff24\125\uff24\001\002\000" +
    "\010\063\uff23\074\uff23\125\uff23\001\002\000\010\063\uff26" +
    "\074\uff26\125\uff26\001\002\000\010\063\uff25\074\uff25\125" +
    "\uff25\001\002\000\042\031\022\046\054\047\075\067\026" +
    "\071\011\073\031\075\035\115\060\116\061\117\013\120" +
    "\025\121\071\122\041\123\113\130\023\131\107\001\002" +
    "\000\014\022\346\025\357\063\uff22\074\uff22\125\uff22\001" +
    "\002\000\010\063\uff21\074\uff21\125\uff21\001\002\000\006" +
    "\063\363\074\uff37\001\002\000\046\031\022\046\054\047" +
    "\075\067\026\071\011\073\031\074\uff30\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\125" +
    "\370\130\023\131\107\001\002\000\006\074\uff36\125\365" +
    "\001\002\000\042\031\022\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\004\074\uff34\001\002\000\010\063\372\074\uff32\125\uff32" +
    "\001\002\000\042\031\022\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\004\074\uff35\001\002\000\046\031\022\046\054\047\075" +
    "\067\026\071\011\073\031\074\uff30\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\125\uff30" +
    "\130\023\131\107\001\002\000\006\074\uff31\125\uff31\001" +
    "\002\000\004\074\uff33\001\002\000\004\074\uff38\001\002" +
    "\000\132\004\uff50\005\uff50\022\uff50\025\uff50\027\uff50\030" +
    "\uff50\032\uff50\033\uff50\045\uff50\046\uff50\047\uff50\050\uff50" +
    "\051\uff50\052\uff50\053\uff50\055\uff50\056\uff50\057\uff50\060" +
    "\uff50\061\uff50\062\uff50\063\uff50\064\uff50\065\uff50\066\uff50" +
    "\070\uff50\072\uff50\074\uff50\076\uff50\077\uff50\100\uff50\101" +
    "\uff50\103\uff50\104\uff50\105\uff50\106\uff50\107\uff50\110\uff50" +
    "\111\uff50\112\uff50\113\uff50\114\uff50\124\uff50\125\uff50\001" +
    "\002\000\132\004\uff4f\005\uff4f\022\uff4f\025\uff4f\027\uff4f" +
    "\030\uff4f\032\uff4f\033\uff4f\045\uff4f\046\uff4f\047\uff4f\050" +
    "\uff4f\051\uff4f\052\uff4f\053\uff4f\055\uff4f\056\uff4f\057\uff4f" +
    "\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065\uff4f\066" +
    "\uff4f\070\uff4f\072\uff4f\074\uff4f\076\uff4f\077\uff4f\100\uff4f" +
    "\101\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110" +
    "\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\124\uff4f\125\uff4f" +
    "\001\002\000\006\063\uff48\070\uff48\001\002\000\050\031" +
    "\022\046\054\047\075\063\uff46\066\u0107\067\026\070\uff46" +
    "\071\011\073\031\075\035\115\060\116\061\117\013\120" +
    "\025\121\071\122\041\123\113\130\023\131\107\001\002" +
    "\000\006\063\u010c\070\uff4c\001\002\000\010\063\uff47\066" +
    "\u0106\070\uff47\001\002\000\004\070\u0105\001\002\000\132" +
    "\004\uff4e\005\uff4e\022\uff4e\025\uff4e\027\uff4e\030\uff4e\032" +
    "\uff4e\033\uff4e\045\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e" +
    "\052\uff4e\053\uff4e\055\uff4e\056\uff4e\057\uff4e\060\uff4e\061" +
    "\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e\070\uff4e" +
    "\072\uff4e\074\uff4e\076\uff4e\077\uff4e\100\uff4e\101\uff4e\103" +
    "\uff4e\104\uff4e\105\uff4e\106\uff4e\107\uff4e\110\uff4e\111\uff4e" +
    "\112\uff4e\113\uff4e\114\uff4e\124\uff4e\125\uff4e\001\002\000" +
    "\050\031\022\046\054\047\075\063\uff45\066\u0107\067\026" +
    "\070\uff45\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\130\023\131\107" +
    "\001\002\000\046\031\022\046\054\047\075\063\uff3e\067" +
    "\026\070\uff3e\071\011\073\031\075\035\115\060\116\061" +
    "\117\013\120\025\121\071\122\041\123\113\130\023\131" +
    "\107\001\002\000\006\063\uff42\070\uff42\001\002\000\010" +
    "\063\uff44\066\u0107\070\uff44\001\002\000\006\063\uff43\070" +
    "\uff43\001\002\000\006\063\uff3d\070\uff3d\001\002\000\046" +
    "\031\022\044\u0100\046\054\047\075\066\u0101\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\004\070\uff4b\001\002\000\006\063\u010c\070\uff4a\001\002" +
    "\000\004\070\uff49\001\002\000\006\063\uff3f\070\uff3f\001" +
    "\002\000\010\063\uff41\066\u0107\070\uff41\001\002\000\006" +
    "\063\uff40\070\uff40\001\002\000\004\073\u0115\001\002\000" +
    "\004\066\u0135\001\002\000\014\050\u0119\073\u011d\074\u011b" +
    "\125\u011a\130\u011e\001\002\000\014\050\uffeb\063\uffeb\066" +
    "\uffeb\074\uffeb\125\uffeb\001\002\000\016\050\uffe9\063\uffe9" +
    "\065\u0133\066\uffe9\074\uffe9\125\uffe9\001\002\000\014\050" +
    "\u012b\063\u012a\066\ufff2\074\ufff2\125\u012c\001\002\000\004" +
    "\130\u0126\001\002\000\004\130\u0125\001\002\000\004\066" +
    "\ufff4\001\002\000\004\074\u0124\001\002\000\006\073\u011d" +
    "\130\u011e\001\002\000\016\050\uffe7\063\uffe7\065\uffe7\066" +
    "\uffe7\074\uffe7\125\uffe7\001\002\000\006\063\u0121\074\u0122" +
    "\001\002\000\006\063\uffe5\074\uffe5\001\002\000\006\073" +
    "\u011d\130\u011e\001\002\000\016\050\uffe6\063\uffe6\065\uffe6" +
    "\066\uffe6\074\uffe6\125\uffe6\001\002\000\006\063\uffe4\074" +
    "\uffe4\001\002\000\004\066\ufff3\001\002\000\006\066\uffec" +
    "\074\uffec\001\002\000\010\063\u0127\066\uffee\074\uffee\001" +
    "\002\000\004\125\u0128\001\002\000\004\130\u0129\001\002" +
    "\000\006\066\uffed\074\uffed\001\002\000\006\073\u011d\130" +
    "\u011e\001\002\000\004\130\u012e\001\002\000\004\130\u012d" +
    "\001\002\000\006\066\ufff0\074\ufff0\001\002\000\010\063" +
    "\u012f\066\ufff1\074\ufff1\001\002\000\004\125\u0130\001\002" +
    "\000\004\130\u0131\001\002\000\006\066\uffef\074\uffef\001" +
    "\002\000\014\050\uffea\063\uffea\066\uffea\074\uffea\125\uffea" +
    "\001\002\000\042\031\022\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\014\050\uffe8\063\uffe8\066\uffe8\074\uffe8\125\uffe8\001\002" +
    "\000\076\006\100\007\067\011\076\014\032\020\056\023" +
    "\010\024\105\026\073\031\022\034\024\035\072\036\021" +
    "\037\063\043\034\046\054\047\075\067\026\071\011\073" +
    "\031\075\035\115\060\116\061\117\013\120\025\121\071" +
    "\122\041\123\113\124\124\130\023\131\107\001\002\000" +
    "\122\002\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\013\ufff5" +
    "\014\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\031\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\046\ufff5\047\ufff5\067\ufff5\071" +
    "\ufff5\073\ufff5\075\ufff5\102\ufff5\115\ufff5\116\ufff5\117\ufff5" +
    "\120\ufff5\121\ufff5\122\ufff5\123\ufff5\124\ufff5\127\ufff5\130" +
    "\ufff5\131\ufff5\001\002\000\010\064\uff61\074\uff61\124\uff61" +
    "\001\002\000\006\064\uffc2\124\uffc2\001\002\000\140\004" +
    "\uff69\005\uff69\022\uff69\025\uff69\027\uff69\030\uff69\032\uff69" +
    "\033\uff69\045\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052" +
    "\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69\067" +
    "\uff69\070\uff69\072\uff69\073\uff69\074\uff69\076\uff69\077\uff69" +
    "\100\uff69\101\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107" +
    "\uff69\110\uff69\111\uff69\112\uff69\113\uff69\114\uff69\124\uff69" +
    "\125\uff69\001\002\000\004\074\u014a\001\002\000\010\022" +
    "\u0140\063\211\074\uff59\001\002\000\004\074\u013e\001\002" +
    "\000\004\074\uff5a\001\002\000\140\004\uff66\005\uff66\022" +
    "\uff66\025\uff66\027\uff66\030\uff66\032\uff66\033\uff66\045\uff66" +
    "\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054" +
    "\uff66\055\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66" +
    "\063\uff66\064\uff66\065\uff66\066\uff66\067\uff66\070\uff66\072" +
    "\uff66\073\uff66\074\uff66\076\uff66\077\uff66\100\uff66\101\uff66" +
    "\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111" +
    "\uff66\112\uff66\113\uff66\114\uff66\124\uff66\125\uff66\001\002" +
    "\000\004\074\uff5b\001\002\000\040\046\054\047\075\067" +
    "\026\071\011\073\031\075\035\115\060\116\061\117\013" +
    "\120\025\121\071\122\041\123\113\130\023\131\107\001" +
    "\002\000\004\027\u0142\001\002\000\042\031\022\046\054" +
    "\047\075\067\026\071\011\073\031\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\130\023" +
    "\131\107\001\002\000\012\022\u0140\025\u0147\070\uff2a\074" +
    "\uff2a\001\002\000\006\070\uff2c\074\uff2c\001\002\000\006" +
    "\070\uff2b\074\uff2b\001\002\000\006\070\uff29\074\uff29\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\012" +
    "\022\u0140\025\u0147\070\uff28\074\uff28\001\002\000\006\070" +
    "\uff27\074\uff27\001\002\000\140\004\uff65\005\uff65\022\uff65" +
    "\025\uff65\027\uff65\030\uff65\032\uff65\033\uff65\045\uff65\046" +
    "\uff65\047\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65" +
    "\055\uff65\056\uff65\057\uff65\060\uff65\061\uff65\062\uff65\063" +
    "\uff65\064\uff65\065\uff65\066\uff65\067\uff65\070\uff65\072\uff65" +
    "\073\uff65\074\uff65\076\uff65\077\uff65\100\uff65\101\uff65\103" +
    "\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65" +
    "\112\uff65\113\uff65\114\uff65\124\uff65\125\uff65\001\002\000" +
    "\140\004\uff68\005\uff68\022\uff68\025\uff68\027\uff68\030\uff68" +
    "\032\uff68\033\uff68\045\uff68\046\uff68\047\uff68\050\uff68\051" +
    "\uff68\052\uff68\053\uff68\054\uff68\055\uff68\056\uff68\057\uff68" +
    "\060\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066" +
    "\uff68\067\uff68\070\uff68\072\uff68\073\uff68\074\uff68\076\uff68" +
    "\077\uff68\100\uff68\101\uff68\103\uff68\104\uff68\105\uff68\106" +
    "\uff68\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\114\uff68" +
    "\124\uff68\125\uff68\001\002\000\004\070\u0150\001\002\000" +
    "\010\022\u0140\063\211\070\uff59\001\002\000\004\070\uff5f" +
    "\001\002\000\004\070\uff60\001\002\000\140\004\uff64\005" +
    "\uff64\022\uff64\025\uff64\027\uff64\030\uff64\032\uff64\033\uff64" +
    "\045\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053" +
    "\uff64\054\uff64\055\uff64\056\uff64\057\uff64\060\uff64\061\uff64" +
    "\062\uff64\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\070" +
    "\uff64\072\uff64\073\uff64\074\uff64\076\uff64\077\uff64\100\uff64" +
    "\101\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\110" +
    "\uff64\111\uff64\112\uff64\113\uff64\114\uff64\124\uff64\125\uff64" +
    "\001\002\000\042\031\022\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\004\066\u0153\001\002\000\042\031\022\046\054\047\075" +
    "\067\026\071\011\073\031\075\035\115\060\116\061\117" +
    "\013\120\025\121\071\122\041\123\113\130\023\131\107" +
    "\001\002\000\060\005\uff52\022\uff52\025\uff52\050\uff52\063" +
    "\uff52\064\uff52\065\uff52\066\uff52\070\uff52\072\uff52\074\uff52" +
    "\103\uff52\104\uff52\105\uff52\106\uff52\107\uff52\110\uff52\111" +
    "\uff52\112\uff52\113\uff52\114\uff52\124\uff52\125\uff52\001\002" +
    "\000\060\005\uff53\022\uff53\025\uff53\050\uff53\063\uff53\064" +
    "\uff53\065\uff53\066\uff53\070\uff53\072\uff53\074\uff53\103\uff53" +
    "\104\uff53\105\uff53\106\uff53\107\uff53\110\uff53\111\uff53\112" +
    "\uff53\113\uff53\114\uff53\124\uff53\125\uff53\001\002\000\010" +
    "\063\u0157\064\uffbb\124\uffbb\001\002\000\042\031\022\046" +
    "\054\047\075\067\026\071\011\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\130" +
    "\023\131\107\001\002\000\010\063\u0159\064\uffba\124\uffba" +
    "\001\002\000\042\031\022\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\006\064\uffb9\124\uffb9\001\002\000\004\002\uffff\001\002" +
    "\000\040\046\uff1b\047\uff1b\067\uff1b\071\uff1b\073\uff1b\075" +
    "\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b\121\uff1b\122\uff1b" +
    "\123\uff1b\130\uff1b\131\uff1b\001\002\000\040\046\uff0a\047" +
    "\uff0a\067\uff0a\071\uff0a\073\uff0a\075\uff0a\115\uff0a\116\uff0a" +
    "\117\uff0a\120\uff0a\121\uff0a\122\uff0a\123\uff0a\130\uff0a\131" +
    "\uff0a\001\002\000\040\046\uff0e\047\uff0e\067\uff0e\071\uff0e" +
    "\073\uff0e\075\uff0e\115\uff0e\116\uff0e\117\uff0e\120\uff0e\121" +
    "\uff0e\122\uff0e\123\uff0e\130\uff0e\131\uff0e\001\002\000\042" +
    "\032\u0176\046\uff1a\047\uff1a\067\uff1a\071\uff1a\073\uff1a\075" +
    "\uff1a\115\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a" +
    "\123\uff1a\130\uff1a\131\uff1a\001\002\000\040\046\uff20\047" +
    "\uff20\067\uff20\071\uff20\073\uff20\075\uff20\115\uff20\116\uff20" +
    "\117\uff20\120\uff20\121\uff20\122\uff20\123\uff20\130\uff20\131" +
    "\uff20\001\002\000\040\046\uff0d\047\uff0d\067\uff0d\071\uff0d" +
    "\073\uff0d\075\uff0d\115\uff0d\116\uff0d\117\uff0d\120\uff0d\121" +
    "\uff0d\122\uff0d\123\uff0d\130\uff0d\131\uff0d\001\002\000\040" +
    "\046\uff1c\047\uff1c\067\uff1c\071\uff1c\073\uff1c\075\uff1c\115" +
    "\uff1c\116\uff1c\117\uff1c\120\uff1c\121\uff1c\122\uff1c\123\uff1c" +
    "\130\uff1c\131\uff1c\001\002\000\040\046\uff08\047\uff08\067" +
    "\uff08\071\uff08\073\uff08\075\uff08\115\uff08\116\uff08\117\uff08" +
    "\120\uff08\121\uff08\122\uff08\123\uff08\130\uff08\131\uff08\001" +
    "\002\000\040\046\uff19\047\uff19\067\uff19\071\uff19\073\uff19" +
    "\075\uff19\115\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122" +
    "\uff19\123\uff19\130\uff19\131\uff19\001\002\000\042\027\u0175" +
    "\046\uff0b\047\uff0b\067\uff0b\071\uff0b\073\uff0b\075\uff0b\115" +
    "\uff0b\116\uff0b\117\uff0b\120\uff0b\121\uff0b\122\uff0b\123\uff0b" +
    "\130\uff0b\131\uff0b\001\002\000\040\046\uff15\047\uff15\067" +
    "\uff15\071\uff15\073\uff15\075\uff15\115\uff15\116\uff15\117\uff15" +
    "\120\uff15\121\uff15\122\uff15\123\uff15\130\uff15\131\uff15\001" +
    "\002\000\040\046\uff13\047\uff13\067\uff13\071\uff13\073\uff13" +
    "\075\uff13\115\uff13\116\uff13\117\uff13\120\uff13\121\uff13\122" +
    "\uff13\123\uff13\130\uff13\131\uff13\001\002\000\040\046\uff11" +
    "\047\uff11\067\uff11\071\uff11\073\uff11\075\uff11\115\uff11\116" +
    "\uff11\117\uff11\120\uff11\121\uff11\122\uff11\123\uff11\130\uff11" +
    "\131\uff11\001\002\000\040\046\054\047\075\067\026\071" +
    "\011\073\031\075\035\115\060\116\061\117\013\120\025" +
    "\121\071\122\041\123\113\130\023\131\107\001\002\000" +
    "\040\046\uff16\047\uff16\067\uff16\071\uff16\073\uff16\075\uff16" +
    "\115\uff16\116\uff16\117\uff16\120\uff16\121\uff16\122\uff16\123" +
    "\uff16\130\uff16\131\uff16\001\002\000\040\046\uff0c\047\uff0c" +
    "\067\uff0c\071\uff0c\073\uff0c\075\uff0c\115\uff0c\116\uff0c\117" +
    "\uff0c\120\uff0c\121\uff0c\122\uff0c\123\uff0c\130\uff0c\131\uff0c" +
    "\001\002\000\040\046\uff1e\047\uff1e\067\uff1e\071\uff1e\073" +
    "\uff1e\075\uff1e\115\uff1e\116\uff1e\117\uff1e\120\uff1e\121\uff1e" +
    "\122\uff1e\123\uff1e\130\uff1e\131\uff1e\001\002\000\040\046" +
    "\uff09\047\uff09\067\uff09\071\uff09\073\uff09\075\uff09\115\uff09" +
    "\116\uff09\117\uff09\120\uff09\121\uff09\122\uff09\123\uff09\130" +
    "\uff09\131\uff09\001\002\000\040\046\uff1d\047\uff1d\067\uff1d" +
    "\071\uff1d\073\uff1d\075\uff1d\115\uff1d\116\uff1d\117\uff1d\120" +
    "\uff1d\121\uff1d\122\uff1d\123\uff1d\130\uff1d\131\uff1d\001\002" +
    "\000\040\046\uff14\047\uff14\067\uff14\071\uff14\073\uff14\075" +
    "\uff14\115\uff14\116\uff14\117\uff14\120\uff14\121\uff14\122\uff14" +
    "\123\uff14\130\uff14\131\uff14\001\002\000\040\046\uff1f\047" +
    "\uff1f\067\uff1f\071\uff1f\073\uff1f\075\uff1f\115\uff1f\116\uff1f" +
    "\117\uff1f\120\uff1f\121\uff1f\122\uff1f\123\uff1f\130\uff1f\131" +
    "\uff1f\001\002\000\040\046\uff12\047\uff12\067\uff12\071\uff12" +
    "\073\uff12\075\uff12\115\uff12\116\uff12\117\uff12\120\uff12\121" +
    "\uff12\122\uff12\123\uff12\130\uff12\131\uff12\001\002\000\040" +
    "\046\uff10\047\uff10\067\uff10\071\uff10\073\uff10\075\uff10\115" +
    "\uff10\116\uff10\117\uff10\120\uff10\121\uff10\122\uff10\123\uff10" +
    "\130\uff10\131\uff10\001\002\000\040\046\uff0f\047\uff0f\067" +
    "\uff0f\071\uff0f\073\uff0f\075\uff0f\115\uff0f\116\uff0f\117\uff0f" +
    "\120\uff0f\121\uff0f\122\uff0f\123\uff0f\130\uff0f\131\uff0f\001" +
    "\002\000\060\005\uff70\022\uff70\025\uff70\050\uff70\063\uff70" +
    "\064\uff70\065\uff70\066\uff70\070\uff70\072\uff70\074\uff70\103" +
    "\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111\uff70" +
    "\112\uff70\113\uff70\114\uff70\124\uff70\125\uff70\001\002\000" +
    "\040\046\uff17\047\uff17\067\uff17\071\uff17\073\uff17\075\uff17" +
    "\115\uff17\116\uff17\117\uff17\120\uff17\121\uff17\122\uff17\123" +
    "\uff17\130\uff17\131\uff17\001\002\000\040\046\uff18\047\uff18" +
    "\067\uff18\071\uff18\073\uff18\075\uff18\115\uff18\116\uff18\117" +
    "\uff18\120\uff18\121\uff18\122\uff18\123\uff18\130\uff18\131\uff18" +
    "\001\002\000\004\002\ufffe\001\002\000\140\004\uff67\005" +
    "\uff67\022\uff67\025\uff67\027\uff67\030\uff67\032\uff67\033\uff67" +
    "\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67\053" +
    "\uff67\054\uff67\055\uff67\056\uff67\057\uff67\060\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\067\uff67\070" +
    "\uff67\072\uff67\073\uff67\074\uff67\076\uff67\077\uff67\100\uff67" +
    "\101\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107\uff67\110" +
    "\uff67\111\uff67\112\uff67\113\uff67\114\uff67\124\uff67\125\uff67" +
    "\001\002\000\004\072\u017f\001\002\000\004\066\u017b\001" +
    "\002\000\042\031\022\046\054\047\075\067\026\071\011" +
    "\073\031\075\035\115\060\116\061\117\013\120\025\121" +
    "\071\122\041\123\113\130\023\131\107\001\002\000\006" +
    "\063\u017d\072\uff5e\001\002\000\044\031\022\046\054\047" +
    "\075\067\026\071\011\072\uff5d\073\031\075\035\115\060" +
    "\116\061\117\013\120\025\121\071\122\041\123\113\130" +
    "\023\131\107\001\002\000\004\072\uff5c\001\002\000\140" +
    "\004\uff63\005\uff63\022\uff63\025\uff63\027\uff63\030\uff63\032" +
    "\uff63\033\uff63\045\uff63\046\uff63\047\uff63\050\uff63\051\uff63" +
    "\052\uff63\053\uff63\054\uff63\055\uff63\056\uff63\057\uff63\060" +
    "\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63\066\uff63" +
    "\067\uff63\070\uff63\072\uff63\073\uff63\074\uff63\076\uff63\077" +
    "\uff63\100\uff63\101\uff63\103\uff63\104\uff63\105\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\112\uff63\113\uff63\114\uff63\124" +
    "\uff63\125\uff63\001\002\000\004\026\u0199\001\002\000\004" +
    "\130\176\001\002\000\006\054\u0184\130\uffa4\001\002\000" +
    "\006\026\u0186\130\uffa3\001\002\000\010\026\uffa4\054\u0184" +
    "\130\uffa4\001\002\000\006\026\uffa3\130\uffa3\001\002\000" +
    "\010\050\u0187\073\u018a\130\u0189\001\002\000\006\064\uffb1" +
    "\124\uffb1\001\002\000\012\063\u0190\064\uffa8\074\uffa8\124" +
    "\uffa8\001\002\000\014\005\u018e\063\uffa6\064\uffa6\074\uffa6" +
    "\124\uffa6\001\002\000\004\130\u0189\001\002\000\006\064" +
    "\uffaf\124\uffaf\001\002\000\004\074\u018d\001\002\000\006" +
    "\064\uffb0\124\uffb0\001\002\000\004\130\u018f\001\002\000" +
    "\012\063\uffa5\064\uffa5\074\uffa5\124\uffa5\001\002\000\004" +
    "\130\u0189\001\002\000\010\064\uffa7\074\uffa7\124\uffa7\001" +
    "\002\000\004\026\u0193\001\002\000\010\050\u0194\073\u0195" +
    "\130\u0189\001\002\000\006\064\uffb4\124\uffb4\001\002\000" +
    "\004\130\u0189\001\002\000\006\064\uffb2\124\uffb2\001\002" +
    "\000\004\074\u0198\001\002\000\006\064\uffb3\124\uffb3\001" +
    "\002\000\010\050\u019a\073\u019b\130\u0189\001\002\000\006" +
    "\064\uffb7\124\uffb7\001\002\000\004\130\u0189\001\002\000" +
    "\006\064\uffb5\124\uffb5\001\002\000\004\074\u019e\001\002" +
    "\000\006\064\uffb6\124\uffb6\001\002\000\006\073\u01a0\124" +
    "\u01a1\001\002\000\050\031\022\046\054\047\075\050\343" +
    "\067\026\071\011\073\031\074\u01a3\075\035\115\060\116" +
    "\061\117\013\120\025\121\071\122\041\123\113\125\342" +
    "\130\023\131\107\001\002\000\010\010\ufffc\013\ufffc\102" +
    "\ufffc\001\002\000\004\074\u01a5\001\002\000\004\124\u01a4" +
    "\001\002\000\010\010\ufffb\013\ufffb\102\ufffb\001\002\000" +
    "\004\124\u01a6\001\002\000\010\010\ufffa\013\ufffa\102\ufffa" +
    "\001\002\000\140\004\uff6a\005\uff6a\022\uff6a\025\uff6a\027" +
    "\uff6a\030\uff6a\032\uff6a\033\uff6a\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056" +
    "\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a" +
    "\065\uff6a\066\uff6a\067\uff6a\070\uff6a\072\uff6a\073\uff6a\074" +
    "\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\103\uff6a\104\uff6a" +
    "\105\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113" +
    "\uff6a\114\uff6a\124\uff6a\125\uff6a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a5\000\110\002\045\003\005\004\011\005\110\006" +
    "\032\007\026\010\067\011\014\012\041\013\006\014\027" +
    "\015\111\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\065\027\101\033\050\050\042\051\015\072\054" +
    "\073\044\074\043\075\073\076\103\077\051\100\100\101" +
    "\037\102\017\105\107\115\047\116\063\001\001\000\010" +
    "\016\105\020\003\024\u01a6\001\001\000\004\052\u019e\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\052\u017f" +
    "\057\u0180\001\001\000\022\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\u0179\032\u0178\001\001\000\106" +
    "\003\u0176\004\011\005\110\006\032\007\026\010\067\011" +
    "\014\012\041\013\006\014\027\015\111\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\065\027\101\033" +
    "\050\050\042\051\015\072\054\073\044\074\043\075\073" +
    "\076\103\077\051\100\100\101\037\102\017\105\107\115" +
    "\047\116\063\001\001\000\002\001\001\000\004\017\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\106\003" +
    "\u015a\004\011\005\110\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\072\054\073\044\074\043\075\073\076" +
    "\103\077\051\100\100\101\037\102\017\105\107\115\047" +
    "\116\063\001\001\000\002\001\001\000\020\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\u0155\001\001" +
    "\000\012\040\u0151\041\u0117\042\u0115\043\u0116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\u014c\031\u014b\033\u014d\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\u013a\027\u013b\030\u0139\033\u013c\001\001" +
    "\000\014\016\105\020\003\023\250\024\036\034\u0137\001" +
    "\001\000\002\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\u0136\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\306\047\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\105\020" +
    "\003\023\270\024\036\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\262\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\105\020\003" +
    "\023\250\024\036\034\247\001\001\000\022\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\065\033\246" +
    "\001\001\000\010\100\244\101\245\115\243\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\033\206\001\001" +
    "\000\010\052\173\053\176\054\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\154\001" +
    "\001\000\022\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\033\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\106\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\114\113\115\001\001\000\002" +
    "\001\001\000\004\114\117\001\001\000\022\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\114\113\133" +
    "\001\001\000\002\001\001\000\022\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\114\113\132\001\001" +
    "\000\056\005\124\006\032\007\026\010\067\011\014\012" +
    "\041\013\006\014\027\015\111\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\027\101\033\050\050" +
    "\042\051\015\103\122\105\107\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\106\004\127\005" +
    "\110\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\072\054\073\044\074\043\075\073\076\103\077\051\100" +
    "\100\101\037\102\017\104\126\105\107\115\047\116\063" +
    "\001\001\000\104\004\131\005\110\006\032\007\026\010" +
    "\067\011\014\012\041\013\006\014\027\015\111\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\065\027" +
    "\101\033\050\050\042\051\015\072\054\073\044\074\043" +
    "\075\073\076\103\077\051\100\100\101\037\102\017\105" +
    "\107\115\047\116\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\105\020\003\023\135\024\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\006\032\007" +
    "\026\010\067\011\014\012\041\013\006\014\027\015\111" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\027\101\033\050\050\042\051\015\105\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\105\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\005\124\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\103\156\105\107\001\001\000\004\110" +
    "\161\001\001\000\002\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\005\124\006\032" +
    "\007\026\010\067\011\014\012\041\013\006\014\027\015" +
    "\111\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\027\101\033\050\050\042\051\015\103\164\105" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\124\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\167\105\107\001\001\000\004\110\170\001\001" +
    "\000\002\001\001\000\056\005\124\006\032\007\026\010" +
    "\067\011\014\012\041\013\006\014\027\015\111\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\065\027" +
    "\101\033\050\050\042\051\015\103\172\105\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\200\001\001" +
    "\000\002\001\001\000\006\052\173\053\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\033\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\065\033\211\001\001\000\002\001\001\000\056" +
    "\005\124\006\032\007\026\010\067\011\014\012\041\013" +
    "\006\014\027\015\111\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\027\101\033\050\050\042\051" +
    "\015\103\213\105\107\001\001\000\006\111\217\112\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\223" +
    "\001\001\000\002\001\001\000\056\005\124\006\032\007" +
    "\026\010\067\011\014\012\041\013\006\014\027\015\111" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\065\027\101\033\050\050\042\051\015\103\221\105\107" +
    "\001\001\000\006\111\217\112\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\227\001\001\000\020\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\005" +
    "\124\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\103\231\105\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\124\006\032\007\026" +
    "\010\067\011\014\012\041\013\006\014\027\015\111\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\065" +
    "\027\101\033\050\050\042\051\015\103\235\105\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\124" +
    "\006\032\007\026\010\067\011\014\012\041\013\006\014" +
    "\027\015\111\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\027\101\033\050\050\042\051\015\103" +
    "\240\105\107\001\001\000\002\001\001\000\056\005\124" +
    "\006\032\007\026\010\067\011\014\012\041\013\006\014" +
    "\027\015\111\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\027\101\033\050\050\042\051\015\103" +
    "\242\105\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\105\020\003" +
    "\023\250\024\036\034\252\001\001\000\002\001\001\000" +
    "\022\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\033\254\001\001\000\002\001\001\000\056\005" +
    "\124\006\032\007\026\010\067\011\014\012\041\013\006" +
    "\014\027\015\111\016\105\020\003\021\052\022\102\023" +
    "\013\024\036\025\065\027\101\033\050\050\042\051\015" +
    "\103\256\105\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\005\124\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\103\261\105\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\124\006\032\007\026" +
    "\010\067\011\014\012\041\013\006\014\027\015\111\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\065" +
    "\027\101\033\050\050\042\051\015\103\264\105\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\124" +
    "\006\032\007\026\010\067\011\014\012\041\013\006\014" +
    "\027\015\111\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\065\027\101\033\050\050\042\051\015\103" +
    "\267\105\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\272\001\001\000\002\001\001\000\020\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\105\020\003\021\052\022\102" +
    "\023\013\024\036\025\065\033\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\312\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\056\005\124\006\032\007\026\010\067" +
    "\011\014\012\041\013\006\014\027\015\111\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\065\027\101" +
    "\033\050\050\042\051\015\103\327\105\107\001\001\000" +
    "\022\016\105\020\003\021\052\022\102\023\013\024\036" +
    "\025\065\033\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\124\006\032\007\026" +
    "\010\067\011\014\012\041\013\006\014\027\015\111\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\065" +
    "\027\101\033\050\050\042\051\015\103\324\105\107\001" +
    "\001\000\002\001\001\000\056\005\124\006\032\007\026" +
    "\010\067\011\014\012\041\013\006\014\027\015\111\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\065" +
    "\027\101\033\050\050\042\051\015\103\326\105\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\u0102\061\u0103\062\u0101\001\001" +
    "\000\024\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\343\060\337\065\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\066\374\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\373\001\001\000\020\016" +
    "\105\020\003\021\052\022\102\023\013\024\036\025\361" +
    "\001\001\000\004\067\344\001\001\000\002\001\001\000" +
    "\014\016\105\020\003\023\250\024\036\034\350\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\352\001\001\000\010\067\354\070\353\071\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\357\001\001\000\010\067\354\070\360\071" +
    "\355\001\001\000\002\001\001\000\004\066\363\001\001" +
    "\000\022\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\343\065\366\001\001\000\002\001\001\000\020" +
    "\016\105\020\003\021\052\022\102\023\013\024\036\025" +
    "\365\001\001\000\002\001\001\000\004\066\372\001\001" +
    "\000\020\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\370\001\001\000\002\001\001\000\022\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\343\065" +
    "\366\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\u0110\064\u010f\001\001\000\004\063\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\105\020\003\021\052\022\102\023\013\024" +
    "\036\025\u0108\064\u0107\001\001\000\020\016\105\020\003" +
    "\021\052\022\102\023\013\024\036\025\u010a\001\001\000" +
    "\002\001\001\000\004\064\u0109\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\105\020\003\021\052\022" +
    "\102\023\013\024\036\025\u0102\062\u010d\001\001\000\002" +
    "\001\001\000\004\063\u010e\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\u0111\001\001\000\002\001\001" +
    "\000\004\117\u0113\001\001\000\002\001\001\000\012\040" +
    "\u011b\041\u0117\042\u0115\043\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\043\u011f\044\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\043\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\u0131\043\u0116\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\u0133\001\001\000\002\001" +
    "\001\000\056\005\124\006\032\007\026\010\067\011\014" +
    "\012\041\013\006\014\027\015\111\016\105\020\003\021" +
    "\052\022\102\023\013\024\036\025\065\027\101\033\050" +
    "\050\042\051\015\103\u0135\105\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\016\105\020\003\023\250\024\036\034\u0140\001" +
    "\001\000\002\001\001\000\022\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\065\033\u0142\001\001\000" +
    "\010\035\u0145\036\u0143\037\u0144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\016\105\020" +
    "\003\021\052\022\102\023\013\024\036\025\u0147\001\001" +
    "\000\010\035\u0148\036\u0143\037\u0144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\u014e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\u0154\001\001\000\002\001" +
    "\001\000\020\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\u0153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\u0157\001\001\000\002\001" +
    "\001\000\020\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\u0159\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\016\105\020\003\021\u0173\023\013\024\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\016\105\020\003\021\052" +
    "\022\102\023\013\024\036\025\u017b\001\001\000\002\001" +
    "\001\000\022\016\105\020\003\021\052\022\102\023\013" +
    "\024\036\025\u0179\032\u017d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\u0191\001\001" +
    "\000\004\057\u0182\001\001\000\002\001\001\000\004\057" +
    "\u0184\001\001\000\002\001\001\000\006\055\u0187\056\u018a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\055\u0187\056\u018b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\055\u0187\056\u0190\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\055\u0187\056\u0195\001" +
    "\001\000\002\001\001\000\006\055\u0187\056\u0196\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\055\u0187\056\u019b\001\001\000\002\001\001\000\006" +
    "\055\u0187\056\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\016\105" +
    "\020\003\021\052\022\102\023\013\024\036\025\343\060" +
    "\u01a1\065\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    outputBuffer = new StringBuffer();
    counter = 0;

    }


 // Represent the number of the first usable label 
    public int label = 0;

    // It can be "stdout" to write output program to standard
    // output or "file" to dump program in a file.
    public static String dumpOutput;

    // It's true if the semantic check is enabled
    public boolean enableSem = true;
    
    // String buffer used to store output program
    public StringBuffer outputBuffer;
    
     // counter used to count indentation level
    public int counter;

    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {


	// Disable semantic check
    private void disableSem(){
        parser.enableSem = false;
    }
    // Return true if semantic is enabled, false otherwise
    private boolean sem(){
        return parser.enableSem;
    }
	// Error management
    private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        /* Quando c'e' un errore sintattico continuo il parsing ma disabilito la semantica */
        disableSem();
    }
        
    // Write a string in output
    private void dump(String s){
        parser.outputBuffer.append(s);
    }
    private void dumpln(String s){
        parser.outputBuffer.append(s+"\n");
    }
    
    private void incrementIndent()
    {
    	parser.counter++;
    }
    
    private int getCounter()
    {
    	return parser.counter;
    }


  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // number ::= BIN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = b.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // number ::= OCT 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = o.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // number ::= HEX 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object h = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = h.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // number ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Integer.parseInt(d.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // number ::= LONGINT 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = li.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // number ::= IMAGNUM 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = i.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // number ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = Float.parseFloat(f.toString());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // binop ::= DIVDIV 
            {
              Object RESULT =null;
		int double_divleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int double_divright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object double_div = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = double_div;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // binop ::= ECOM 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=ec;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // binop ::= PIPE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = not;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		int doublestarleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int doublestarright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object doublestar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = doublestar;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // binop ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = or;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // binop ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = and;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // binop ::= NEQ 
            {
              Object RESULT =null;
		int neqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object neq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = neq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = eq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = maieq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mag;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mineq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = min;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = rshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = lshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = notin;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = isnot;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = in;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // binop ::= EXPON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ex;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // comp_if ::= IF test comp_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if "+t.toString()+c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // comp_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // comp_for ::= FOR exprlist IN test comp_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // comp_for ::= FOR exprlist IN test 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // comp_iter ::= comp_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // comp_iter ::= comp_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // list_if ::= IF test list_iter 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if "+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // list_if ::= IF test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // list_for ::= FOR exprlist IN testlist list_iter 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // list_for ::= FOR exprlist IN testlist 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "for "+e.toString()+" in "+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // list_iter ::= list_if 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // list_iter ::= list_for 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // argument ::= test ASSIGN test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString()+assign.toString()+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // argument ::= test comp_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString() + " " +c.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // argument ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // argument_rec ::= COMMA 
            {
              Object RESULT =null;
		RESULT = ",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // argument_rec ::= COMMA argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ","+a+ar;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // argument_rec ::= COMMA argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ","+a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // arglist ::= MULT test argument_rec MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // arglist ::= MULT test argument_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // arglist ::= MULT test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // arglist ::= argument argument_rec 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ar = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a + ar.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // arglist ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // classdef ::= CLASS NAME LPAREN testlist RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // classdef ::= CLASS NAME LPAREN RPAREN COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // classdef ::= CLASS NAME COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("classdef",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // sliceop ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // sliceop ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("sliceop",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // subscript ::= COLON sliceop 
            {
              Object RESULT =null;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // subscript ::= COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // subscript ::= COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // subscript ::= test COLON sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // subscript ::= test COLON test sliceop 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sliceleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sliceright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object slice = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString()+slice.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // subscript ::= test COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+":"+t2.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // subscript ::= test COLON 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT=t.toString()+":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // subscript ::= COLON 
            {
              Object RESULT =null;
		RESULT=":";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // subscript ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // subscript ::= TRIDOT 
            {
              Object RESULT =null;
		RESULT="...";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // subscript_rec ::= COMMA subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // subscript_rec ::= COMMA subscript 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscript_rec",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // subscriptlist ::= subscript subscript_rec 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // subscriptlist ::= subscript 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscriptlist",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // trailer ::= DOT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "."+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // trailer ::= LBRACK subscriptlist RBRACK 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "[" + s.toString() + "]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // trailer ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT = "[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // trailer ::= LPAREN arglist RPAREN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "("+a.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // trailer ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // lambdef ::= LAMBDA varargslist COLON test 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda "+v.toString()+":"+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // lambdef ::= LAMBDA COLON test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="lambda:"+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // exprlist ::= expr COMMA exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // exprlist ::= expr COMMA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = e + ",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // exprlist ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // testlist ::= test COMMA testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+","+tl.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // testlist ::= test COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = t.toString()+",";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // testlist ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // testlist_comp ::= testlist 
            {
              Object RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object tlist = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = tlist;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // testlist_comp ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t+" "+l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // dictorsetmaker ::= test COLON test COMMA dictorsetmaker 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // dictorsetmaker ::= test COLON test COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // dictorsetmaker ::= test COLON test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // listmaker ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // listmaker ::= test list_for 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t.toString()+l.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // yield_expr ::= YIELD testlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // yield_expr ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expr",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="{"+d.toString()+"}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // atom ::= LBRACK listmaker RBRACK 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="["+l.toString()+"]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+t.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // atom ::= LPAREN yield_expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+y.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // atom ::= LCURLY RCURLY 
            {
              Object RESULT =null;
		RESULT="{}";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // atom ::= LBRACK RBRACK 
            {
              Object RESULT =null;
		RESULT="[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // atom ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT="()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // atom ::= unop atom 
            {
              Object RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = u.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // atom ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // atom ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // atom ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= atom trailer 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a.toString() + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= atom 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // comparison ::= expr binop comparison 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int binopleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int binopright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object binop = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int comparisonleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int comparisonright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object comparison = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e.toString()+binop.toString()+comparison.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // comparison ::= expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // test ::= lambdef 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // test ::= comparison 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = c;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // assign_recoursive ::= ASSIGN testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int ass_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ass_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ass_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString()+ass_rec.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // assign_recoursive ::= ASSIGN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT ="="+t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assign_recoursive",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // stmt_rec ::= stmt_rec stmt 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("TOKEN: " + parser.getToken()); RESULT = sr.toString() + " " +s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("TOKEN: " + parser.getToken()); RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
				System.out.println("TOKEN: " + parser.getToken());
				RESULT = "\n\t" + s;
				//System.out.println("suite->NEWLINE INDENT stmt_rec DEDENT: " + s);
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // suite ::= simple_stmt 
            {
              Object RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("suite simple: " + simple.toString());RESULT = "\n"+simple.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // with_item ::= test AS expr 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t + " as " + e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // with_item ::= test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // with_item_recoursive ::= with_item_recoursive COMMA with_item 
            {
              Object RESULT =null;
		int wrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = wr.toString()+","+w;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // with_item_recoursive ::= COMMA with_item 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ","+w;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_item_recoursive",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // with_stmt ::= WITH with_item with_item_recoursive COLON suite 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int wrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int wrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object wr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "with " + w.toString() + wr.toString()+":"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("with_stmt",61, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t1 + "," + t2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t + " as "+t2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;
		RESULT = "except";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // except_clause_recoursive ::= except_clause COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-9)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // for_stmt ::= FOR exprlist IN testlist COLON suite ELSE COLON suite 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // for_stmt ::= FOR exprlist IN testlist COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT = "for "+ e+" in "+t+" do "+s.toString()+" end";
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // while_stmt ::= WHILE test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT = new String[]{t.toString(),s1.toString(),s2.toString()};
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					//System.out.println("while_stmt->WHILE test COLON suite");
					RESULT = "while " + t.toString() + " do " + s.toString() + " end\n";
					//dumpln("while " + t.toString() + " do " + s.toString() + " end");
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // else_recoursive ::= ELIF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "elseif " + t.toString() + " then " + s.toString() + else_rec;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "elseif " + t.toString() + " then " + s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s1 + " " + else_rec + " else " + s2.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s1 + " else " + s2.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="if " + t + " then " + s + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "if " + t.toString() + " then " + s.toString() + " " + else_rec + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // compound_stmt ::= decorated 
            {
              Object RESULT =null;
		System.out.println("decorated");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // compound_stmt ::= classdef 
            {
              Object RESULT =null;
		System.out.println("classdef");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("funcdef: " + f); RESULT = f.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // compound_stmt ::= with_stmt 
            {
              Object RESULT =null;
		System.out.println("with_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("try_stmt");RESULT = t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("for_stmt: " + f);RESULT = f.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = w.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = if_stmt; System.out.println(if_stmt);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "assert " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // exec_stmt ::= EXEC expr IN test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // exec_stmt ::= EXEC expr IN test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exec_stmt ::= EXEC expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "exec " + e;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exec_stmt",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // name_recoursive ::= name_recoursive COMMA NAME 
            {
              Object RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=nr+","+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="global "+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n1+"as"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=i+","+is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT= i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+"."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"as"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=ds+","+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from." + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from." + d+" import("+i.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from." + d+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+n+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+n+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d+n+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d + " import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "import " + d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "return " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("return_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // flow_stmt ::= yield_expr 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = y;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;
		pSemWarning("Found raise statement, not supported in LUA");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = r;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		RESULT = "break ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_stmt ::= PRINT RSHIFT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print >>" + t.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print (" + t.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		RESULT = "print ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // augassign ::= OREQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=op;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr_stmt ::= testlist assign_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t.toString()+a.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object t1 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t2 = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t1.toString() + a.toString() + t2.toString(); System.out.println("Found testlist");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // small_stmt ::= exec_stmt 
            {
              Object RESULT =null;
		System.out.println("Found exec_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		System.out.println("Found global_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		System.out.println("Found assert_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("Found import_stmt: " + i);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		System.out.println("Found flow_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p; System.out.println("Found PASS_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d; System.out.println("Found del_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =e.toString(); System.out.println("Found expr_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // small_stmt_rec ::= small_stmt_rec SEMI small_stmt 
            {
              Object RESULT =null;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = srec.toString()+";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // small_stmt_rec ::= SEMI small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // simple_stmt ::= small_stmt small_stmt_rec SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+ srec.toString() + ";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // simple_stmt ::= small_stmt small_stmt_rec NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+ srec.toString() + "\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+"\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int compoundleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int compoundright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object compound = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = compound;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = s;
								//System.out.println("simple_stmt: " + s.toString());
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fplist ::= fplist COMMA fpdef 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = fl+","+f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fplist ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fplist",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fpdef ::= LPAREN fplist RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT="("+f+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fpdef ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("fpdef",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // defparameter ::= fpdef ASSIGN test 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=f+"="+t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // defparameter ::= fpdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // defparameter_recoursive ::= defparameter_recoursive COMMA defparameter 
            {
              Object RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object dr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = dr+","+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // defparameter_recoursive ::= defparameter 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // varargslist ::= MULTMULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="**"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n1+",**"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // varargslist ::= MULT NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="*"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // varargslist ::= defparameter_recoursive MULT NAME COMMA MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"*"+n1+",**"+n2; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // varargslist ::= defparameter_recoursive MULTMULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"**"+n; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varargslist ::= defparameter_recoursive MULT NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = d+",..."; 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varargslist ::= defparameter_recoursive 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d.toString(); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameters ::= LPAREN varargslist RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "(" + v.toString() + ")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",77, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",77, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "function " + n +" "+ p.toString() + " " + s.toString() + " end";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("funcdef",62, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decorated ::= decorators funcdef 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorated",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decorated ::= decorators classdef 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorated",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decorators ::= decorators decorator 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorators",76, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decorators ::= decorator 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorators",76, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decorator ::= AT dotted_name LPAREN arglist RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decorator ::= AT dotted_name LPAREN RPAREN NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decorator ::= AT dotted_name NEWLINE 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("decorator",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
									RESULT = s.toString() + f.toString();
									/*if(s==null && f!=null)
										dumpln(f.toString());
									else if (s!=null && f == null)
										dumpln(s.toString());
									else if (s!=null && f != null)
										dumpln(s.toString() + f.toString());*/
								
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "\n"+f; dumpln("\n"+f);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								try {
									dumpln(f.toString());
									BufferedWriter out = new BufferedWriter(new FileWriter(parser.dumpOutput));
									String outText = parser.outputBuffer.toString();
									out.write(outText);
									out.close();
								}
                                catch (IOException e)
                                {
                                	e.printStackTrace();
                                }
                                
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

