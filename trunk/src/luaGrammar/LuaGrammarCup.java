
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 12 09:43:57 CET 2011
//----------------------------------------------------

package luaGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 12 09:43:57 CET 2011
  */
public class LuaGrammarCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaGrammarCup() {super();}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\002\000\002\040\003" +
    "\000\002\040\004\000\002\040\004\000\002\040\005\000" +
    "\002\003\003\000\002\004\005\000\002\004\003\000\002" +
    "\004\005\000\002\004\007\000\002\004\006\000\002\004" +
    "\003\000\002\004\003\000\002\004\005\000\002\004\006" +
    "\000\002\004\004\000\002\004\006\000\002\052\007\000" +
    "\002\052\010\000\002\052\011\000\002\052\012\000\002" +
    "\053\006\000\002\053\007\000\002\051\013\000\002\051" +
    "\015\000\002\051\011\000\002\013\003\000\002\013\003" +
    "\000\002\047\003\000\002\047\004\000\002\047\004\000" +
    "\002\047\005\000\002\050\003\000\002\050\004\000\002" +
    "\021\004\000\002\021\006\000\002\054\002\000\002\054" +
    "\005\000\002\032\003\000\002\032\005\000\002\030\003" +
    "\000\002\030\006\000\002\030\005\000\002\046\003\000" +
    "\002\046\005\000\002\016\003\000\002\044\003\000\002" +
    "\044\005\000\002\007\003\000\002\045\003\000\002\045" +
    "\005\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\004\000\002\027\003\000\002\027\003\000\002\023" +
    "\004\000\002\023\006\000\002\031\004\000\002\031\005" +
    "\000\002\031\003\000\002\031\003\000\002\020\004\000" +
    "\002\017\006\000\002\017\007\000\002\022\003\000\002" +
    "\022\005\000\002\022\003\000\002\035\004\000\002\035" +
    "\005\000\002\024\003\000\002\024\005\000\002\034\007" +
    "\000\002\034\005\000\002\034\003\000\002\025\003\000" +
    "\002\025\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\030\002\ufffd\004\015\060\007\061\004\062" +
    "\027\063\011\065\031\067\010\073\005\074\006\075\016" +
    "\001\002\000\042\004\015\006\041\007\054\010\052\021" +
    "\056\022\042\023\066\025\061\043\051\044\043\045\060" +
    "\046\047\047\050\050\037\056\053\060\046\001\002\000" +
    "\006\004\162\060\272\001\002\000\056\002\uffe1\004\015" +
    "\006\041\007\054\010\052\016\267\021\056\022\042\023" +
    "\066\025\061\043\051\044\043\045\060\046\047\047\050" +
    "\050\037\056\053\060\046\064\uffe1\066\uffe1\070\uffe1\072" +
    "\uffe1\001\002\000\004\004\256\001\002\000\042\004\015" +
    "\006\041\007\054\010\052\021\056\022\042\023\066\025" +
    "\061\043\051\044\043\045\060\046\047\047\050\050\037" +
    "\056\053\060\046\001\002\000\030\004\015\060\007\061" +
    "\004\062\027\063\011\064\ufffd\065\031\067\010\073\005" +
    "\074\006\075\016\001\002\000\004\002\231\001\002\000" +
    "\014\002\uffe3\064\uffe3\066\uffe3\070\uffe3\072\uffe3\001\002" +
    "\000\062\002\ufff6\004\ufff6\016\ufff6\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\051\uffbf\052\uffbf\054\uffbf\056\uffbf\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002" +
    "\000\134\002\uffd5\004\uffd5\005\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5" +
    "\067\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075" +
    "\uffd5\001\002\000\016\002\uffdd\016\230\064\uffdd\066\uffdd" +
    "\070\uffdd\072\uffdd\001\002\000\014\002\uffe2\064\uffe2\066" +
    "\uffe2\070\uffe2\072\uffe2\001\002\000\042\002\ufff2\004\ufff2" +
    "\016\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065" +
    "\ufff2\066\ufff2\067\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\ufff2\001\002\000\014\002\ufffe\064\ufffe\066\ufffe\070" +
    "\ufffe\072\ufffe\001\002\000\042\002\ufff1\004\ufff1\016\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\001\002\000\022\020\112\021\056\022\042\023\066\051" +
    "\110\052\116\054\115\056\053\001\002\000\020\002\001" +
    "\064\001\066\001\070\001\072\001\074\006\075\016\001" +
    "\002\000\042\002\ufffc\004\015\016\224\060\007\061\004" +
    "\062\027\063\011\064\ufffc\065\031\066\ufffc\067\010\070" +
    "\ufffc\072\ufffc\073\005\074\ufffc\075\ufffc\001\002\000\026" +
    "\005\uffd7\017\222\020\uffc0\021\uffc0\022\uffc0\023\uffc0\051" +
    "\uffc0\052\uffc0\054\uffc0\056\uffc0\001\002\000\004\004\177" +
    "\001\002\000\004\005\174\001\002\000\030\004\015\060" +
    "\007\061\004\062\027\063\011\065\031\066\ufffd\067\010" +
    "\073\005\074\006\075\016\001\002\000\004\066\034\001" +
    "\002\000\012\064\ufff8\066\ufff8\070\ufff8\072\ufff8\001\002" +
    "\000\042\004\015\006\041\007\054\010\052\021\056\022" +
    "\042\023\066\025\061\043\051\044\043\045\060\046\047" +
    "\047\050\050\037\056\053\060\046\001\002\000\112\002" +
    "\uffc6\004\uffc6\016\uffc6\017\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\053\uffc6" +
    "\055\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\001\002\000\112\002\uffc7\004" +
    "\uffc7\016\uffc7\017\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\053\uffc7\055\uffc7" +
    "\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\001\002\000\042\004\uff98\006\uff98\007" +
    "\uff98\010\uff98\021\uff98\022\uff98\023\uff98\025\uff98\043\uff98" +
    "\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\056\uff98\060" +
    "\uff98\001\002\000\054\002\uffcd\004\uffcd\016\uffcd\017\uffcd" +
    "\053\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\001\002\000\112\002" +
    "\uff95\004\uff95\016\uff95\017\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035" +
    "\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\053\uff95" +
    "\055\uff95\057\uff95\060\uff95\061\uff95\062\uff95\063\uff95\064" +
    "\uff95\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95" +
    "\073\uff95\074\uff95\075\uff95\001\002\000\132\002\uff93\004" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031\uff93\032" +
    "\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\040\uff93" +
    "\041\uff93\042\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055" +
    "\uff93\056\uff93\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93" +
    "\064\uff93\065\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072" +
    "\uff93\073\uff93\074\uff93\075\uff93\001\002\000\042\004\uff99" +
    "\006\uff99\007\uff99\010\uff99\021\uff99\022\uff99\023\uff99\025" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99" +
    "\056\uff99\060\uff99\001\002\000\112\002\uffc5\004\uffc5\016" +
    "\uffc5\017\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\053\uffc5\055\uffc5\057\uffc5" +
    "\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5\066" +
    "\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5" +
    "\075\uffc5\001\002\000\042\002\ufff3\004\ufff3\016\ufff3\060" +
    "\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\001" +
    "\002\000\004\052\156\001\002\000\112\002\uffc8\004\uffc8" +
    "\016\uffc8\017\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\053\uffc8\055\uffc8\057" +
    "\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\075\uffc8\001\002\000\112\002\uffc2\004\uffc2\016\uffc2" +
    "\017\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\053\uffc2\055\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2" +
    "\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075" +
    "\uffc2\001\002\000\112\002\uffca\004\uffca\016\uffca\017\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\041\uffca\042\uffca\053\uffca\055\uffca\057\uffca\060\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca" +
    "\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\001" +
    "\002\000\112\002\uff97\004\uff97\016\uff97\017\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97" +
    "\042\uff97\053\uff97\055\uff97\057\uff97\060\uff97\061\uff97\062" +
    "\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067\uff97\070\uff97" +
    "\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97\001\002\000" +
    "\046\004\140\006\041\007\054\010\052\021\056\022\042" +
    "\023\066\025\061\043\051\044\043\045\060\046\047\047" +
    "\050\050\037\054\135\056\053\057\136\060\046\001\002" +
    "\000\112\002\uff96\004\uff96\016\uff96\017\uff96\024\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\053\uff96\055\uff96\057\uff96\060\uff96\061\uff96\062\uff96" +
    "\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071" +
    "\uff96\072\uff96\073\uff96\074\uff96\075\uff96\001\002\000\132" +
    "\002\uffbf\004\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\132\002\uff94\004\uff94\016\uff94\017\uff94\020\uff94\021\uff94" +
    "\022\uff94\023\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030" +
    "\uff94\031\uff94\032\uff94\033\uff94\034\uff94\035\uff94\036\uff94" +
    "\037\uff94\040\uff94\041\uff94\042\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\055\uff94\056\uff94\057\uff94\060\uff94\061\uff94" +
    "\062\uff94\063\uff94\064\uff94\065\uff94\066\uff94\067\uff94\070" +
    "\uff94\071\uff94\072\uff94\073\uff94\074\uff94\075\uff94\001\002" +
    "\000\042\004\015\006\041\007\054\010\052\021\056\022" +
    "\042\023\066\025\061\043\051\044\043\045\060\046\047" +
    "\047\050\050\037\056\053\060\046\001\002\000\112\002" +
    "\uffc9\004\uffc9\016\uffc9\017\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\053\uffc9" +
    "\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\001\002\000\042\004\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\021\uff9a\022\uff9a\023\uff9a\025\uff9a" +
    "\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\056" +
    "\uff9a\060\uff9a\001\002\000\112\002\uffc3\004\uffc3\016\uffc3" +
    "\017\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\053\uffc3\055\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075" +
    "\uffc3\001\002\000\132\002\uffc4\004\uffc4\016\uffc4\017\uffc4" +
    "\020\112\021\056\022\042\023\066\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\051" +
    "\110\052\116\053\uffc4\054\115\055\uffc4\056\053\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\001\002\000\132\002\uffc0\004\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0" +
    "\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\001\002\000\112\002\uffcc\004\uffcc\016\uffcc" +
    "\017\uffcc\024\100\025\070\026\074\027\071\030\075\031" +
    "\102\032\103\033\072\034\105\035\073\036\104\037\077" +
    "\040\076\041\067\042\106\053\uffcc\055\uffcc\057\uffcc\060" +
    "\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc" +
    "\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075" +
    "\uffcc\001\002\000\132\002\uff92\004\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025\uff92\026" +
    "\uff92\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\051" +
    "\uff92\052\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066" +
    "\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92" +
    "\075\uff92\001\002\000\042\004\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\021\uff9c\022\uff9c\023\uff9c\025\uff9c\043\uff9c\044\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\056\uff9c\060\uff9c\001" +
    "\002\000\042\004\uffa8\006\uffa8\007\uffa8\010\uffa8\021\uffa8" +
    "\022\uffa8\023\uffa8\025\uffa8\043\uffa8\044\uffa8\045\uffa8\046" +
    "\uffa8\047\uffa8\050\uffa8\056\uffa8\060\uffa8\001\002\000\042" +
    "\004\uffa6\006\uffa6\007\uffa6\010\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\025\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\056\uffa6\060\uffa6\001\002\000\042\004\uffa2\006" +
    "\uffa2\007\uffa2\010\uffa2\021\uffa2\022\uffa2\023\uffa2\025\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\056" +
    "\uffa2\060\uffa2\001\002\000\042\004\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\021\uffa0\022\uffa0\023\uffa0\025\uffa0\043\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\056\uffa0\060\uffa0" +
    "\001\002\000\042\004\uffa7\006\uffa7\007\uffa7\010\uffa7\021" +
    "\uffa7\022\uffa7\023\uffa7\025\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\047\uffa7\050\uffa7\056\uffa7\060\uffa7\001\002\000" +
    "\042\004\uffa4\006\uffa4\007\uffa4\010\uffa4\021\uffa4\022\uffa4" +
    "\023\uffa4\025\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047" +
    "\uffa4\050\uffa4\056\uffa4\060\uffa4\001\002\000\042\004\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\021\uff9d\022\uff9d\023\uff9d\025" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\056\uff9d\060\uff9d\001\002\000\042\004\uff9e\006\uff9e\007" +
    "\uff9e\010\uff9e\021\uff9e\022\uff9e\023\uff9e\025\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\056\uff9e\060" +
    "\uff9e\001\002\000\042\004\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\025\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\056\uffa9\060\uffa9\001\002" +
    "\000\042\004\015\006\041\007\054\010\052\021\056\022" +
    "\042\023\066\025\061\043\051\044\043\045\060\046\047" +
    "\047\050\050\037\056\053\060\046\001\002\000\042\004" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\021\uffa5\022\uffa5\023\uffa5" +
    "\025\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050" +
    "\uffa5\056\uffa5\060\uffa5\001\002\000\042\004\uffa3\006\uffa3" +
    "\007\uffa3\010\uffa3\021\uffa3\022\uffa3\023\uffa3\025\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\056\uffa3" +
    "\060\uffa3\001\002\000\042\004\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\021\uff9f\022\uff9f\023\uff9f\025\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\056\uff9f\060\uff9f\001" +
    "\002\000\042\004\uffa1\006\uffa1\007\uffa1\010\uffa1\021\uffa1" +
    "\022\uffa1\023\uffa1\025\uffa1\043\uffa1\044\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\056\uffa1\060\uffa1\001\002\000\042" +
    "\004\uff9b\006\uff9b\007\uff9b\010\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\025\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\056\uff9b\060\uff9b\001\002\000\054\002\uffcb\004" +
    "\uffcb\016\uffcb\017\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067" +
    "\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb" +
    "\001\002\000\004\004\131\001\002\000\132\002\uffb9\004" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9" +
    "\041\uffb9\042\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9" +
    "\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072" +
    "\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\004\004\130" +
    "\001\002\000\132\002\uffbe\004\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe" +
    "\067\uffbe\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075" +
    "\uffbe\001\002\000\132\002\uffba\004\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\051" +
    "\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057\uffba" +
    "\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\001\002\000\042\004\015\006\041\007\054\010" +
    "\052\021\056\022\042\023\066\025\061\043\051\044\043" +
    "\045\060\046\047\047\050\050\037\056\053\060\046\001" +
    "\002\000\044\004\015\006\041\007\054\010\052\021\056" +
    "\022\042\023\066\025\061\043\051\044\043\045\060\046" +
    "\047\047\050\050\037\053\117\056\053\060\046\001\002" +
    "\000\132\002\uffbc\004\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\001" +
    "\002\000\004\053\125\001\002\000\046\002\uffcf\004\uffcf" +
    "\016\uffcf\017\123\053\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\072\uffcf" +
    "\073\uffcf\074\uffcf\075\uffcf\001\002\000\044\002\uffd0\004" +
    "\uffd0\016\uffd0\053\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\072\uffd0\073" +
    "\uffd0\074\uffd0\075\uffd0\001\002\000\042\004\015\006\041" +
    "\007\054\010\052\021\056\022\042\023\066\025\061\043" +
    "\051\044\043\045\060\046\047\047\050\050\037\056\053" +
    "\060\046\001\002\000\044\002\uffce\004\uffce\016\uffce\053" +
    "\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce\065\uffce" +
    "\066\uffce\067\uffce\070\uffce\072\uffce\073\uffce\074\uffce\075" +
    "\uffce\001\002\000\132\002\uffbb\004\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb" +
    "\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\004\055\127\001\002\000\134\002" +
    "\uffd4\004\uffd4\005\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070" +
    "\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\001\002" +
    "\000\134\002\uffd3\004\uffd3\005\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035" +
    "\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075" +
    "\uffd3\001\002\000\014\021\056\022\042\023\066\052\116" +
    "\056\053\001\002\000\132\002\uffbd\004\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\001\002\000\112\002\uffc1\004\uffc1\016\uffc1" +
    "\017\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\053\uffc1\055\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\001\002\000\010\016\153\017\151\057\uffb0\001\002" +
    "\000\042\004\015\006\041\007\054\010\052\021\056\022" +
    "\042\023\066\025\061\043\051\044\043\045\060\046\047" +
    "\047\050\050\037\056\053\060\046\001\002\000\132\002" +
    "\uffb2\004\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\051\uffb2\052\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\010" +
    "\016\uffac\017\uffac\057\uffac\001\002\000\070\005\143\016" +
    "\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033" +
    "\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\051\uffd5\052\uffd5\054\uffd5\056\uffd5\057\uffd5\001" +
    "\002\000\004\057\142\001\002\000\132\002\uffb1\004\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024" +
    "\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041" +
    "\uffb1\042\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1" +
    "\073\uffb1\074\uffb1\075\uffb1\001\002\000\042\004\015\006" +
    "\041\007\054\010\052\021\056\022\042\023\066\025\061" +
    "\043\051\044\043\045\060\046\047\047\050\050\037\056" +
    "\053\060\046\001\002\000\010\016\uffad\017\uffad\057\uffad" +
    "\001\002\000\004\055\146\001\002\000\004\005\147\001" +
    "\002\000\042\004\015\006\041\007\054\010\052\021\056" +
    "\022\042\023\066\025\061\043\051\044\043\045\060\046" +
    "\047\047\050\050\037\056\053\060\046\001\002\000\010" +
    "\016\uffae\017\uffae\057\uffae\001\002\000\044\004\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\021\uffaa\022\uffaa\023\uffaa\025\uffaa" +
    "\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\054" +
    "\uffaa\056\uffaa\060\uffaa\001\002\000\044\004\140\006\041" +
    "\007\054\010\052\021\056\022\042\023\066\025\061\043" +
    "\051\044\043\045\060\046\047\047\050\050\037\054\135" +
    "\056\053\060\046\001\002\000\044\004\uffab\006\uffab\007" +
    "\uffab\010\uffab\021\uffab\022\uffab\023\uffab\025\uffab\043\uffab" +
    "\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\054\uffab\056" +
    "\uffab\060\uffab\001\002\000\004\057\uffaf\001\002\000\112" +
    "\002\uffb8\004\uffb8\016\uffb8\017\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8\053" +
    "\uffb8\055\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\010\004\162" +
    "\047\161\053\160\001\002\000\006\017\171\053\uffb5\001" +
    "\002\000\030\004\015\060\007\061\004\062\027\063\011" +
    "\064\ufffd\065\031\067\010\073\005\074\006\075\016\001" +
    "\002\000\004\053\uffb3\001\002\000\050\002\uffd2\004\uffd2" +
    "\005\uffd2\016\uffd2\017\uffd2\053\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\004\053" +
    "\164\001\002\000\030\004\015\060\007\061\004\062\027" +
    "\063\011\064\ufffd\065\031\067\010\073\005\074\006\075" +
    "\016\001\002\000\004\064\166\001\002\000\112\002\uffb6" +
    "\004\uffb6\016\uffb6\017\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\053\uffb6\055" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073" +
    "\uffb6\074\uffb6\075\uffb6\001\002\000\004\064\170\001\002" +
    "\000\112\002\uffb7\004\uffb7\016\uffb7\017\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\053\uffb7\055\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071" +
    "\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\001\002\000\006" +
    "\004\173\047\172\001\002\000\004\053\uffb4\001\002\000" +
    "\052\002\uffd1\004\uffd1\005\uffd1\016\uffd1\017\uffd1\053\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1\066" +
    "\uffd1\067\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\075\uffd1" +
    "\076\uffd1\001\002\000\042\004\015\006\041\007\054\010" +
    "\052\021\056\022\042\023\066\025\061\043\051\044\043" +
    "\045\060\046\047\047\050\050\037\056\053\060\046\001" +
    "\002\000\042\002\ufff7\004\ufff7\016\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002\000\006" +
    "\017\214\076\215\001\002\000\010\005\200\017\uffd2\076" +
    "\uffd2\001\002\000\042\004\015\006\041\007\054\010\052" +
    "\021\056\022\042\023\066\025\061\043\051\044\043\045" +
    "\060\046\047\047\050\050\037\056\053\060\046\001\002" +
    "\000\004\017\202\001\002\000\042\004\015\006\041\007" +
    "\054\010\052\021\056\022\042\023\066\025\061\043\051" +
    "\044\043\045\060\046\047\047\050\050\037\056\053\060" +
    "\046\001\002\000\006\017\204\063\205\001\002\000\042" +
    "\004\015\006\041\007\054\010\052\021\056\022\042\023" +
    "\066\025\061\043\051\044\043\045\060\046\047\047\050" +
    "\050\037\056\053\060\046\001\002\000\030\004\015\060" +
    "\007\061\004\062\027\063\011\064\ufffd\065\031\067\010" +
    "\073\005\074\006\075\016\001\002\000\004\064\207\001" +
    "\002\000\042\002\uffe6\004\uffe6\016\uffe6\060\uffe6\061\uffe6" +
    "\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070" +
    "\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\001\002\000\004" +
    "\063\211\001\002\000\030\004\015\060\007\061\004\062" +
    "\027\063\011\064\ufffd\065\031\067\010\073\005\074\006" +
    "\075\016\001\002\000\004\064\213\001\002\000\042\002" +
    "\uffe5\004\uffe5\016\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\001\002\000\004\004\173\001\002" +
    "\000\042\004\015\006\041\007\054\010\052\021\056\022" +
    "\042\023\066\025\061\043\051\044\043\045\060\046\047" +
    "\047\050\050\037\056\053\060\046\001\002\000\004\063" +
    "\217\001\002\000\030\004\015\060\007\061\004\062\027" +
    "\063\011\064\ufffd\065\031\067\010\073\005\074\006\075" +
    "\016\001\002\000\004\064\221\001\002\000\042\002\uffe4" +
    "\004\uffe4\016\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4\072\uffe4\073\uffe4" +
    "\074\uffe4\075\uffe4\001\002\000\004\004\015\001\002\000" +
    "\004\005\uffd6\001\002\000\040\002\ufffb\004\015\060\007" +
    "\061\004\062\027\063\011\064\ufffb\065\031\066\ufffb\067" +
    "\010\070\ufffb\072\ufffb\073\005\074\ufffb\075\ufffb\001\002" +
    "\000\020\002\ufffa\064\ufffa\066\ufffa\070\ufffa\072\ufffa\074" +
    "\ufffa\075\ufffa\001\002\000\020\002\ufff9\064\ufff9\066\ufff9" +
    "\070\ufff9\072\ufff9\074\ufff9\075\ufff9\001\002\000\014\002" +
    "\uffff\064\uffff\066\uffff\070\uffff\072\uffff\001\002\000\014" +
    "\002\uffdc\064\uffdc\066\uffdc\070\uffdc\072\uffdc\001\002\000" +
    "\004\002\000\001\002\000\004\064\233\001\002\000\042" +
    "\002\ufff5\004\ufff5\016\ufff5\060\ufff5\061\ufff5\062\ufff5\063" +
    "\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\072\ufff5" +
    "\073\ufff5\074\ufff5\075\ufff5\001\002\000\004\071\235\001" +
    "\002\000\034\004\015\060\007\061\004\062\027\063\011" +
    "\064\ufffd\065\031\067\010\070\ufffd\072\ufffd\073\005\074" +
    "\006\075\016\001\002\000\010\064\241\070\237\072\240" +
    "\001\002\000\042\004\015\006\041\007\054\010\052\021" +
    "\056\022\042\023\066\025\061\043\051\044\043\045\060" +
    "\046\047\047\050\050\037\056\053\060\046\001\002\000" +
    "\030\004\015\060\007\061\004\062\027\063\011\064\ufffd" +
    "\065\031\067\010\073\005\074\006\075\016\001\002\000" +
    "\042\002\uffec\004\uffec\016\uffec\060\uffec\061\uffec\062\uffec" +
    "\063\uffec\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\072" +
    "\uffec\073\uffec\074\uffec\075\uffec\001\002\000\006\064\244" +
    "\072\243\001\002\000\030\004\015\060\007\061\004\062" +
    "\027\063\011\064\ufffd\065\031\067\010\073\005\074\006" +
    "\075\016\001\002\000\042\002\uffeb\004\uffeb\016\uffeb\060" +
    "\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\001" +
    "\002\000\004\064\246\001\002\000\042\002\uffe9\004\uffe9" +
    "\016\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\067\uffe9\070\uffe9\072\uffe9\073\uffe9\074\uffe9" +
    "\075\uffe9\001\002\000\004\064\250\001\002\000\042\002" +
    "\uffea\004\uffea\016\uffea\060\uffea\061\uffea\062\uffea\063\uffea" +
    "\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073" +
    "\uffea\074\uffea\075\uffea\001\002\000\004\071\252\001\002" +
    "\000\034\004\015\060\007\061\004\062\027\063\011\064" +
    "\ufffd\065\031\067\010\070\ufffd\072\ufffd\073\005\074\006" +
    "\075\016\001\002\000\010\064\uffe8\070\237\072\uffe8\001" +
    "\002\000\006\064\uffe7\072\uffe7\001\002\000\004\052\156" +
    "\001\002\000\010\020\260\051\uffd9\052\uffd9\001\002\000" +
    "\006\051\263\052\uffdb\001\002\000\004\004\261\001\002" +
    "\000\010\020\260\051\uffd9\052\uffd9\001\002\000\006\051" +
    "\uffd8\052\uffd8\001\002\000\004\004\264\001\002\000\004" +
    "\052\uffda\001\002\000\042\002\ufff0\004\ufff0\016\ufff0\060" +
    "\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\001" +
    "\002\000\016\002\uffe0\016\270\064\uffe0\066\uffe0\070\uffe0" +
    "\072\uffe0\001\002\000\014\002\uffdf\064\uffdf\066\uffdf\070" +
    "\uffdf\072\uffdf\001\002\000\014\002\uffde\064\uffde\066\uffde" +
    "\070\uffde\072\uffde\001\002\000\046\002\uffee\004\uffee\005" +
    "\275\016\uffee\017\214\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\072\uffee\073" +
    "\uffee\074\uffee\075\uffee\001\002\000\004\004\273\001\002" +
    "\000\004\052\156\001\002\000\042\002\uffef\004\uffef\016" +
    "\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065\uffef" +
    "\066\uffef\067\uffef\070\uffef\072\uffef\073\uffef\074\uffef\075" +
    "\uffef\001\002\000\042\004\015\006\041\007\054\010\052" +
    "\021\056\022\042\023\066\025\061\043\051\044\043\045" +
    "\060\046\047\047\050\050\037\056\053\060\046\001\002" +
    "\000\042\002\uffed\004\uffed\016\uffed\060\uffed\061\uffed\062" +
    "\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070\uffed" +
    "\072\uffed\073\uffed\074\uffed\075\uffed\001\002\000\004\063" +
    "\300\001\002\000\030\004\015\060\007\061\004\062\027" +
    "\063\011\064\ufffd\065\031\067\010\073\005\074\006\075" +
    "\016\001\002\000\004\064\302\001\002\000\042\002\ufff4" +
    "\004\ufff4\016\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\032\002\011\004\024\013\020\023\013\027" +
    "\022\030\025\032\027\040\023\047\012\050\016\051\021" +
    "\052\017\001\001\000\030\007\276\012\056\014\035\015" +
    "\034\020\043\023\054\027\062\030\063\035\061\043\064" +
    "\045\037\001\001\000\004\046\270\001\001\000\034\007" +
    "\120\012\056\014\035\015\034\016\265\020\043\023\054" +
    "\027\062\030\063\035\061\043\064\044\121\045\037\001" +
    "\001\000\004\021\254\001\001\000\030\007\233\012\056" +
    "\014\035\015\034\020\043\023\054\027\062\030\063\035" +
    "\061\043\064\045\037\001\001\000\034\002\032\003\231" +
    "\004\024\013\020\023\013\027\022\030\025\032\027\040" +
    "\023\047\012\050\016\051\021\052\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\015\110\031" +
    "\112\035\113\001\001\000\010\013\226\047\012\050\016" +
    "\001\001\000\022\004\024\023\013\027\022\030\025\032" +
    "\027\040\224\051\021\052\017\001\001\000\002\001\001" +
    "\000\004\046\175\001\001\000\002\001\001\000\034\002" +
    "\032\003\031\004\024\013\020\023\013\027\022\030\025" +
    "\032\027\040\023\047\012\050\016\051\021\052\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\044" +
    "\012\056\014\035\015\034\020\043\023\054\027\062\030" +
    "\063\035\061\043\064\045\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\136\012\056\014\035\015\034\020" +
    "\043\023\054\024\140\027\062\030\063\034\133\035\061" +
    "\043\064\045\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\056\014\035\015\034" +
    "\020\043\023\054\027\062\030\063\035\061\043\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\015\110\031\112\035\113\001\001\000\002\001" +
    "\001\000\004\011\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\012\056\014\035\015\034\020\043\023\054\027\062" +
    "\030\063\035\061\043\064\045\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\125\012\056\014\035\015\034\020" +
    "\043\023\054\027\062\030\063\035\061\043\064\045\037" +
    "\001\001\000\034\007\120\012\056\014\035\015\034\016" +
    "\117\020\043\023\054\027\062\030\063\035\061\043\064" +
    "\044\121\045\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\120" +
    "\012\056\014\035\015\034\020\043\023\054\027\062\030" +
    "\063\035\061\043\064\044\123\045\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\110\031\131\035\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\151\001\001\000\030\007\144\012\056\014\035\015\034" +
    "\020\043\023\054\027\062\030\063\035\061\043\064\045" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\143\012\056\014\035\015\034\020\043\023\054\027\062" +
    "\030\063\035\061\043\064\045\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\147" +
    "\012\056\014\035\015\034\020\043\023\054\027\062\030" +
    "\063\035\061\043\064\045\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\007\136\012\056\014\035\015" +
    "\034\020\043\023\054\024\153\027\062\030\063\034\133" +
    "\035\061\043\064\045\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\162\046\156" +
    "\001\001\000\002\001\001\000\034\002\032\003\166\004" +
    "\024\013\020\023\013\027\022\030\025\032\027\040\023" +
    "\047\012\050\016\051\021\052\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\002\032" +
    "\003\164\004\024\013\020\023\013\027\022\030\025\032" +
    "\027\040\023\047\012\050\016\051\021\052\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\120\012\056\014\035\015\034\016" +
    "\174\020\043\023\054\027\062\030\063\035\061\043\064" +
    "\044\121\045\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\200\012\056\014\035" +
    "\015\034\020\043\023\054\027\062\030\063\035\061\043" +
    "\064\045\037\001\001\000\002\001\001\000\030\007\202" +
    "\012\056\014\035\015\034\020\043\023\054\027\062\030" +
    "\063\035\061\043\064\045\037\001\001\000\002\001\001" +
    "\000\030\007\207\012\056\014\035\015\034\020\043\023" +
    "\054\027\062\030\063\035\061\043\064\045\037\001\001" +
    "\000\034\002\032\003\205\004\024\013\020\023\013\027" +
    "\022\030\025\032\027\040\023\047\012\050\016\051\021" +
    "\052\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\032\003\211\004\024\013\020" +
    "\023\013\027\022\030\025\032\027\040\023\047\012\050" +
    "\016\051\021\052\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\120\012\056\014" +
    "\035\015\034\016\215\020\043\023\054\027\062\030\063" +
    "\035\061\043\064\044\121\045\037\001\001\000\002\001" +
    "\001\000\034\002\032\003\217\004\024\013\020\023\013" +
    "\027\022\030\025\032\027\040\023\047\012\050\016\051" +
    "\021\052\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\054\027\022\030\025\032\222\001\001\000" +
    "\002\001\001\000\022\004\024\023\013\027\022\030\025" +
    "\032\027\040\225\051\021\052\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\032\003\235\004\024\013\020" +
    "\023\013\027\022\030\025\032\027\040\023\047\012\050" +
    "\016\051\021\052\017\001\001\000\004\053\241\001\001" +
    "\000\030\007\250\012\056\014\035\015\034\020\043\023" +
    "\054\027\062\030\063\035\061\043\064\045\037\001\001" +
    "\000\034\002\032\003\246\004\024\013\020\023\013\027" +
    "\022\030\025\032\027\040\023\047\012\050\016\051\021" +
    "\052\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\002\032\003\244\004\024\013\020\023\013\027\022" +
    "\030\025\032\027\040\023\047\012\050\016\051\021\052" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\002\032\003\252\004\024\013\020\023\013" +
    "\027\022\030\025\032\027\040\023\047\012\050\016\051" +
    "\021\052\017\001\001\000\004\053\253\001\001\000\002" +
    "\001\001\000\004\017\264\001\001\000\004\054\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\273\001\001\000\002\001\001\000\034\007\120" +
    "\012\056\014\035\015\034\016\275\020\043\023\054\027" +
    "\062\030\063\035\061\043\064\044\121\045\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\002\032\003" +
    "\300\004\024\013\020\023\013\027\022\030\025\032\027" +
    "\040\023\047\012\050\016\051\021\052\017\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaGrammarCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaGrammarCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaGrammarCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaGrammarCup$actions {



  private final LuaGrammarCup parser;

  /** Constructor */
  CUP$LuaGrammarCup$actions(LuaGrammarCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaGrammarCup$do_action(
    int                        CUP$LuaGrammarCup$act_num,
    java_cup.runtime.lr_parser CUP$LuaGrammarCup$parser,
    java.util.Stack            CUP$LuaGrammarCup$stack,
    int                        CUP$LuaGrammarCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaGrammarCup$result;

      /* select the action based on the action number */
      switch (CUP$LuaGrammarCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // string ::= LONGSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // string ::= CHARSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // string ::= NORMALSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number ::= INT 
            {
              Object RESULT =null;
		System.out.println("found INT"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // number ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("found FLOAT"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // number ::= EXP 
            {
              Object RESULT =null;
		System.out.println("found EXP"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unop ::= SHARP 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // binop ::= NEQ 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // binop ::= EQ 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // binop ::= MAIEQ 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // binop ::= MAIOR 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // binop ::= MINEQ 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= MINOR 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= DOTDOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= MOD 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= EXPON 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= MULT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // fieldsep ::= SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // field ::= exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // field ::= VAR_NAME ASSIGN exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // field ::= LBRACK exp RBRACK ASSIGN exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // fieldlist ::= field fieldsep fieldlist 
            {
              Object RESULT =null;
		System.out.println("found fieldlist"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // fieldlist ::= field 
            {
              Object RESULT =null;
		System.out.println("found a field"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tableconstructor ::= LCURLY fieldlist RCURLY 
            {
              Object RESULT =null;
		 System.out.println("table constructor");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("tableconstructor",27, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tableconstructor ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("tableconstructor",27, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parlist ::= TRIDOT 
            {
              Object RESULT =null;
		System.out.println("found ... in parlist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parlist ::= namelist COMMA TRIDOT 
            {
              Object RESULT =null;
		System.out.println("found ... in parlist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parlist ::= namelist 
            {
              Object RESULT =null;
		System.out.println("found namelist in parlist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              Object RESULT =null;
		System.out.println("functionbody with par");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcbody",13, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // funcbody ::= LPAREN RPAREN block END 
            {
              Object RESULT =null;
		System.out.println("functionbody");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcbody",13, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // function ::= FUNCTION funcbody 
            {
              Object RESULT =null;
		System.out.println("function"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("function",14, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // args ::= string 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // args ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // args ::= LPAREN explist RPAREN 
            {
              Object RESULT =null;
		System.out.println("args (explist)"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		System.out.println("args ()"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // functioncall ::= prefixexp COLON VAR_NAME args 
            {
              Object RESULT =null;
		System.out.println("function call"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("functioncall",17, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // functioncall ::= prefixexp args 
            {
              Object RESULT =null;
		System.out.println("function call"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("functioncall",17, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // prefixexp ::= functioncall 
            {
              Object RESULT =null;
		 System.out.println("prefixexp->functioncall"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // prefixexp ::= var 
            {
              Object RESULT =null;
		 System.out.println("prefixexp->var"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp_member ::= unop exp_member 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_member ::= TRIDOT 
            {
              Object RESULT =null;
		System.out.println("found ...");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp_member ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_member ::= prefixexp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_member ::= function 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_member ::= string 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_member ::= number 
            {
              Object RESULT =null;
		System.out.println("found number");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_member ::= TRUE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_member ::= FALSE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_member ::= NIL 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",33, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_member_recoursive ::= exp_member binop exp_member_recoursive 
            {
              Object RESULT =null;
		System.out.println("found binop exp");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member_recoursive",35, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_member_recoursive ::= exp_member 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member_recoursive",35, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp_member_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_recoursive ::= exp COMMA exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("exp_recoursive"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_recoursive ::= exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // explist ::= exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("found explist"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("explist",12, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // namelist ::= namelist COMMA VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("namelist"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("namelist",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // namelist ::= VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("namelist->varname"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("namelist",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // var ::= prefixexp DOT VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("found var->pref dot varname");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= prefixexp LBRACK exp RBRACK 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // var ::= VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("found varname");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // varlist ::= var COMMA varlist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("varlist",24, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // varlist ::= var 
            {
              Object RESULT =null;
		System.out.println("varlist->var");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("varlist",24, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dot_var_name ::= DOT VAR_NAME dot_var_name 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("dot_var_name",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dot_var_name ::= 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("dot_var_name",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcname ::= VAR_NAME dot_var_name COLON VAR_NAME 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcname ::= VAR_NAME dot_var_name 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).value;
		System.out.println("funcname:" + var); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // break_stat ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("break_stat",38, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // break_stat ::= BREAK 
            {
              Object RESULT =null;
		System.out.println("break stat");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("break_stat",38, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // return_stat ::= RETURN explist SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("return_stat",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // return_stat ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("return_stat",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // return_stat ::= RETURN explist 
            {
              Object RESULT =null;
		System.out.println("return with explist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("return_stat",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // return_stat ::= RETURN 
            {
              Object RESULT =null;
		System.out.println("return stat");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("return_stat",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // last_stat ::= break_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // last_stat ::= return_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;
		System.out.println("for stat in");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",39, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-6)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_stat ::= FOR VAR_NAME ASSIGN exp COMMA exp COMMA exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",39, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-10)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_stat ::= FOR VAR_NAME ASSIGN exp COMMA exp DO block END 
            {
              Object RESULT =null;
		System.out.println("for stat");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",39, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-8)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_recoursive ::= ELSEIF exp THEN block if_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_recoursive",41, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_recoursive ::= ELSEIF exp THEN block 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_recoursive",41, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_stat ::= IF exp THEN block if_recoursive ELSE block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",40, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-7)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stat ::= IF exp THEN block ELSE block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",40, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-6)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stat ::= IF exp THEN block if_recoursive END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",40, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-5)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stat ::= IF exp THEN block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",40, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stat ::= LOCAL namelist ASSIGN explist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL namelist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL FUNCTION VAR_NAME funcbody 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;
		System.out.println("found Function stat"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= for_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= if_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= functioncall 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= varlist ASSIGN explist 
            {
              Object RESULT =null;
		System.out.println("varlist assign explist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // block ::= chunk 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stat_recoursive ::= stat SEMI stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat_recoursive ::= stat stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stat_recoursive ::= stat SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stat_recoursive ::= stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // chunk ::= 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= last_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat_recoursive last_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).value;
		RESULT = start_val;
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaGrammarCup$parser.done_parsing();
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // chunk ::= stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

