
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 05 17:16:46 CET 2011
//----------------------------------------------------

package luaGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 05 17:16:46 CET 2011
  */
public class LuaGrammarCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaGrammarCup() {super();}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\004\003\000\002" +
    "\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\004\006\005\007\001\002\000\004\002" +
    "\022\001\002\000\006\002\001\016\021\001\002\000\004" +
    "\005\014\001\002\000\012\010\012\017\013\020\011\021" +
    "\010\001\002\000\006\002\ufff7\016\ufff7\001\002\000\006" +
    "\002\ufff8\016\ufff8\001\002\000\006\002\ufffa\016\ufffa\001" +
    "\002\000\006\002\ufff9\016\ufff9\001\002\000\012\004\020" +
    "\007\017\010\015\017\016\001\002\000\006\002\ufffc\016" +
    "\ufffc\001\002\000\006\002\ufffb\016\ufffb\001\002\000\006" +
    "\002\ufffd\016\ufffd\001\002\000\006\002\ufffe\016\ufffe\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaGrammarCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaGrammarCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaGrammarCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaGrammarCup$actions {



  private final LuaGrammarCup parser;

  /** Constructor */
  CUP$LuaGrammarCup$actions(LuaGrammarCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaGrammarCup$do_action(
    int                        CUP$LuaGrammarCup$act_num,
    java_cup.runtime.lr_parser CUP$LuaGrammarCup$parser,
    java.util.Stack            CUP$LuaGrammarCup$stack,
    int                        CUP$LuaGrammarCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaGrammarCup$result;

      /* select the action based on the action number */
      switch (CUP$LuaGrammarCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comment ::= LINE_COMMENT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("comment",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comment ::= COMMENT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("comment",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr ::= ASSIGN LONGSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expr ::= ASSIGN CHARSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr ::= ASSIGN NORMALSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= ASSIGN EXP 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= VAR_NAME ASSIGN NORMALSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= VAR_NAME ASSIGN EXP 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= VAR_NAME ASSIGN FLOAT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= VAR_NAME ASSIGN VAR_NAME 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement ::= expr SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).value;
		RESULT = start_val;
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaGrammarCup$parser.done_parsing();
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // statement ::= expr 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

