
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Dec 10 18:24:17 CET 2011
//----------------------------------------------------

package luaGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Dec 10 18:24:17 CET 2011
  */
public class LuaGrammarCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public LuaGrammarCup() {super();}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public LuaGrammarCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\044\003\000\002\044\004" +
    "\000\002\044\004\000\002\044\005\000\002\003\003\000" +
    "\002\004\005\000\002\004\003\000\002\004\005\000\002" +
    "\004\007\000\002\004\006\000\002\004\003\000\002\004" +
    "\003\000\002\004\005\000\002\004\006\000\002\004\004" +
    "\000\002\004\006\000\002\054\007\000\002\054\010\000" +
    "\002\054\011\000\002\054\012\000\002\055\006\000\002" +
    "\055\007\000\002\053\013\000\002\053\015\000\002\053" +
    "\011\000\002\013\003\000\002\013\004\000\002\013\003" +
    "\000\002\013\004\000\002\013\005\000\002\013\004\000" +
    "\002\021\004\000\002\021\006\000\002\056\002\000\002" +
    "\056\005\000\002\035\003\000\002\035\005\000\002\030" +
    "\003\000\002\030\006\000\002\030\005\000\002\051\003" +
    "\000\002\051\005\000\002\016\003\000\002\047\003\000" +
    "\002\047\005\000\002\007\003\000\002\050\003\000\002" +
    "\050\005\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\004\000\002\027\003\000\002\027\003\000\002" +
    "\023\004\000\002\023\006\000\002\034\004\000\002\034" +
    "\005\000\002\034\003\000\002\034\003\000\002\020\004" +
    "\000\002\017\006\000\002\017\007\000\002\022\003\000" +
    "\002\022\005\000\002\022\003\000\002\041\004\000\002" +
    "\041\005\000\002\024\003\000\002\024\005\000\002\040" +
    "\007\000\002\040\005\000\002\040\003\000\002\025\003" +
    "\000\002\025\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\024\002\ufffe\004\016\060\020\061\004\062" +
    "\007\063\021\065\005\067\015\073\013\001\002\000\042" +
    "\004\016\006\045\007\060\010\057\021\026\022\037\023" +
    "\027\025\066\043\056\044\050\045\064\046\052\047\055" +
    "\050\043\056\036\060\053\001\002\000\024\004\016\060" +
    "\020\061\004\062\007\063\021\065\005\066\ufffe\067\015" +
    "\073\013\001\002\000\042\002\ufff2\004\ufff2\016\ufff2\060" +
    "\ufff2\061\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2" +
    "\067\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\001" +
    "\002\000\006\004\244\017\116\001\002\000\062\002\ufff7" +
    "\004\ufff7\016\ufff7\020\uffc2\021\uffc2\022\uffc2\023\uffc2\051" +
    "\uffc2\052\uffc2\054\uffc2\056\uffc2\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002\000\042\002\ufff3" +
    "\004\ufff3\016\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\072\ufff3\073\ufff3" +
    "\074\ufff3\075\ufff3\001\002\000\042\002\ufffd\004\016\016" +
    "\240\060\020\061\004\062\007\063\021\064\ufffd\065\005" +
    "\066\ufffd\067\015\070\ufffd\072\ufffd\073\013\074\ufffd\075" +
    "\ufffd\001\002\000\010\004\122\017\116\060\233\001\002" +
    "\000\004\005\230\001\002\000\042\004\016\006\045\007" +
    "\060\010\057\021\026\022\037\023\027\025\066\043\056" +
    "\044\050\045\064\046\052\047\055\050\043\056\036\060" +
    "\053\001\002\000\124\002\uffd8\004\uffd8\005\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\041\uffd8\042\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\071" +
    "\uffd8\072\uffd8\073\uffd8\074\uffd8\075\uffd8\001\002\000\004" +
    "\002\206\001\002\000\004\004\176\001\002\000\024\004" +
    "\016\060\020\061\004\062\007\063\021\064\ufffe\065\005" +
    "\067\015\073\013\001\002\000\020\002\001\064\001\066" +
    "\001\070\001\072\001\074\164\075\166\001\002\000\026" +
    "\005\uffda\017\162\020\uffc3\021\uffc3\022\uffc3\023\uffc3\051" +
    "\uffc3\052\uffc3\054\uffc3\056\uffc3\001\002\000\022\020\031" +
    "\021\026\022\037\023\027\051\025\052\035\054\034\056" +
    "\036\001\002\000\004\004\160\001\002\000\122\002\uff9b" +
    "\004\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\041\uff9b\042\uff9b\051\uff9b\052" +
    "\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b" +
    "\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b\067" +
    "\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b" +
    "\001\002\000\122\002\uff99\004\uff99\016\uff99\017\uff99\020" +
    "\uff99\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99" +
    "\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99\034\uff99\041" +
    "\uff99\042\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99" +
    "\056\uff99\057\uff99\060\uff99\061\uff99\062\uff99\063\uff99\064" +
    "\uff99\065\uff99\066\uff99\067\uff99\070\uff99\071\uff99\072\uff99" +
    "\073\uff99\074\uff99\075\uff99\001\002\000\122\002\uffbc\004" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\uffbc\041\uffbc\042\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\001" +
    "\002\000\004\004\157\001\002\000\122\002\uffc1\004\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\041\uffc1\042\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070" +
    "\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\001\002" +
    "\000\122\002\uffbd\004\uffbd\016\uffbd\017\uffbd\020\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\041\uffbd\042" +
    "\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd" +
    "\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd" +
    "\074\uffbd\075\uffbd\001\002\000\042\004\016\006\045\007" +
    "\060\010\057\021\026\022\037\023\027\025\066\043\056" +
    "\044\050\045\064\046\052\047\055\050\043\056\036\060" +
    "\053\001\002\000\044\004\016\006\045\007\060\010\057" +
    "\021\026\022\037\023\027\025\066\043\056\044\050\045" +
    "\064\046\052\047\055\050\043\053\146\056\036\060\053" +
    "\001\002\000\046\004\062\006\045\007\060\010\057\021" +
    "\026\022\037\023\027\025\066\043\056\044\050\045\064" +
    "\046\052\047\055\050\043\054\047\056\036\057\046\060" +
    "\053\001\002\000\122\002\uff9a\004\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a" +
    "\041\uff9a\042\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\001\002\000\102\002\uffc9" +
    "\004\uffc9\016\uffc9\017\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\041\uffc9" +
    "\042\uffc9\053\uffc9\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000" +
    "\010\016\144\017\142\057\uffb3\001\002\000\102\002\uffca" +
    "\004\uffca\016\uffca\017\uffca\024\uffca\025\uffca\026\uffca\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\041\uffca" +
    "\042\uffca\053\uffca\055\uffca\057\uffca\060\uffca\061\uffca\062" +
    "\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\071\uffca\072\uffca\073\uffca\074\uffca\075\uffca\001\002\000" +
    "\042\004\uff9f\006\uff9f\007\uff9f\010\uff9f\021\uff9f\022\uff9f" +
    "\023\uff9f\025\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\056\uff9f\060\uff9f\001\002\000\054\002\uffd0" +
    "\004\uffd0\016\uffd0\017\uffd0\053\uffd0\055\uffd0\057\uffd0\060" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\102\002\uff9c\004\uff9c\016\uff9c\017\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032" +
    "\uff9c\033\uff9c\034\uff9c\041\uff9c\042\uff9c\053\uff9c\055\uff9c" +
    "\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c\065" +
    "\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073\uff9c" +
    "\074\uff9c\075\uff9c\001\002\000\122\002\uffb5\004\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\041\uffb5\042\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062" +
    "\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5" +
    "\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000" +
    "\042\004\016\006\045\007\060\010\057\021\026\022\037" +
    "\023\027\025\066\043\056\044\050\045\064\046\052\047" +
    "\055\050\043\056\036\060\053\001\002\000\042\004\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\021\uffa0\022\uffa0\023\uffa0\025" +
    "\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0" +
    "\056\uffa0\060\uffa0\001\002\000\102\002\uffc8\004\uffc8\016" +
    "\uffc8\017\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\041\uffc8\042\uffc8\053" +
    "\uffc8\055\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072" +
    "\uffc8\073\uffc8\074\uffc8\075\uffc8\001\002\000\102\002\uffcb" +
    "\004\uffcb\016\uffcb\017\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\041\uffcb" +
    "\042\uffcb\053\uffcb\055\uffcb\057\uffcb\060\uffcb\061\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb" +
    "\071\uffcb\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000" +
    "\004\052\115\001\002\000\010\016\uffaf\017\uffaf\057\uffaf" +
    "\001\002\000\102\002\uffc5\004\uffc5\016\uffc5\017\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\041\uffc5\042\uffc5\053\uffc5\055\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\001\002\000\102\002\uffcd\004\uffcd\016\uffcd" +
    "\017\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\041\uffcd\042\uffcd\053\uffcd" +
    "\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd" +
    "\073\uffcd\074\uffcd\075\uffcd\001\002\000\102\002\uff9e\004" +
    "\uff9e\016\uff9e\017\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\041\uff9e\042" +
    "\uff9e\053\uff9e\055\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e\001\002\000\102" +
    "\002\uff9d\004\uff9d\016\uff9d\017\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\041\uff9d\042\uff9d\053\uff9d\055\uff9d\057\uff9d\060\uff9d\061" +
    "\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d" +
    "\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\001" +
    "\002\000\122\002\uffc2\004\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\041\uffc2" +
    "\042\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\075\uffc2\001\002\000\060\005\112\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\041\uffd8\042\uffd8\051\uffd8\052\uffd8\054\uffd8\056" +
    "\uffd8\057\uffd8\001\002\000\042\004\016\006\045\007\060" +
    "\010\057\021\026\022\037\023\027\025\066\043\056\044" +
    "\050\045\064\046\052\047\055\050\043\056\036\060\053" +
    "\001\002\000\102\002\uffcc\004\uffcc\016\uffcc\017\uffcc\024" +
    "\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\041\uffcc\042\uffcc\053\uffcc\055\uffcc\057" +
    "\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc" +
    "\066\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074" +
    "\uffcc\075\uffcc\001\002\000\102\002\uffc6\004\uffc6\016\uffc6" +
    "\017\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\041\uffc6\042\uffc6\053\uffc6" +
    "\055\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064" +
    "\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\075\uffc6\001\002\000\042\004\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\021\uffa1\022\uffa1\023\uffa1\025\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\056" +
    "\uffa1\060\uffa1\001\002\000\122\002\uffc7\004\uffc7\016\uffc7" +
    "\017\uffc7\020\031\021\026\022\037\023\027\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\041\uffc7\042\uffc7\051\025\052\035\053\uffc7\054" +
    "\034\055\uffc7\056\036\057\uffc7\060\uffc7\061\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071" +
    "\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\001\002\000\004" +
    "\057\110\001\002\000\122\002\uffc3\004\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\041\uffc3\042\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\001\002\000\102\002" +
    "\uffcf\004\uffcf\016\uffcf\017\uffcf\024\101\025\073\026\077" +
    "\027\075\030\100\031\104\032\103\033\076\034\105\041" +
    "\074\042\106\053\uffcf\055\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\001\002" +
    "\000\042\004\uffab\006\uffab\007\uffab\010\uffab\021\uffab\022" +
    "\uffab\023\uffab\025\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\056\uffab\060\uffab\001\002\000\042\004" +
    "\uffa3\006\uffa3\007\uffa3\010\uffa3\021\uffa3\022\uffa3\023\uffa3" +
    "\025\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\056\uffa3\060\uffa3\001\002\000\042\004\uffa9\006\uffa9" +
    "\007\uffa9\010\uffa9\021\uffa9\022\uffa9\023\uffa9\025\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\056\uffa9" +
    "\060\uffa9\001\002\000\042\004\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\021\uffa5\022\uffa5\023\uffa5\025\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\056\uffa5\060\uffa5\001" +
    "\002\000\042\004\uffaa\006\uffaa\007\uffaa\010\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\025\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\047\uffaa\050\uffaa\056\uffaa\060\uffaa\001\002\000\042" +
    "\004\uffa7\006\uffa7\007\uffa7\010\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\025\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\056\uffa7\060\uffa7\001\002\000\042\004\uffac\006" +
    "\uffac\007\uffac\010\uffac\021\uffac\022\uffac\023\uffac\025\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\056" +
    "\uffac\060\uffac\001\002\000\042\004\016\006\045\007\060" +
    "\010\057\021\026\022\037\023\027\025\066\043\056\044" +
    "\050\045\064\046\052\047\055\050\043\056\036\060\053" +
    "\001\002\000\042\004\uffa6\006\uffa6\007\uffa6\010\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\025\uffa6\043\uffa6\044\uffa6\045\uffa6" +
    "\046\uffa6\047\uffa6\050\uffa6\056\uffa6\060\uffa6\001\002\000" +
    "\042\004\uffa8\006\uffa8\007\uffa8\010\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\025\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\056\uffa8\060\uffa8\001\002\000\042\004\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\021\uffa4\022\uffa4\023\uffa4\025" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4" +
    "\056\uffa4\060\uffa4\001\002\000\042\004\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\021\uffa2\022\uffa2\023\uffa2\025\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\056\uffa2\060" +
    "\uffa2\001\002\000\054\002\uffce\004\uffce\016\uffce\017\uffce" +
    "\053\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce" +
    "\072\uffce\073\uffce\074\uffce\075\uffce\001\002\000\122\002" +
    "\uffb4\004\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031" +
    "\uffb4\032\uffb4\033\uffb4\034\uffb4\041\uffb4\042\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075" +
    "\uffb4\001\002\000\102\002\uffc4\004\uffc4\016\uffc4\017\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\041\uffc4\042\uffc4\053\uffc4\055\uffc4" +
    "\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4" +
    "\074\uffc4\075\uffc4\001\002\000\042\004\016\006\045\007" +
    "\060\010\057\021\026\022\037\023\027\025\066\043\056" +
    "\044\050\045\064\046\052\047\055\050\043\056\036\060" +
    "\053\001\002\000\010\016\uffb0\017\uffb0\057\uffb0\001\002" +
    "\000\102\002\uffbb\004\uffbb\016\uffbb\017\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\041\uffbb\042\uffbb\053\uffbb\055\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\001\002\000\012\004\122\017\116\047\121\053\120" +
    "\001\002\000\004\004\134\001\002\000\006\017\132\053" +
    "\uffb8\001\002\000\024\004\016\060\020\061\004\062\007" +
    "\063\021\064\ufffe\065\005\067\015\073\013\001\002\000" +
    "\004\053\uffb6\001\002\000\052\002\uffd5\004\uffd5\005\uffd5" +
    "\016\uffd5\017\uffd5\053\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\075\uffd5\076\uffd5\001\002\000\004\053" +
    "\124\001\002\000\024\004\016\060\020\061\004\062\007" +
    "\063\021\064\ufffe\065\005\067\015\073\013\001\002\000" +
    "\004\064\127\001\002\000\012\064\ufff9\066\ufff9\070\ufff9" +
    "\072\ufff9\001\002\000\102\002\uffb9\004\uffb9\016\uffb9\017" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\041\uffb9\042\uffb9\053\uffb9\055" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\001\002\000\004\064\131\001\002" +
    "\000\102\002\uffba\004\uffba\016\uffba\017\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\041\uffba\042\uffba\053\uffba\055\uffba\057\uffba\060" +
    "\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\001\002\000\004\047\133\001\002\000\004\053\uffb7" +
    "\001\002\000\006\004\122\017\116\001\002\000\052\002" +
    "\uffd4\004\uffd4\005\uffd4\016\uffd4\017\uffd4\053\uffd4\060\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\067" +
    "\uffd4\070\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4\076\uffd4" +
    "\001\002\000\004\055\137\001\002\000\004\005\140\001" +
    "\002\000\042\004\016\006\045\007\060\010\057\021\026" +
    "\022\037\023\027\025\066\043\056\044\050\045\064\046" +
    "\052\047\055\050\043\056\036\060\053\001\002\000\010" +
    "\016\uffb1\017\uffb1\057\uffb1\001\002\000\044\004\uffad\006" +
    "\uffad\007\uffad\010\uffad\021\uffad\022\uffad\023\uffad\025\uffad" +
    "\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\054" +
    "\uffad\056\uffad\060\uffad\001\002\000\044\004\062\006\045" +
    "\007\060\010\057\021\026\022\037\023\027\025\066\043" +
    "\056\044\050\045\064\046\052\047\055\050\043\054\047" +
    "\056\036\060\053\001\002\000\044\004\uffae\006\uffae\007" +
    "\uffae\010\uffae\021\uffae\022\uffae\023\uffae\025\uffae\043\uffae" +
    "\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\054\uffae\056" +
    "\uffae\060\uffae\001\002\000\004\057\uffb2\001\002\000\122" +
    "\002\uffbf\004\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\041\uffbf\042\uffbf\051" +
    "\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf" +
    "\075\uffbf\001\002\000\004\053\154\001\002\000\046\002" +
    "\uffd2\004\uffd2\016\uffd2\017\152\053\uffd2\060\uffd2\061\uffd2" +
    "\062\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070" +
    "\uffd2\072\uffd2\073\uffd2\074\uffd2\075\uffd2\001\002\000\044" +
    "\002\uffd3\004\uffd3\016\uffd3\053\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3\070\uffd3" +
    "\072\uffd3\073\uffd3\074\uffd3\075\uffd3\001\002\000\042\004" +
    "\016\006\045\007\060\010\057\021\026\022\037\023\027" +
    "\025\066\043\056\044\050\045\064\046\052\047\055\050" +
    "\043\056\036\060\053\001\002\000\044\002\uffd1\004\uffd1" +
    "\016\uffd1\053\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072\uffd1\073\uffd1" +
    "\074\uffd1\075\uffd1\001\002\000\122\002\uffbe\004\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\041\uffbe\042\uffbe\051\uffbe\052\uffbe\053\uffbe" +
    "\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002\000" +
    "\004\055\156\001\002\000\124\002\uffd7\004\uffd7\005\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\041\uffd7\042\uffd7\051\uffd7\052\uffd7\053" +
    "\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7" +
    "\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070" +
    "\uffd7\071\uffd7\072\uffd7\073\uffd7\074\uffd7\075\uffd7\001\002" +
    "\000\124\002\uffd6\004\uffd6\005\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\041" +
    "\uffd6\042\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\001\002\000\014\021\026\022" +
    "\037\023\027\052\035\056\036\001\002\000\122\002\uffc0" +
    "\004\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\032\uffc0\033\uffc0\034\uffc0\041\uffc0\042\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0" +
    "\001\002\000\004\004\016\001\002\000\004\005\uffd9\001" +
    "\002\000\056\002\uffe4\004\016\006\045\007\060\010\057" +
    "\016\171\021\026\022\037\023\027\025\066\043\056\044" +
    "\050\045\064\046\052\047\055\050\043\056\036\060\053" +
    "\064\uffe4\066\uffe4\070\uffe4\072\uffe4\001\002\000\014\002" +
    "\uffff\064\uffff\066\uffff\070\uffff\072\uffff\001\002\000\016" +
    "\002\uffe2\016\167\064\uffe2\066\uffe2\070\uffe2\072\uffe2\001" +
    "\002\000\014\002\uffdf\064\uffdf\066\uffdf\070\uffdf\072\uffdf" +
    "\001\002\000\016\002\uffe3\016\172\064\uffe3\066\uffe3\070" +
    "\uffe3\072\uffe3\001\002\000\014\002\uffe1\064\uffe1\066\uffe1" +
    "\070\uffe1\072\uffe1\001\002\000\014\002\uffe0\064\uffe0\066" +
    "\uffe0\070\uffe0\072\uffe0\001\002\000\004\064\174\001\002" +
    "\000\042\002\ufff6\004\ufff6\016\ufff6\060\ufff6\061\ufff6\062" +
    "\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002\000\004\052" +
    "\115\001\002\000\010\020\200\051\uffdc\052\uffdc\001\002" +
    "\000\006\051\203\052\uffde\001\002\000\004\004\201\001" +
    "\002\000\010\020\200\051\uffdc\052\uffdc\001\002\000\006" +
    "\051\uffdb\052\uffdb\001\002\000\004\004\204\001\002\000" +
    "\004\052\uffdd\001\002\000\042\002\ufff1\004\ufff1\016\ufff1" +
    "\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1" +
    "\001\002\000\004\002\000\001\002\000\004\071\210\001" +
    "\002\000\030\004\016\060\020\061\004\062\007\063\021" +
    "\064\ufffe\065\005\067\015\070\ufffe\072\ufffe\073\013\001" +
    "\002\000\010\064\214\070\213\072\212\001\002\000\024" +
    "\004\016\060\020\061\004\062\007\063\021\064\ufffe\065" +
    "\005\067\015\073\013\001\002\000\042\004\016\006\045" +
    "\007\060\010\057\021\026\022\037\023\027\025\066\043" +
    "\056\044\050\045\064\046\052\047\055\050\043\056\036" +
    "\060\053\001\002\000\042\002\uffed\004\uffed\016\uffed\060" +
    "\uffed\061\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\070\uffed\072\uffed\073\uffed\074\uffed\075\uffed\001" +
    "\002\000\006\064\217\072\216\001\002\000\024\004\016" +
    "\060\020\061\004\062\007\063\021\064\ufffe\065\005\067" +
    "\015\073\013\001\002\000\042\002\uffec\004\uffec\016\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\072\uffec\073\uffec\074\uffec\075\uffec" +
    "\001\002\000\004\064\221\001\002\000\042\002\uffea\004" +
    "\uffea\016\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea" +
    "\065\uffea\066\uffea\067\uffea\070\uffea\072\uffea\073\uffea\074" +
    "\uffea\075\uffea\001\002\000\004\071\223\001\002\000\030" +
    "\004\016\060\020\061\004\062\007\063\021\064\ufffe\065" +
    "\005\067\015\070\ufffe\072\ufffe\073\013\001\002\000\010" +
    "\064\uffe9\070\213\072\uffe9\001\002\000\006\064\uffe8\072" +
    "\uffe8\001\002\000\004\064\227\001\002\000\042\002\uffeb" +
    "\004\uffeb\016\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064" +
    "\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\072\uffeb\073\uffeb" +
    "\074\uffeb\075\uffeb\001\002\000\042\004\016\006\045\007" +
    "\060\010\057\021\026\022\037\023\027\025\066\043\056" +
    "\044\050\045\064\046\052\047\055\050\043\056\036\060" +
    "\053\001\002\000\042\002\ufff8\004\ufff8\016\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8\001\002" +
    "\000\044\002\uffef\004\uffef\005\236\016\uffef\060\uffef\061" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\072\uffef\073\uffef\074\uffef\075\uffef\001\002\000" +
    "\004\004\234\001\002\000\004\052\115\001\002\000\042" +
    "\002\ufff0\004\ufff0\016\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\072\ufff0" +
    "\073\ufff0\074\ufff0\075\ufff0\001\002\000\042\004\016\006" +
    "\045\007\060\010\057\021\026\022\037\023\027\025\066" +
    "\043\056\044\050\045\064\046\052\047\055\050\043\056" +
    "\036\060\053\001\002\000\042\002\uffee\004\uffee\016\uffee" +
    "\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066" +
    "\uffee\067\uffee\070\uffee\072\uffee\073\uffee\074\uffee\075\uffee" +
    "\001\002\000\040\002\ufffc\004\016\060\020\061\004\062" +
    "\007\063\021\064\ufffc\065\005\066\ufffc\067\015\070\ufffc" +
    "\072\ufffc\073\013\074\ufffc\075\ufffc\001\002\000\020\002" +
    "\ufffb\064\ufffb\066\ufffb\070\ufffb\072\ufffb\074\ufffb\075\ufffb" +
    "\001\002\000\020\002\ufffa\064\ufffa\066\ufffa\070\ufffa\072" +
    "\ufffa\074\ufffa\075\ufffa\001\002\000\004\076\261\001\002" +
    "\000\006\005\245\076\uffd5\001\002\000\042\004\016\006" +
    "\045\007\060\010\057\021\026\022\037\023\027\025\066" +
    "\043\056\044\050\045\064\046\052\047\055\050\043\056" +
    "\036\060\053\001\002\000\004\017\247\001\002\000\042" +
    "\004\016\006\045\007\060\010\057\021\026\022\037\023" +
    "\027\025\066\043\056\044\050\045\064\046\052\047\055" +
    "\050\043\056\036\060\053\001\002\000\006\017\251\063" +
    "\252\001\002\000\042\004\016\006\045\007\060\010\057" +
    "\021\026\022\037\023\027\025\066\043\056\044\050\045" +
    "\064\046\052\047\055\050\043\056\036\060\053\001\002" +
    "\000\024\004\016\060\020\061\004\062\007\063\021\064" +
    "\ufffe\065\005\067\015\073\013\001\002\000\004\064\254" +
    "\001\002\000\042\002\uffe7\004\uffe7\016\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7" +
    "\070\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\001\002\000" +
    "\004\063\256\001\002\000\024\004\016\060\020\061\004" +
    "\062\007\063\021\064\ufffe\065\005\067\015\073\013\001" +
    "\002\000\004\064\260\001\002\000\042\002\uffe6\004\uffe6" +
    "\016\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\075\uffe6\001\002\000\042\004\016\006\045\007\060\010" +
    "\057\021\026\022\037\023\027\025\066\043\056\044\050" +
    "\045\064\046\052\047\055\050\043\056\036\060\053\001" +
    "\002\000\004\063\263\001\002\000\024\004\016\060\020" +
    "\061\004\062\007\063\021\064\ufffe\065\005\067\015\073" +
    "\013\001\002\000\004\064\265\001\002\000\042\002\uffe5" +
    "\004\uffe5\016\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\073\uffe5" +
    "\074\uffe5\075\uffe5\001\002\000\004\066\267\001\002\000" +
    "\042\004\016\006\045\007\060\010\057\021\026\022\037" +
    "\023\027\025\066\043\056\044\050\045\064\046\052\047" +
    "\055\050\043\056\036\060\053\001\002\000\042\002\ufff4" +
    "\004\ufff4\016\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\001\002\000\004\063\272\001\002\000" +
    "\024\004\016\060\020\061\004\062\007\063\021\064\ufffe" +
    "\065\005\067\015\073\013\001\002\000\004\064\274\001" +
    "\002\000\042\002\ufff5\004\ufff5\016\ufff5\060\ufff5\061\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\024\002\016\004\011\023\007\027\023\030" +
    "\022\035\013\044\021\053\005\054\010\001\001\000\030" +
    "\007\270\012\062\014\041\015\037\020\050\023\060\027" +
    "\066\030\070\041\064\046\071\050\043\001\001\000\026" +
    "\002\125\003\265\004\011\023\007\027\023\030\022\035" +
    "\013\044\021\053\005\054\010\001\001\000\002\001\001" +
    "\000\004\051\242\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\011\023\007\027\023\030\022\035\013" +
    "\044\240\053\005\054\010\001\001\000\004\051\231\001" +
    "\001\000\002\001\001\000\030\007\206\012\062\014\041" +
    "\015\037\020\050\023\060\027\066\030\070\041\064\046" +
    "\071\050\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\174\001\001\000\026\002\125\003\172\004" +
    "\011\023\007\027\023\030\022\035\013\044\021\053\005" +
    "\054\010\001\001\000\004\013\164\001\001\000\002\001" +
    "\001\000\010\015\027\034\031\041\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\154\012\062\014\041\015\037\020\050\023" +
    "\060\027\066\030\070\041\064\046\071\050\043\001\001" +
    "\000\034\007\147\012\062\014\041\015\037\016\146\020" +
    "\050\023\060\027\066\030\070\041\064\046\071\047\150" +
    "\050\043\001\001\000\034\007\053\012\062\014\041\015" +
    "\037\020\050\023\060\024\067\027\066\030\070\040\040" +
    "\041\064\046\071\050\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\135\012\062\014\041\015\037" +
    "\020\050\023\060\027\066\030\070\041\064\046\071\050" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\012" +
    "\062\014\041\015\037\020\050\023\060\027\066\030\070" +
    "\041\064\046\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\027\034\031\041\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\012\062\014\041\015\037" +
    "\020\050\023\060\027\066\030\070\041\064\046\071\050" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\112\012\062\014\041" +
    "\015\037\020\050\023\060\027\066\030\070\041\064\046" +
    "\071\050\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\122\051\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\125\003\127\004\011\023\007" +
    "\027\023\030\022\035\013\044\021\053\005\054\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\125\003\124\004\011\023\007\027\023\030" +
    "\022\035\013\044\021\053\005\054\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\140\012\062\014\041" +
    "\015\037\020\050\023\060\027\066\030\070\041\064\046" +
    "\071\050\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\007\053\012\062\014\041\015\037\020\050\023" +
    "\060\024\144\027\066\030\070\040\040\041\064\046\071" +
    "\050\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\007\147\012\062\014\041\015\037\020" +
    "\050\023\060\027\066\030\070\041\064\046\071\047\152" +
    "\050\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\027\034\160\041\032\001\001\000\002\001\001\000" +
    "\012\023\060\027\023\030\022\035\162\001\001\000\002" +
    "\001\001\000\034\007\147\012\062\014\041\015\037\016" +
    "\167\020\050\023\060\027\066\030\070\041\064\046\071" +
    "\047\150\050\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\204\001\001\000\004\056\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\125\003\210\004\011\023\007\027\023\030\022\035\013" +
    "\044\021\053\005\054\010\001\001\000\004\055\214\001" +
    "\001\000\026\002\125\003\225\004\011\023\007\027\023" +
    "\030\022\035\013\044\021\053\005\054\010\001\001\000" +
    "\030\007\221\012\062\014\041\015\037\020\050\023\060" +
    "\027\066\030\070\041\064\046\071\050\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\125\003\217" +
    "\004\011\023\007\027\023\030\022\035\013\044\021\053" +
    "\005\054\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\125\003" +
    "\223\004\011\023\007\027\023\030\022\035\013\044\021" +
    "\053\005\054\010\001\001\000\004\055\224\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\147\012\062\014\041\015\037\016\230\020\050\023" +
    "\060\027\066\030\070\041\064\046\071\047\150\050\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\234\001\001\000\002\001\001\000\034" +
    "\007\147\012\062\014\041\015\037\016\236\020\050\023" +
    "\060\027\066\030\070\041\064\046\071\047\150\050\043" +
    "\001\001\000\002\001\001\000\022\004\011\023\007\027" +
    "\023\030\022\035\013\044\241\053\005\054\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\245\012\062\014\041\015\037" +
    "\020\050\023\060\027\066\030\070\041\064\046\071\050" +
    "\043\001\001\000\002\001\001\000\030\007\247\012\062" +
    "\014\041\015\037\020\050\023\060\027\066\030\070\041" +
    "\064\046\071\050\043\001\001\000\002\001\001\000\030" +
    "\007\254\012\062\014\041\015\037\020\050\023\060\027" +
    "\066\030\070\041\064\046\071\050\043\001\001\000\026" +
    "\002\125\003\252\004\011\023\007\027\023\030\022\035" +
    "\013\044\021\053\005\054\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\002\125\003" +
    "\256\004\011\023\007\027\023\030\022\035\013\044\021" +
    "\053\005\054\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\007\147\012\062\014\041\015\037\016\261" +
    "\020\050\023\060\027\066\030\070\041\064\046\071\047" +
    "\150\050\043\001\001\000\002\001\001\000\026\002\125" +
    "\003\263\004\011\023\007\027\023\030\022\035\013\044" +
    "\021\053\005\054\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\267\012\062\014" +
    "\041\015\037\020\050\023\060\027\066\030\070\041\064" +
    "\046\071\050\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\125\003\272\004\011\023\007\027\023" +
    "\030\022\035\013\044\021\053\005\054\010\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$LuaGrammarCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$LuaGrammarCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$LuaGrammarCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$LuaGrammarCup$actions {



  private final LuaGrammarCup parser;

  /** Constructor */
  CUP$LuaGrammarCup$actions(LuaGrammarCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$LuaGrammarCup$do_action(
    int                        CUP$LuaGrammarCup$act_num,
    java_cup.runtime.lr_parser CUP$LuaGrammarCup$parser,
    java.util.Stack            CUP$LuaGrammarCup$stack,
    int                        CUP$LuaGrammarCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$LuaGrammarCup$result;

      /* select the action based on the action number */
      switch (CUP$LuaGrammarCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // string ::= LONGSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // string ::= CHARSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // string ::= NORMALSTRING 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("string",11, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // number ::= INT 
            {
              Object RESULT =null;
		System.out.println("found INT"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // number ::= FLOAT 
            {
              Object RESULT =null;
		System.out.println("found FLOAT"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // number ::= EXP 
            {
              Object RESULT =null;
		System.out.println("found EXP"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("number",10, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // unop ::= SHARP 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // unop ::= NOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // unop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("unop",8, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // binop ::= OR 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // binop ::= AND 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // binop ::= MINEQ 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // binop ::= MINOR 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // binop ::= DOTDOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // binop ::= MOD 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // binop ::= EXPON 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // binop ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // binop ::= MULT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binop ::= MINUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // binop ::= PLUS 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("binop",7, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // fieldsep ::= COMMA 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // fieldsep ::= SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldsep",19, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // field ::= exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // field ::= VAR_NAME ASSIGN exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // field ::= LBRACK exp RBRACK ASSIGN exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("field",30, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // fieldlist ::= field fieldsep fieldlist 
            {
              Object RESULT =null;
		System.out.println("found fieldlist"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // fieldlist ::= field 
            {
              Object RESULT =null;
		System.out.println("found a field"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("fieldlist",18, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tableconstructor ::= LCURLY fieldlist RCURLY 
            {
              Object RESULT =null;
		 System.out.println("table constructor");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("tableconstructor",31, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tableconstructor ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("tableconstructor",31, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parlist ::= TRIDOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // parlist ::= namelist COMMA TRIDOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parlist ::= namelist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("parlist",16, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcbody ::= LPAREN parlist RPAREN block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcbody",13, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funcbody ::= LPAREN RPAREN block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcbody",13, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // function ::= FUNCTION funcbody 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("function",14, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // args ::= string 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // args ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // args ::= LPAREN explist RPAREN 
            {
              Object RESULT =null;
		System.out.println("args (explist)"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // args ::= LPAREN RPAREN 
            {
              Object RESULT =null;
		System.out.println("args ()"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // functioncall ::= prefixexp COLON VAR_NAME args 
            {
              Object RESULT =null;
		System.out.println("function call"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("functioncall",17, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // functioncall ::= prefixexp args 
            {
              Object RESULT =null;
		System.out.println("function call"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("functioncall",17, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // prefixexp ::= functioncall 
            {
              Object RESULT =null;
		 System.out.println("prefixexp->functioncall"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // prefixexp ::= var 
            {
              Object RESULT =null;
		 System.out.println("prefixexp->var"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("prefixexp",21, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_member ::= unop exp_member 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_member ::= TRIDOT 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp_member ::= tableconstructor 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp_member ::= prefixexp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp_member ::= function 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp_member ::= string 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_member ::= number 
            {
              Object RESULT =null;
		System.out.println("found number");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_member ::= TRUE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_member ::= FALSE 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp_member ::= NIL 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member",36, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp_member_recoursive ::= exp_member binop exp_member_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member_recoursive",38, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_member_recoursive ::= exp_member 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_member_recoursive",38, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp_member_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp",5, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp_recoursive ::= exp COMMA exp_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_recoursive ::= exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",37, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // explist ::= exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("found explist"); 
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("explist",12, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // namelist ::= COMMA VAR_NAME namelist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("namelist",39, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // namelist ::= VAR_NAME 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("namelist",39, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // var ::= prefixexp DOT VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("found var->pref dot varname");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // var ::= prefixexp LBRACK exp RBRACK 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // var ::= VAR_NAME 
            {
              Object RESULT =null;
		System.out.println("found varname");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varlist ::= var COMMA varlist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("varlist",27, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varlist ::= var 
            {
              Object RESULT =null;
		System.out.println("varlist->var");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("varlist",27, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // dot_var_name ::= DOT VAR_NAME dot_var_name 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("dot_var_name",44, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // dot_var_name ::= 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("dot_var_name",44, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcname ::= VAR_NAME dot_var_name COLON VAR_NAME 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // funcname ::= VAR_NAME dot_var_name 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("funcname",15, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // last_stat ::= BREAK SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // last_stat ::= RETURN explist SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // last_stat ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // last_stat ::= BREAK 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // last_stat ::= RETURN explist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // last_stat ::= RETURN 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("last_stat",9, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_stat ::= FOR namelist IN explist DO block END 
            {
              Object RESULT =null;
		System.out.println("for stat in");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",41, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-6)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_stat ::= FOR VAR_NAME ASSIGN exp COMMA exp COMMA exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",41, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-10)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // for_stat ::= FOR VAR_NAME ASSIGN exp COMMA exp DO block END 
            {
              Object RESULT =null;
		System.out.println("for stat");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("for_stat",41, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-8)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_recoursive ::= ELSEIF exp THEN block if_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_recoursive",43, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if_recoursive ::= ELSEIF exp THEN block 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_recoursive",43, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // if_stat ::= IF exp THEN block if_recoursive ELSE block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-7)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if_stat ::= IF exp THEN block ELSE block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-6)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if_stat ::= IF exp THEN block if_recoursive END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-5)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // if_stat ::= IF exp THEN block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("if_stat",42, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stat ::= LOCAL namelist ASSIGN explist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stat ::= LOCAL namelist 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stat ::= LOCAL FUNCTION VAR_NAME funcbody 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stat ::= FUNCTION funcname funcbody 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stat ::= for_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stat ::= if_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stat ::= REPEAT block UNTIL exp 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-3)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stat ::= WHILE exp DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-4)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stat ::= DO block END 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stat ::= functioncall 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stat ::= varlist ASSIGN explist 
            {
              Object RESULT =null;
		System.out.println("varlist assign explist");
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat",2, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // block ::= chunk 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("block",1, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stat_recoursive ::= stat SEMI stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-2)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stat_recoursive ::= stat stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stat_recoursive ::= stat SEMI 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stat_recoursive ::= stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("stat_recoursive",34, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // chunk ::= 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // chunk ::= stat_recoursive last_stat 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= chunk EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)).value;
		RESULT = start_val;
              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.elementAt(CUP$LuaGrammarCup$top-1)), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$LuaGrammarCup$parser.done_parsing();
          return CUP$LuaGrammarCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // chunk ::= stat_recoursive 
            {
              Object RESULT =null;

              CUP$LuaGrammarCup$result = parser.getSymbolFactory().newSymbol("chunk",0, ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$LuaGrammarCup$stack.peek()), RESULT);
            }
          return CUP$LuaGrammarCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

