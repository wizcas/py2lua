
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 26 17:25:18 CET 2011
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 26 17:25:18 CET 2011
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\277\000\002\100\003\000\002\002\004\000\002\101" +
    "\004\000\002\101\004\000\002\101\002\000\002\102\003" +
    "\000\002\114\003\000\002\114\003\000\002\114\003\000" +
    "\002\114\003\000\002\114\003\000\002\114\003\000\002" +
    "\114\003\000\002\114\003\000\002\114\003\000\002\114" +
    "\003\000\002\114\003\000\002\114\003\000\002\114\003" +
    "\000\002\114\003\000\002\114\003\000\002\125\003\000" +
    "\002\127\005\000\002\127\005\000\002\127\004\000\002" +
    "\127\004\000\002\113\004\000\002\113\005\000\002\025" +
    "\003\000\002\025\005\000\002\026\003\000\002\026\005" +
    "\000\002\076\003\000\002\076\005\000\002\107\003\000" +
    "\002\107\005\000\002\110\003\000\002\110\003\000\002" +
    "\110\003\000\002\110\003\000\002\110\003\000\002\110" +
    "\003\000\002\110\003\000\002\110\004\000\002\110\003" +
    "\000\002\110\004\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\010\004" +
    "\000\002\010\005\000\002\006\003\000\002\007\003\000" +
    "\002\007\005\000\002\011\004\000\002\011\005\000\002" +
    "\011\005\000\002\012\004\000\002\013\006\000\002\013" +
    "\007\000\002\015\003\000\002\015\003\000\002\014\003" +
    "\000\002\014\005\000\002\016\003\000\002\016\003\000" +
    "\002\017\004\000\002\017\005\000\002\030\004\000\002" +
    "\031\006\000\002\031\007\000\002\032\003\000\002\032" +
    "\003\000\002\033\004\000\002\033\005\000\002\020\006" +
    "\000\002\021\004\000\002\021\005\000\002\021\005\000" +
    "\002\035\003\000\002\035\005\000\002\035\004\000\002" +
    "\036\005\000\002\037\006\000\002\024\005\000\002\040" +
    "\003\000\002\040\004\000\002\022\005\000\002\022\005" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\041\005\000\002" +
    "\041\005\000\002\041\005\000\002\041\005\000\002\043" +
    "\006\000\002\044\003\000\002\044\003\000\002\051\006" +
    "\000\002\052\006\000\002\047\003\000\002\047\004\000" +
    "\002\047\003\000\002\053\003\000\002\053\003\000\002" +
    "\053\003\000\002\054\003\000\002\054\003\000\002\050" +
    "\005\000\002\046\004\000\002\046\005\000\002\055\003" +
    "\000\002\056\003\000\002\057\003\000\002\060\003\000" +
    "\002\045\005\000\002\045\006\000\002\045\007\000\002" +
    "\045\007\000\002\061\003\000\002\061\005\000\002\061" +
    "\006\000\002\061\012\000\002\061\006\000\002\061\015" +
    "\000\002\061\003\000\002\061\006\000\002\061\006\000" +
    "\002\061\011\000\002\061\004\000\002\061\007\000\002" +
    "\061\007\000\002\061\012\000\002\061\004\000\002\062" +
    "\003\000\002\062\005\000\002\063\003\000\002\063\005" +
    "\000\002\064\005\000\002\066\003\000\002\066\005\000" +
    "\002\072\003\000\002\072\007\000\002\072\007\000\002" +
    "\111\003\000\002\111\007\000\002\005\003\000\002\005" +
    "\003\000\002\112\005\000\002\112\006\000\002\027\005" +
    "\000\002\027\006\000\002\105\003\000\002\105\005\000" +
    "\002\105\005\000\002\073\003\000\002\073\005\000\002" +
    "\074\003\000\002\074\005\000\002\075\003\000\002\075" +
    "\005\000\002\067\003\000\002\067\004\000\002\067\004" +
    "\000\002\067\004\000\002\070\003\000\002\070\005\000" +
    "\002\070\005\000\002\070\005\000\002\070\005\000\002" +
    "\071\003\000\002\071\005\000\002\071\005\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\036\002\ufffd\066\012\070\020\072\016\114" +
    "\021\115\010\116\035\117\017\120\026\121\023\122\022" +
    "\123\024\124\013\125\025\001\002\000\036\002\uffce\066" +
    "\uffce\070\uffce\072\uffce\114\uffce\115\uffce\116\uffce\117\uffce" +
    "\120\uffce\121\uffce\122\uffce\123\uffce\124\uffce\125\uffce\001" +
    "\002\000\036\002\ufffc\066\ufffc\070\ufffc\072\ufffc\114\ufffc" +
    "\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123" +
    "\ufffc\124\ufffc\125\ufffc\001\002\000\036\002\uffcf\066\uffcf" +
    "\070\uffcf\072\uffcf\114\uffcf\115\uffcf\116\uffcf\117\uffcf\120" +
    "\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf\125\uffcf\001\002" +
    "\000\004\002\001\001\002\000\036\002\uff46\066\uff46\070" +
    "\uff46\072\uff46\114\uff46\115\uff46\116\uff46\117\uff46\120\uff46" +
    "\121\uff46\122\uff46\123\uff46\124\uff46\125\uff46\001\002\000" +
    "\036\002\uffcd\066\uffcd\070\uffcd\072\uffcd\114\uffcd\115\uffcd" +
    "\116\uffcd\117\uffcd\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124" +
    "\uffcd\125\uffcd\001\002\000\006\030\050\067\154\001\002" +
    "\000\036\002\uffd3\066\uffd3\070\uffd3\072\uffd3\114\uffd3\115" +
    "\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3\123\uffd3" +
    "\124\uffd3\125\uffd3\001\002\000\036\002\uffca\066\uffca\070" +
    "\uffca\072\uffca\114\uffca\115\uffca\116\uffca\117\uffca\120\uffca" +
    "\121\uffca\122\uffca\123\uffca\124\uffca\125\uffca\001\002\000" +
    "\036\002\uffd1\066\uffd1\070\uffd1\072\uffd1\114\uffd1\115\uffd1" +
    "\116\uffd1\117\uffd1\120\uffd1\121\uffd1\122\uffd1\123\uffd1\124" +
    "\uffd1\125\uffd1\001\002\000\010\030\050\042\143\073\141" +
    "\001\002\000\036\002\uff45\066\uff45\070\uff45\072\uff45\114" +
    "\uff45\115\uff45\116\uff45\117\uff45\120\uff45\121\uff45\122\uff45" +
    "\123\uff45\124\uff45\125\uff45\001\002\000\006\030\050\071" +
    "\054\001\002\000\036\002\uffd0\066\uffd0\070\uffd0\072\uffd0" +
    "\114\uffd0\115\uffd0\116\uffd0\117\uffd0\120\uffd0\121\uffd0\122" +
    "\uffd0\123\uffd0\124\uffd0\125\uffd0\001\002\000\036\002\uff49" +
    "\066\uff49\070\uff49\072\uff49\114\uff49\115\uff49\116\uff49\117" +
    "\uff49\120\uff49\121\uff49\122\uff49\123\uff49\124\uff49\125\uff49" +
    "\001\002\000\036\002\uff43\066\uff43\070\uff43\072\uff43\114" +
    "\uff43\115\uff43\116\uff43\117\uff43\120\uff43\121\uff43\122\uff43" +
    "\123\uff43\124\uff43\125\uff43\001\002\000\036\002\uff48\066" +
    "\uff48\070\uff48\072\uff48\114\uff48\115\uff48\116\uff48\117\uff48" +
    "\120\uff48\121\uff48\122\uff48\123\uff48\124\uff48\125\uff48\001" +
    "\002\000\036\002\ufffd\066\012\070\020\072\016\114\021" +
    "\115\010\116\035\117\017\120\026\121\023\122\022\123" +
    "\024\124\013\125\025\001\002\000\036\002\uff44\066\uff44" +
    "\070\uff44\072\uff44\114\uff44\115\uff44\116\uff44\117\uff44\120" +
    "\uff44\121\uff44\122\uff44\123\uff44\124\uff44\125\uff44\001\002" +
    "\000\004\002\037\001\002\000\036\002\uffd2\066\uffd2\070" +
    "\uffd2\072\uffd2\114\uffd2\115\uffd2\116\uffd2\117\uffd2\120\uffd2" +
    "\121\uffd2\122\uffd2\123\uffd2\124\uffd2\125\uffd2\001\002\000" +
    "\036\002\uffcb\066\uffcb\070\uffcb\072\uffcb\114\uffcb\115\uffcb" +
    "\116\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124" +
    "\uffcb\125\uffcb\001\002\000\036\002\uffcc\066\uffcc\070\uffcc" +
    "\072\uffcc\114\uffcc\115\uffcc\116\uffcc\117\uffcc\120\uffcc\121" +
    "\uffcc\122\uffcc\123\uffcc\124\uffcc\125\uffcc\001\002\000\036" +
    "\002\uffc9\066\uffc9\070\uffc9\072\uffc9\114\uffc9\115\uffc9\116" +
    "\uffc9\117\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9" +
    "\125\uffc9\001\002\000\036\002\ufffd\066\012\070\020\072" +
    "\016\114\021\115\010\116\035\117\017\120\026\121\023" +
    "\122\022\123\024\124\013\125\025\001\002\000\036\002" +
    "\uff47\066\uff47\070\uff47\072\uff47\114\uff47\115\uff47\116\uff47" +
    "\117\uff47\120\uff47\121\uff47\122\uff47\123\uff47\124\uff47\125" +
    "\uff47\001\002\000\004\002\ufffe\001\002\000\004\002\000" +
    "\001\002\000\004\002\uffff\001\002\000\016\021\uff63\062" +
    "\uff63\065\uff63\067\uff63\071\uff63\073\uff63\001\002\000\004" +
    "\071\137\001\002\000\016\021\uff64\062\uff64\065\uff64\067" +
    "\uff64\071\uff64\073\uff64\001\002\000\004\071\136\001\002" +
    "\000\026\004\110\015\uffe3\021\uffe3\024\uffe3\032\uffe3\062" +
    "\uffe3\065\uffe3\067\uffe3\071\uffe3\073\uffe3\001\002\000\026" +
    "\004\uffe1\015\uffe1\021\uffe1\024\uffe1\032\uffe1\062\uffe1\065" +
    "\uffe1\067\uffe1\071\uffe1\073\uffe1\001\002\000\004\071\135" +
    "\001\002\000\004\065\130\001\002\000\010\067\uffc6\071" +
    "\uffc6\073\uffc6\001\002\000\022\021\uff66\024\124\032\106" +
    "\062\uff66\065\uff66\067\uff66\071\uff66\073\uff66\001\002\000" +
    "\012\021\067\062\065\065\070\071\uffc5\001\002\000\036" +
    "\002\uffad\066\uffad\070\uffad\072\uffad\114\uffad\115\uffad\116" +
    "\uffad\117\uffad\120\uffad\121\uffad\122\uffad\123\uffad\124\uffad" +
    "\125\uffad\001\002\000\006\062\060\071\uffaa\001\002\000" +
    "\004\071\057\001\002\000\036\002\uffa2\066\uffa2\070\uffa2" +
    "\072\uffa2\114\uffa2\115\uffa2\116\uffa2\117\uffa2\120\uffa2\121" +
    "\uffa2\122\uffa2\123\uffa2\124\uffa2\125\uffa2\001\002\000\006" +
    "\030\050\071\uffa8\001\002\000\004\071\uffa9\001\002\000" +
    "\004\065\063\001\002\000\004\030\050\001\002\000\006" +
    "\062\uffa7\071\uffa7\001\002\000\004\030\050\001\002\000" +
    "\004\071\uffb5\001\002\000\010\066\073\072\076\124\074" +
    "\001\002\000\004\030\050\001\002\000\010\021\067\062" +
    "\uffa7\071\uffa7\001\002\000\004\071\uffa6\001\002\000\010" +
    "\066\073\072\076\124\074\001\002\000\012\026\uff5e\062" +
    "\uff5e\067\uff5e\073\uff5e\001\002\000\012\026\uffe5\062\116" +
    "\067\uffe5\073\uffe5\001\002\000\010\066\073\072\076\124" +
    "\074\001\002\000\004\026\100\001\002\000\002\001\002" +
    "\000\014\021\067\024\105\032\106\071\uffb4\073\uffb4\001" +
    "\002\000\006\071\uffb3\073\uffb3\001\002\000\006\071\uffb2" +
    "\073\uffb2\001\002\000\006\071\uffb1\073\uffb1\001\002\000" +
    "\002\001\002\000\002\001\002\000\026\004\110\015\uffe2" +
    "\021\uffe2\024\uffe2\032\uffe2\062\uffe2\065\uffe2\067\uffe2\071" +
    "\uffe2\073\uffe2\001\002\000\002\001\002\000\026\004\uffe0" +
    "\015\uffe0\021\uffe0\024\uffe0\032\uffe0\062\uffe0\065\uffe0\067" +
    "\uffe0\071\uffe0\073\uffe0\001\002\000\012\021\067\024\105" +
    "\071\uffb0\073\uffb0\001\002\000\006\071\uffaf\073\uffaf\001" +
    "\002\000\004\073\115\001\002\000\012\026\uff5d\062\uff5d" +
    "\067\uff5d\073\uff5d\001\002\000\010\066\073\072\076\124" +
    "\074\001\002\000\010\026\uffe4\067\uffe4\073\uffe4\001\002" +
    "\000\004\067\121\001\002\000\012\026\uff5c\062\uff5c\067" +
    "\uff5c\073\uff5c\001\002\000\010\067\uffc4\071\uffc4\073\uffc4" +
    "\001\002\000\012\062\065\067\uffc5\071\uffc5\073\uffc5\001" +
    "\002\000\002\001\002\000\006\015\126\032\106\001\002" +
    "\000\004\030\050\001\002\000\016\021\uff65\062\uff65\065" +
    "\uff65\067\uff65\071\uff65\073\uff65\001\002\000\004\030\050" +
    "\001\002\000\004\065\132\001\002\000\004\030\050\001" +
    "\002\000\016\021\uff61\062\uff61\065\uff61\067\uff61\071\uff61" +
    "\073\uff61\001\002\000\016\021\uff62\062\uff62\065\uff62\067" +
    "\uff62\071\uff62\073\uff62\001\002\000\036\002\uffac\066\uffac" +
    "\070\uffac\072\uffac\114\uffac\115\uffac\116\uffac\117\uffac\120" +
    "\uffac\121\uffac\122\uffac\123\uffac\124\uffac\125\uffac\001\002" +
    "\000\036\002\uffab\066\uffab\070\uffab\072\uffab\114\uffab\115" +
    "\uffab\116\uffab\117\uffab\120\uffab\121\uffab\122\uffab\123\uffab" +
    "\124\uffab\125\uffab\001\002\000\036\002\uffa1\066\uffa1\070" +
    "\uffa1\072\uffa1\114\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\121\uffa1\122\uffa1\123\uffa1\124\uffa1\125\uffa1\001\002\000" +
    "\010\021\067\062\065\073\uffc5\001\002\000\036\002\uffc8" +
    "\066\uffc8\070\uffc8\072\uffc8\114\uffc8\115\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\121\uffc8\122\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\001\002\000\004\073\147\001\002\000\006\030\050\073" +
    "\uffa4\001\002\000\004\073\145\001\002\000\036\002\uffc7" +
    "\066\uffc7\070\uffc7\072\uffc7\114\uffc7\115\uffc7\116\uffc7\117" +
    "\uffc7\120\uffc7\121\uffc7\122\uffc7\123\uffc7\124\uffc7\125\uffc7" +
    "\001\002\000\004\073\uffa3\001\002\000\036\002\uffa5\066" +
    "\uffa5\070\uffa5\072\uffa5\114\uffa5\115\uffa5\116\uffa5\117\uffa5" +
    "\120\uffa5\121\uffa5\122\uffa5\123\uffa5\124\uffa5\125\uffa5\001" +
    "\002\000\004\073\151\001\002\000\036\002\uffae\066\uffae" +
    "\070\uffae\072\uffae\114\uffae\115\uffae\116\uffae\117\uffae\120" +
    "\uffae\121\uffae\122\uffae\123\uffae\124\uffae\125\uffae\001\002" +
    "\000\004\067\205\001\002\000\010\021\160\062\065\067" +
    "\uffc5\001\002\000\036\002\uffc3\066\uffc3\070\uffc3\072\uffc3" +
    "\114\uffc3\115\uffc3\116\uffc3\117\uffc3\120\uffc3\121\uffc3\122" +
    "\uffc3\123\uffc3\124\uffc3\125\uffc3\001\002\000\004\067\156" +
    "\001\002\000\036\002\uffc2\066\uffc2\070\uffc2\072\uffc2\114" +
    "\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2\121\uffc2\122\uffc2" +
    "\123\uffc2\124\uffc2\125\uffc2\001\002\000\004\067\uffc0\001" +
    "\002\000\010\066\073\072\076\124\074\001\002\000\004" +
    "\026\162\001\002\000\004\030\163\001\002\000\004\065" +
    "\200\001\002\000\014\021\uffbd\024\uffbd\032\106\062\uffbd" +
    "\067\uffbd\001\002\000\012\021\uffbb\024\uffbb\062\176\067" +
    "\uffbb\001\002\000\010\021\160\024\173\067\uffbf\001\002" +
    "\000\012\021\uffbc\024\uffbc\062\uffbc\067\uffbc\001\002\000" +
    "\004\067\uffb9\001\002\000\004\067\uffb8\001\002\000\004" +
    "\067\uffbe\001\002\000\004\030\163\001\002\000\010\021" +
    "\160\024\173\067\uffb7\001\002\000\004\067\uffb6\001\002" +
    "\000\004\030\163\001\002\000\010\021\uffba\024\uffba\067" +
    "\uffba\001\002\000\004\030\163\001\002\000\004\065\202" +
    "\001\002\000\004\030\163\001\002\000\012\021\uff5f\024" +
    "\uff5f\062\uff5f\067\uff5f\001\002\000\012\021\uff60\024\uff60" +
    "\062\uff60\067\uff60\001\002\000\036\002\uffc1\066\uffc1\070" +
    "\uffc1\072\uffc1\114\uffc1\115\uffc1\116\uffc1\117\uffc1\120\uffc1" +
    "\121\uffc1\122\uffc1\123\uffc1\124\uffc1\125\uffc1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\034\002\004\003\027\004\014\010\003\011" +
    "\010\020\031\021\030\022\013\024\032\100\026\101\006" +
    "\102\033\103\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\005\152\006\154\007\050\012" +
    "\151\026\051\076\044\077\045\111\042\112\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\005\137\006\143\007\050\026\051\040\141\076\044" +
    "\077\045\111\042\112\040\001\001\000\002\001\001\000" +
    "\032\005\052\006\055\007\050\026\051\030\041\035\046" +
    "\036\054\037\043\076\044\077\045\111\042\112\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\004\003\027\004\014\010" +
    "\003\011\010\020\031\021\030\022\013\024\032\101\037" +
    "\102\033\103\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\004\003\027\004\014\010" +
    "\003\011\010\020\031\021\030\022\013\024\032\101\035" +
    "\102\033\103\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\061\026" +
    "\051\035\060\036\054\076\044\077\045\111\042\112\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\063\026\051\076\044\077\045\111\042\112\040\001\001" +
    "\000\002\001\001\000\020\005\122\007\121\026\051\076" +
    "\044\077\045\111\042\112\040\001\001\000\002\001\001" +
    "\000\006\025\076\105\074\001\001\000\016\005\070\026" +
    "\051\076\044\077\045\111\042\112\040\001\001\000\004" +
    "\031\071\001\001\000\002\001\001\000\006\025\117\105" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\113\105\074\001\001\000\002\001\001\000\010\026" +
    "\100\076\044\077\045\001\001\000\010\031\102\032\101" +
    "\033\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\111\001\001\000\006\076\106" +
    "\077\045\001\001\000\002\001\001\000\004\077\110\001" +
    "\001\000\002\001\001\000\010\031\102\032\112\033\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\025\116\105\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\124\076\044\077\045\001\001" +
    "\000\002\001\001\000\016\005\126\026\051\076\044\077" +
    "\045\111\042\112\040\001\001\000\002\001\001\000\016" +
    "\005\133\026\051\076\044\077\045\111\042\112\040\001" +
    "\001\000\002\001\001\000\016\005\132\026\051\076\044" +
    "\077\045\111\042\112\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\005\122\006\145\007\050\026\051" +
    "\076\044\077\045\111\042\112\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\160\105" +
    "\074\001\001\000\002\001\001\000\016\014\165\015\164" +
    "\026\163\027\166\076\044\077\045\001\001\000\004\104" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\167\016\171\017\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\015\173\026\163\027\166\076\044\077\045\001\001\000" +
    "\010\013\167\016\174\017\170\001\001\000\002\001\001" +
    "\000\016\014\176\015\164\026\163\027\166\076\044\077" +
    "\045\001\001\000\002\001\001\000\014\015\203\026\163" +
    "\027\166\076\044\077\045\001\001\000\002\001\001\000" +
    "\014\015\202\026\163\027\166\076\044\077\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {



  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // number ::= BIN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // number ::= OCT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // number ::= HEX 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // number ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // number ::= LONGINT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // number ::= IMAGNUM 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // a_expr ::= a_expr MINUS m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // a_expr ::= a_expr PLUS m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // a_expr ::= m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // m_expr ::= m_expr MOD u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // m_expr ::= m_expr DIVIDE u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // m_expr ::= m_expr DIVDIV u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // m_expr ::= m_expr MULT u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // m_expr ::= u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // u_expr ::= TILDE u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // u_expr ::= PLUS u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // u_expr ::= MINUS u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // u_expr ::= power 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // or_expr ::= or_expr OR xor_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("or_expr",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // or_expr ::= xor_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("or_expr",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // xor_expr ::= xor_expr EXPON and_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("xor_expr",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // xor_expr ::= and_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("xor_expr",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // and_expr ::= and_expr AND shift_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("and_expr",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // and_expr ::= shift_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("and_expr",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // target ::= LBRACK target_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // target ::= LPAREN target_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // target ::= NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // old_lambda_form ::= LAMBDA parameter_list COLON old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_lambda_form",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // old_lambda_form ::= LAMBDA COLON old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_lambda_form",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // lambda_form ::= LAMBDA parameter_list COLON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambda_form",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // lambda_form ::= LAMBDA COLON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambda_form",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression ::= lambda_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression ::= conditional_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // conditional_expression ::= or_test IF or_test ELSE expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("conditional_expression",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // conditional_expression ::= or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("conditional_expression",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // shift_expr ::= shift_expr LPAREN RSHIFT RPAREN a_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("shift_expr",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // shift_expr ::= shift_expr LPAREN LSHIFT RPAREN a_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("shift_expr",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // shift_expr ::= a_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("shift_expr",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // power ::= primary EXPON u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("power",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // power ::= primary 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("power",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // keyword_item ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_item",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // keyword_arguments ::= keyword_item COMMA keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_arguments",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // keyword_arguments ::= keyword_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_arguments",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // positional_arguments ::= expression COMMA positional_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // positional_arguments ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // argument_list ::= MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // argument_list ::= MULT expression COMMA MULT expression COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // argument_list ::= MULT expression COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // argument_list ::= MULT expression COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // argument_list ::= MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // argument_list ::= keyword_arguments COMMA MULT expression COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // argument_list ::= keyword_arguments COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // argument_list ::= keyword_arguments COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // argument_list ::= keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // argument_list ::= positional_arguments COMMA keyword_arguments COMMA MULT expression COMMA keyword_arguments COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-10)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // argument_list ::= positional_arguments COMMA MULTMULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // argument_list ::= positional_arguments COMMA keyword_arguments COMMA MULT expression COMMA keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // argument_list ::= positional_arguments COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // argument_list ::= positional_arguments COMMA keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // argument_list ::= positional_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // call ::= primary LPAREN expression genexpr_for RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // call ::= primary LPAREN argument_list COMMA RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // call ::= primary LPAREN argument_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // call ::= primary LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ellipsis ::= TRIDOT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("ellipsis",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // stride ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stride",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // upper_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("upper_bound",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // lower_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lower_bound",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // long_slice ::= short_slice COLON stride 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("long_slice",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // long_slice ::= short_slice COLON 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("long_slice",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // short_slice ::= lower_bound COLON upper_bound 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("short_slice",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // proper_slice ::= long_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // proper_slice ::= short_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // slice_item ::= ellipsis 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // slice_item ::= proper_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // slice_item ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // slice_list ::= slice_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // slice_list ::= slice_item COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // slice_list ::= slice_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // extended_slicing ::= primary LBRACK slice_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("extended_slicing",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // simple_slicing ::= primary LBRACK short_slice RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_slicing",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // slicing ::= extended_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // slicing ::= simple_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // subscription ::= primary LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscription",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // attributeref ::= call DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // attributeref ::= slicing DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // attributeref ::= subscription DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // attributeref ::= atom DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primary ::= call 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primary ::= slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primary ::= subscription 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primary ::= attributeref 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primary ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // set_display ::= LCURLY comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // set_display ::= LCURLY expression_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // yield_expression ::= YIELD expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // yield_expression ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // yield_atom ::= LPAREN yield_expression RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // dict_comprehension ::= expression COLON expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_comprehension",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // key_datum_list ::= key_datum COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // key_datum_list ::= key_datum COMMA key_datum_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // key_datum_list ::= key_datum 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // dict_display ::= LCURLY dict_comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dict_display ::= LCURLY key_datum_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dict_display ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // generator_expression ::= LPAREN expression comp_for RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("generator_expression",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comp_if ::= IF expression_nocond comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // comp_if ::= IF expression_nocond 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // comp_iter ::= comp_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // comp_iter ::= comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // comp_for ::= FOR target_list IN or_test comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // comp_for ::= FOR target_list IN or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // comprehension ::= expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comprehension",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_if ::= IF old_expression list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_if ::= IF old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list_iter ::= list_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // list_iter ::= list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // old_expression_list ::= old_expression COMMA old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // old_expression_list ::= old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // old_expression ::= old_lambda_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // old_expression ::= or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list_for ::= FOR target_list IN old_expression_list list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list_for ::= FOR target_list IN old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // list_comprehension ::= expression list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_comprehension",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // list_display ::= LBRACK list_comprehension RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // list_display ::= LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // list_display ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp_recoursive ::= expression COMMA exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("exp_recoursive"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp_recoursive ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression_list ::= exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("found explist"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression_list",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parenth_form ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parenth_form ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // enclosure ::= yield_atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // enclosure ::= set_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // enclosure ::= dict_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // enclosure ::= generator_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // enclosure ::= list_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // enclosure ::= parenth_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= number 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atom ::= enclosure 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atom ::= literal 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atom ::= NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // comp_operator ::= NOT IN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // comp_operator ::= IN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // comp_operator ::= IS NOT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp_operator ::= IS 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comp_operator ::= NEQ 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_operator ::= MINEQ 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_operator ::= MAIEQ 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_operator ::= EQ 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_operator ::= MAIOR 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_operator ::= MINOR 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_operator",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparison ::= or_expr comp_operator comparison 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparison ::= or_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // and_test ::= and_test AND not_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("and_test",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // and_test ::= not_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("and_test",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // or_test ::= or_test OR and_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("or_test",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // or_test ::= and_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("or_test",20, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // target_list ::= target COMMA target_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target_list",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // target_list ::= target 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target_list",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // target_list_recoursive ::= target_list ASSIGN target_list_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target_list_recoursive",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // target_list_recoursive ::= target_list ASSIGN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("target_list_recoursive",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment_stmt ::= target_list_recoursive yield_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assignment_stmt",85, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // assignment_stmt ::= target_list_recoursive expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assignment_stmt",85, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // assignment_stmt ::= target_list ASSIGN yield_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assignment_stmt",85, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment_stmt ::= target_list ASSIGN expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assignment_stmt",85, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_stmt ::= expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression_stmt",83, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simple_stmt ::= exec_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // simple_stmt ::= global_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // simple_stmt ::= import_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simple_stmt ::= continue_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_stmt ::= break_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_stmt ::= raise_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_stmt ::= yield_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_stmt ::= return_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_stmt ::= print_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_stmt ::= del_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_stmt ::= pass_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_stmt ::= augmented_assignment_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_stmt ::= assignment_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_stmt ::= assert_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // simple_stmt ::= expression_stmt 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",62, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

