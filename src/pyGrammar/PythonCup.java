
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 10 13:23:37 CET 2012
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import s2sCompiler.Program.AttrType;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 10 13:23:37 CET 2012
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\055\007" +
    "\000\002\111\004\000\002\111\005\000\002\113\003\000" +
    "\002\113\006\000\002\113\006\000\002\113\011\000\002" +
    "\113\004\000\002\113\007\000\002\113\004\000\002\112" +
    "\003\000\002\112\005\000\002\077\003\000\002\077\005" +
    "\000\002\004\003\000\002\004\003\000\002\005\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\006\000\002" +
    "\062\004\000\002\062\005\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\061\003\000" +
    "\002\061\003\000\002\061\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\007\003\000\002" +
    "\007\004\000\002\007\005\000\002\024\012\000\002\024" +
    "\010\000\002\010\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\027\004\000" +
    "\002\030\004\000\002\030\006\000\002\030\010\000\002" +
    "\012\004\000\002\012\006\000\002\012\010\000\002\012" +
    "\006\000\002\012\007\000\002\012\011\000\002\012\007" +
    "\000\002\012\007\000\002\012\011\000\002\012\007\000" +
    "\002\033\003\000\002\033\005\000\002\032\003\000\002" +
    "\032\005\000\002\031\003\000\002\031\005\000\002\035" +
    "\003\000\002\035\005\000\002\034\003\000\002\034\005" +
    "\000\002\036\003\000\002\036\004\000\002\014\004\000" +
    "\002\023\003\000\002\023\005\000\002\013\004\000\002" +
    "\047\003\000\002\047\003\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\050\007\000\002\050\006" +
    "\000\002\050\011\000\002\050\012\000\002\063\006\000" +
    "\002\063\007\000\002\051\006\000\002\052\010\000\002" +
    "\052\010\000\002\053\010\000\002\053\006\000\002\053" +
    "\011\000\002\053\011\000\002\053\014\000\002\065\005" +
    "\000\002\065\006\000\002\064\003\000\002\064\004\000" +
    "\002\064\006\000\002\064\006\000\002\115\003\000\002" +
    "\115\006\000\002\060\003\000\002\060\004\000\002\076" +
    "\003\000\002\076\003\000\002\075\003\000\002\075\005" +
    "\000\002\074\003\000\002\074\004\000\002\072\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\004\000\002" +
    "\072\004\000\002\072\004\000\002\072\004\000\002\072" +
    "\005\000\002\072\005\000\002\072\005\000\002\102\003" +
    "\000\002\103\003\000\002\101\005\000\002\101\007\000" +
    "\002\100\003\000\002\100\005\000\002\105\003\000\002" +
    "\105\005\000\002\104\005\000\002\114\004\000\002\114" +
    "\005\000\002\114\004\000\002\114\005\000\002\114\004" +
    "\000\002\037\003\000\002\037\003\000\002\037\004\000" +
    "\002\037\007\000\002\037\007\000\002\037\012\000\002" +
    "\037\004\000\002\037\004\000\002\037\005\000\002\037" +
    "\010\000\002\037\010\000\002\037\013\000\002\037\005" +
    "\000\002\107\004\000\002\107\005\000\002\106\003\000" +
    "\002\106\005\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\004" +
    "\000\002\016\004\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\110\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\112\002\ufffd\006\022\007\050\011\014\012" +
    "\072\013\067\020\011\022\021\023\056\024\045\025\034" +
    "\026\057\031\037\034\027\040\043\044\100\045\101\046" +
    "\036\047\044\050\063\052\025\053\033\054\020\074\055" +
    "\076\042\100\016\102\023\122\035\123\077\124\017\125" +
    "\007\126\062\127\065\130\061\131\053\132\071\001\002" +
    "\000\134\004\uff86\005\uff86\027\uff86\030\uff86\032\uff86\033" +
    "\uff86\037\uff86\040\uff86\041\uff86\053\uff86\054\uff86\055\uff86" +
    "\056\uff86\057\uff86\060\uff86\061\u0134\062\uff86\063\uff86\064" +
    "\uff86\065\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86" +
    "\073\uff86\074\u0132\075\uff86\077\uff86\100\u0133\101\uff86\103" +
    "\uff86\104\uff86\105\uff86\106\uff86\110\uff86\111\uff86\112\uff86" +
    "\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\121" +
    "\uff86\001\002\000\006\040\uffe0\071\uffe0\001\002\000\114" +
    "\002\uffa5\006\uffa5\007\uffa5\011\uffa5\012\uffa5\013\uffa5\020" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\031\uffa5" +
    "\034\uffa5\040\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047" +
    "\uffa5\050\uffa5\052\uffa5\053\uffa5\054\uffa5\074\uffa5\076\uffa5" +
    "\100\uffa5\102\uffa5\122\uffa5\123\uffa5\124\uffa5\125\uffa5\126" +
    "\uffa5\127\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000\134" +
    "\004\uff3a\005\uff3a\027\uff3a\030\uff3a\032\uff3a\033\uff3a\037" +
    "\uff3a\040\uff3a\041\uff3a\053\uff3a\054\uff3a\055\uff3a\056\uff3a" +
    "\057\uff3a\060\uff3a\061\uff3a\062\uff3a\063\uff3a\064\uff3a\065" +
    "\uff3a\066\uff3a\067\uff3a\070\uff3a\071\uff3a\072\uff3a\073\uff3a" +
    "\074\uff3a\075\uff3a\077\uff3a\100\uff3a\101\uff3a\103\uff3a\104" +
    "\uff3a\105\uff3a\106\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a" +
    "\114\uff3a\115\uff3a\116\uff3a\117\uff3a\120\uff3a\121\uff3a\001" +
    "\002\000\050\005\uff89\040\uff89\070\uff89\071\uff89\072\uff89" +
    "\073\uff89\075\uff89\077\uff89\101\uff89\110\uff89\111\uff89\112" +
    "\uff89\113\uff89\114\uff89\115\uff89\116\uff89\117\uff89\120\uff89" +
    "\121\uff89\001\002\000\006\040\uff38\071\uff38\001\002\000" +
    "\004\002\001\001\002\000\042\040\uff76\070\uff76\071\uff76" +
    "\072\uff76\075\uff76\101\uff76\110\uff76\111\uff76\112\uff76\113" +
    "\uff76\114\uff76\115\uff76\116\uff76\117\uff76\120\uff76\121\uff76" +
    "\001\002\000\006\040\uffc8\071\uffc8\001\002\000\006\040" +
    "\uffe5\071\uffe5\001\002\000\044\031\037\053\033\054\020" +
    "\074\055\076\042\100\016\101\u012d\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\134\004\uff3b\005\uff3b\027\uff3b\030" +
    "\uff3b\032\uff3b\033\uff3b\037\uff3b\040\uff3b\041\uff3b\053\uff3b" +
    "\054\uff3b\055\uff3b\056\uff3b\057\uff3b\060\uff3b\061\uff3b\062" +
    "\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067\uff3b\070\uff3b" +
    "\071\uff3b\072\uff3b\073\uff3b\074\uff3b\075\uff3b\077\uff3b\100" +
    "\uff3b\101\uff3b\103\uff3b\104\uff3b\105\uff3b\106\uff3b\110\uff3b" +
    "\111\uff3b\112\uff3b\113\uff3b\114\uff3b\115\uff3b\116\uff3b\117" +
    "\uff3b\120\uff3b\121\uff3b\001\002\000\040\053\uff42\054\uff42" +
    "\074\uff42\076\uff42\100\uff42\102\uff42\122\uff42\123\uff42\124" +
    "\uff42\125\uff42\126\uff42\127\uff42\130\uff42\131\uff42\132\uff42" +
    "\001\002\000\040\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\042\031" +
    "\037\053\033\054\020\074\055\076\042\100\016\102\023" +
    "\122\035\123\077\124\017\125\007\126\062\127\065\130" +
    "\061\131\053\132\071\001\002\000\040\053\uff40\054\uff40" +
    "\074\uff40\076\uff40\100\uff40\102\uff40\122\uff40\123\uff40\124" +
    "\uff40\125\uff40\126\uff40\127\uff40\130\uff40\131\uff40\132\uff40" +
    "\001\002\000\006\040\uffdf\071\uffdf\001\002\000\004\100" +
    "\u011a\001\002\000\006\040\uffde\071\uffde\001\002\000\006" +
    "\040\uffe2\071\uffe2\001\002\000\036\040\uffdc\070\313\071" +
    "\uffdc\072\u0114\110\u0110\111\u0111\112\u010d\113\u010e\114\u0117" +
    "\115\u010f\116\u0112\117\u0116\120\u010c\121\u0113\001\002\000" +
    "\006\040\uffc7\071\uffc7\001\002\000\114\002\uffed\006\uffed" +
    "\007\uffed\011\uffed\012\uffed\013\uffed\020\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\026\uffed\031\uffed\034\uffed\040\uffed" +
    "\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed\052" +
    "\uffed\053\uffed\054\uffed\074\uffed\076\uffed\100\uffed\102\uffed" +
    "\122\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed\130" +
    "\uffed\131\uffed\132\uffed\001\002\000\040\053\uff41\054\uff41" +
    "\074\uff41\076\uff41\100\uff41\102\uff41\122\uff41\123\uff41\124" +
    "\uff41\125\uff41\126\uff41\127\uff41\130\uff41\131\uff41\132\uff41" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\134\004\uff3c\005\uff3c\027\uff3c\030\uff3c\032\uff3c\033\uff3c" +
    "\037\uff3c\040\uff3c\041\uff3c\053\uff3c\054\uff3c\055\uff3c\056" +
    "\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064\uff3c" +
    "\065\uff3c\066\uff3c\067\uff3c\070\uff3c\071\uff3c\072\uff3c\073" +
    "\uff3c\074\uff3c\075\uff3c\077\uff3c\100\uff3c\101\uff3c\103\uff3c" +
    "\104\uff3c\105\uff3c\106\uff3c\110\uff3c\111\uff3c\112\uff3c\113" +
    "\uff3c\114\uff3c\115\uff3c\116\uff3c\117\uff3c\120\uff3c\121\uff3c" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\004\073\367\001\002\000\006\040\uffe6\071\uffe6\001\002" +
    "\000\114\002\uffa3\006\uffa3\007\uffa3\011\uffa3\012\uffa3\013" +
    "\uffa3\020\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\031\uffa3\034\uffa3\040\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\052\uffa3\053\uffa3\054\uffa3\074\uffa3" +
    "\076\uffa3\100\uffa3\102\uffa3\122\uffa3\123\uffa3\124\uffa3\125" +
    "\uffa3\126\uffa3\127\uffa3\130\uffa3\131\uffa3\132\uffa3\001\002" +
    "\000\044\031\037\053\033\054\020\074\055\076\042\077" +
    "\355\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\112\002\ufffd\006\022\007\050\011\014\012\072\013\067" +
    "\020\011\022\021\023\056\024\045\025\034\026\057\031" +
    "\037\034\027\040\043\044\100\045\101\046\036\047\044" +
    "\050\063\052\025\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\004\073" +
    "\321\001\002\000\004\131\315\001\002\000\006\040\uffe1" +
    "\071\uffe1\001\002\000\114\002\uffa6\006\uffa6\007\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\020\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\031\uffa6\034\uffa6\040\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\074\uffa6\076\uffa6\100\uffa6\102\uffa6\122\uffa6\123" +
    "\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6" +
    "\132\uffa6\001\002\000\006\040\uffc9\071\uffc9\001\002\000" +
    "\114\002\uffee\006\uffee\007\uffee\011\uffee\012\uffee\013\uffee" +
    "\020\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\031" +
    "\uffee\034\uffee\040\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\047\uffee\050\uffee\052\uffee\053\uffee\054\uffee\074\uffee\076" +
    "\uffee\100\uffee\102\uffee\122\uffee\123\uffee\124\uffee\125\uffee" +
    "\126\uffee\127\uffee\130\uffee\131\uffee\132\uffee\001\002\000" +
    "\006\040\uffc6\071\uffc6\001\002\000\134\004\uff84\005\uff84" +
    "\027\uff84\030\uff84\032\uff84\033\uff84\037\uff84\040\uff84\041" +
    "\uff84\053\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84" +
    "\061\uff84\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067" +
    "\uff84\070\uff84\071\uff84\072\uff84\073\uff84\074\uff84\075\uff84" +
    "\077\uff84\100\uff84\101\uff84\103\uff84\104\uff84\105\uff84\106" +
    "\uff84\110\uff84\111\uff84\112\uff84\113\uff84\114\uff84\115\uff84" +
    "\116\uff84\117\uff84\120\uff84\121\uff84\001\002\000\006\040" +
    "\uffdd\071\uffdd\001\002\000\044\031\037\053\033\054\020" +
    "\074\055\075\310\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\006\061\253\131\241\001\002\000" +
    "\004\131\241\001\002\000\004\002\236\001\002\000\134" +
    "\004\uff3e\005\uff3e\027\uff3e\030\uff3e\032\uff3e\033\uff3e\037" +
    "\uff3e\040\uff3e\041\uff3e\053\uff3e\054\uff3e\055\uff3e\056\uff3e" +
    "\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e\064\uff3e\065" +
    "\uff3e\066\uff3e\067\uff3e\070\uff3e\071\uff3e\072\uff3e\073\uff3e" +
    "\074\uff3e\075\uff3e\077\uff3e\100\uff3e\101\uff3e\103\uff3e\104" +
    "\uff3e\105\uff3e\106\uff3e\110\uff3e\111\uff3e\112\uff3e\113\uff3e" +
    "\114\uff3e\115\uff3e\116\uff3e\117\uff3e\120\uff3e\121\uff3e\001" +
    "\002\000\134\004\uff39\005\uff39\027\uff39\030\uff39\032\uff39" +
    "\033\uff39\037\uff39\040\uff39\041\uff39\053\uff39\054\uff39\055" +
    "\uff39\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39" +
    "\064\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072" +
    "\uff39\073\uff39\074\uff39\075\uff39\077\uff39\100\uff39\101\uff39" +
    "\103\uff39\104\uff39\105\uff39\106\uff39\110\uff39\111\uff39\112" +
    "\uff39\113\uff39\114\uff39\115\uff39\116\uff39\117\uff39\120\uff39" +
    "\121\uff39\001\002\000\042\031\037\053\033\054\020\074" +
    "\055\076\042\100\016\102\023\122\035\123\077\124\017" +
    "\125\007\126\062\127\065\130\061\131\053\132\071\001" +
    "\002\000\114\002\uffa4\006\uffa4\007\uffa4\011\uffa4\012\uffa4" +
    "\013\uffa4\020\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\031\uffa4\034\uffa4\040\uffa4\043\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\052\uffa4\053\uffa4\054\uffa4\074" +
    "\uffa4\076\uffa4\100\uffa4\102\uffa4\122\uffa4\123\uffa4\124\uffa4" +
    "\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4\132\uffa4\001" +
    "\002\000\134\004\uff3f\005\uff3f\027\uff3f\030\uff3f\032\uff3f" +
    "\033\uff3f\037\uff3f\040\uff3f\041\uff3f\053\uff3f\054\uff3f\055" +
    "\uff3f\056\uff3f\057\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f" +
    "\064\uff3f\065\uff3f\066\uff3f\067\uff3f\070\uff3f\071\uff3f\072" +
    "\uff3f\073\uff3f\074\uff3f\075\uff3f\077\uff3f\100\uff3f\101\uff3f" +
    "\103\uff3f\104\uff3f\105\uff3f\106\uff3f\110\uff3f\111\uff3f\112" +
    "\uff3f\113\uff3f\114\uff3f\115\uff3f\116\uff3f\117\uff3f\120\uff3f" +
    "\121\uff3f\001\002\000\006\040\uffe3\071\uffe3\001\002\000" +
    "\040\053\033\054\020\074\055\076\042\100\016\102\023" +
    "\122\035\123\077\124\017\125\007\126\062\127\065\130" +
    "\061\131\053\132\071\001\002\000\126\004\uff88\005\uff88" +
    "\027\uff88\030\uff88\032\uff88\033\uff88\037\uff88\040\uff88\041" +
    "\uff88\053\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88" +
    "\062\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070" +
    "\uff88\071\uff88\072\uff88\073\uff88\075\uff88\077\uff88\101\uff88" +
    "\103\uff88\104\uff88\105\uff88\106\uff88\110\uff88\111\uff88\112" +
    "\uff88\113\uff88\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88" +
    "\121\uff88\001\002\000\134\004\uff82\005\uff82\027\uff82\030" +
    "\uff82\032\uff82\033\uff82\037\uff82\040\uff82\041\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\077\uff82\100" +
    "\uff82\101\uff82\103\uff82\104\uff82\105\uff82\106\uff82\110\uff82" +
    "\111\uff82\112\uff82\113\uff82\114\uff82\115\uff82\116\uff82\117" +
    "\uff82\120\uff82\121\uff82\001\002\000\004\131\163\001\002" +
    "\000\114\002\uffa7\006\uffa7\007\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\020\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\031\uffa7\034\uffa7\040\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\052\uffa7\053\uffa7\054\uffa7\074\uffa7" +
    "\076\uffa7\100\uffa7\102\uffa7\122\uffa7\123\uffa7\124\uffa7\125" +
    "\uffa7\126\uffa7\127\uffa7\130\uffa7\131\uffa7\132\uffa7\001\002" +
    "\000\040\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\006\040\153\071" +
    "\152\001\002\000\126\004\120\005\uff8a\027\126\030\121" +
    "\032\127\033\123\037\124\040\uff8a\041\135\053\122\054" +
    "\142\055\136\056\140\057\116\060\125\062\141\063\131" +
    "\064\143\065\132\066\144\067\145\070\uff8a\071\uff8a\072" +
    "\uff8a\073\uff8a\075\uff8a\077\uff8a\101\uff8a\103\137\104\117" +
    "\105\134\106\130\110\uff8a\111\uff8a\112\uff8a\113\uff8a\114" +
    "\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\001\002" +
    "\000\134\004\uff3d\005\uff3d\027\uff3d\030\uff3d\032\uff3d\033" +
    "\uff3d\037\uff3d\040\uff3d\041\uff3d\053\uff3d\054\uff3d\055\uff3d" +
    "\056\uff3d\057\uff3d\060\uff3d\061\uff3d\062\uff3d\063\uff3d\064" +
    "\uff3d\065\uff3d\066\uff3d\067\uff3d\070\uff3d\071\uff3d\072\uff3d" +
    "\073\uff3d\074\uff3d\075\uff3d\077\uff3d\100\uff3d\101\uff3d\103" +
    "\uff3d\104\uff3d\105\uff3d\106\uff3d\110\uff3d\111\uff3d\112\uff3d" +
    "\113\uff3d\114\uff3d\115\uff3d\116\uff3d\117\uff3d\120\uff3d\121" +
    "\uff3d\001\002\000\046\031\037\040\uffcf\053\033\054\020" +
    "\071\uffcf\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\042\031\037\053\033\054\020\074" +
    "\055\076\042\100\016\102\023\122\035\123\077\124\017" +
    "\125\007\126\062\127\065\130\061\131\053\132\071\001" +
    "\002\000\134\004\uff83\005\uff83\027\uff83\030\uff83\032\uff83" +
    "\033\uff83\037\uff83\040\uff83\041\uff83\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072" +
    "\uff83\073\uff83\074\uff83\075\uff83\077\uff83\100\uff83\101\uff83" +
    "\103\uff83\104\uff83\105\uff83\106\uff83\110\uff83\111\uff83\112" +
    "\uff83\113\uff83\114\uff83\115\uff83\116\uff83\117\uff83\120\uff83" +
    "\121\uff83\001\002\000\006\040\uffe4\071\uffe4\001\002\000" +
    "\112\002\ufffd\006\022\007\050\011\014\012\072\013\067" +
    "\020\011\022\021\023\056\024\045\025\034\026\057\031" +
    "\037\034\027\040\043\044\100\045\101\046\036\047\044" +
    "\050\063\052\025\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\004\002" +
    "\ufffe\001\002\000\010\040\uffc4\070\107\071\uffc4\001\002" +
    "\000\042\031\037\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\010\040" +
    "\uffc3\070\111\071\uffc3\001\002\000\042\031\037\053\033" +
    "\054\020\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\006\040\uffc2\071\uffc2\001\002\000" +
    "\010\040\uffce\070\114\071\uffce\001\002\000\046\031\037" +
    "\040\uffcd\053\033\054\020\071\uffcd\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\042\040" +
    "\uff75\070\uff75\071\uff75\072\uff75\075\uff75\101\uff75\110\uff75" +
    "\111\uff75\112\uff75\113\uff75\114\uff75\115\uff75\116\uff75\117" +
    "\uff75\120\uff75\121\uff75\001\002\000\040\053\uff56\054\uff56" +
    "\074\uff56\076\uff56\100\uff56\102\uff56\122\uff56\123\uff56\124" +
    "\uff56\125\uff56\126\uff56\127\uff56\130\uff56\131\uff56\132\uff56" +
    "\001\002\000\040\053\uff45\054\uff45\074\uff45\076\uff45\100" +
    "\uff45\102\uff45\122\uff45\123\uff45\124\uff45\125\uff45\126\uff45" +
    "\127\uff45\130\uff45\131\uff45\132\uff45\001\002\000\040\053" +
    "\uff49\054\uff49\074\uff49\076\uff49\100\uff49\102\uff49\122\uff49" +
    "\123\uff49\124\uff49\125\uff49\126\uff49\127\uff49\130\uff49\131" +
    "\uff49\132\uff49\001\002\000\042\032\150\053\uff55\054\uff55" +
    "\074\uff55\076\uff55\100\uff55\102\uff55\122\uff55\123\uff55\124" +
    "\uff55\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55\132\uff55" +
    "\001\002\000\040\053\uff5b\054\uff5b\074\uff5b\076\uff5b\100" +
    "\uff5b\102\uff5b\122\uff5b\123\uff5b\124\uff5b\125\uff5b\126\uff5b" +
    "\127\uff5b\130\uff5b\131\uff5b\132\uff5b\001\002\000\040\053" +
    "\uff48\054\uff48\074\uff48\076\uff48\100\uff48\102\uff48\122\uff48" +
    "\123\uff48\124\uff48\125\uff48\126\uff48\127\uff48\130\uff48\131" +
    "\uff48\132\uff48\001\002\000\040\053\uff43\054\uff43\074\uff43" +
    "\076\uff43\100\uff43\102\uff43\122\uff43\123\uff43\124\uff43\125" +
    "\uff43\126\uff43\127\uff43\130\uff43\131\uff43\132\uff43\001\002" +
    "\000\040\053\uff57\054\uff57\074\uff57\076\uff57\100\uff57\102" +
    "\uff57\122\uff57\123\uff57\124\uff57\125\uff57\126\uff57\127\uff57" +
    "\130\uff57\131\uff57\132\uff57\001\002\000\040\053\uff54\054" +
    "\uff54\074\uff54\076\uff54\100\uff54\102\uff54\122\uff54\123\uff54" +
    "\124\uff54\125\uff54\126\uff54\127\uff54\130\uff54\131\uff54\132" +
    "\uff54\001\002\000\042\027\147\053\uff46\054\uff46\074\uff46" +
    "\076\uff46\100\uff46\102\uff46\122\uff46\123\uff46\124\uff46\125" +
    "\uff46\126\uff46\127\uff46\130\uff46\131\uff46\132\uff46\001\002" +
    "\000\040\053\uff50\054\uff50\074\uff50\076\uff50\100\uff50\102" +
    "\uff50\122\uff50\123\uff50\124\uff50\125\uff50\126\uff50\127\uff50" +
    "\130\uff50\131\uff50\132\uff50\001\002\000\040\053\uff4e\054" +
    "\uff4e\074\uff4e\076\uff4e\100\uff4e\102\uff4e\122\uff4e\123\uff4e" +
    "\124\uff4e\125\uff4e\126\uff4e\127\uff4e\130\uff4e\131\uff4e\132" +
    "\uff4e\001\002\000\040\053\uff4c\054\uff4c\074\uff4c\076\uff4c" +
    "\100\uff4c\102\uff4c\122\uff4c\123\uff4c\124\uff4c\125\uff4c\126" +
    "\uff4c\127\uff4c\130\uff4c\131\uff4c\132\uff4c\001\002\000\040" +
    "\053\033\054\020\074\055\076\042\100\016\102\023\122" +
    "\035\123\077\124\017\125\007\126\062\127\065\130\061" +
    "\131\053\132\071\001\002\000\040\053\uff51\054\uff51\074" +
    "\uff51\076\uff51\100\uff51\102\uff51\122\uff51\123\uff51\124\uff51" +
    "\125\uff51\126\uff51\127\uff51\130\uff51\131\uff51\132\uff51\001" +
    "\002\000\040\053\uff47\054\uff47\074\uff47\076\uff47\100\uff47" +
    "\102\uff47\122\uff47\123\uff47\124\uff47\125\uff47\126\uff47\127" +
    "\uff47\130\uff47\131\uff47\132\uff47\001\002\000\040\053\uff59" +
    "\054\uff59\074\uff59\076\uff59\100\uff59\102\uff59\122\uff59\123" +
    "\uff59\124\uff59\125\uff59\126\uff59\127\uff59\130\uff59\131\uff59" +
    "\132\uff59\001\002\000\040\053\uff44\054\uff44\074\uff44\076" +
    "\uff44\100\uff44\102\uff44\122\uff44\123\uff44\124\uff44\125\uff44" +
    "\126\uff44\127\uff44\130\uff44\131\uff44\132\uff44\001\002\000" +
    "\040\053\uff58\054\uff58\074\uff58\076\uff58\100\uff58\102\uff58" +
    "\122\uff58\123\uff58\124\uff58\125\uff58\126\uff58\127\uff58\130" +
    "\uff58\131\uff58\132\uff58\001\002\000\040\053\uff4f\054\uff4f" +
    "\074\uff4f\076\uff4f\100\uff4f\102\uff4f\122\uff4f\123\uff4f\124" +
    "\uff4f\125\uff4f\126\uff4f\127\uff4f\130\uff4f\131\uff4f\132\uff4f" +
    "\001\002\000\040\053\uff5a\054\uff5a\074\uff5a\076\uff5a\100" +
    "\uff5a\102\uff5a\122\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a" +
    "\127\uff5a\130\uff5a\131\uff5a\132\uff5a\001\002\000\040\053" +
    "\uff4d\054\uff4d\074\uff4d\076\uff4d\100\uff4d\102\uff4d\122\uff4d" +
    "\123\uff4d\124\uff4d\125\uff4d\126\uff4d\127\uff4d\130\uff4d\131" +
    "\uff4d\132\uff4d\001\002\000\040\053\uff4b\054\uff4b\074\uff4b" +
    "\076\uff4b\100\uff4b\102\uff4b\122\uff4b\123\uff4b\124\uff4b\125" +
    "\uff4b\126\uff4b\127\uff4b\130\uff4b\131\uff4b\132\uff4b\001\002" +
    "\000\040\053\uff4a\054\uff4a\074\uff4a\076\uff4a\100\uff4a\102" +
    "\uff4a\122\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a\127\uff4a" +
    "\130\uff4a\131\uff4a\132\uff4a\001\002\000\126\004\uff87\005" +
    "\uff87\027\uff87\030\uff87\032\uff87\033\uff87\037\uff87\040\uff87" +
    "\041\uff87\053\uff87\054\uff87\055\uff87\056\uff87\057\uff87\060" +
    "\uff87\062\uff87\063\uff87\064\uff87\065\uff87\066\uff87\067\uff87" +
    "\070\uff87\071\uff87\072\uff87\073\uff87\075\uff87\077\uff87\101" +
    "\uff87\103\uff87\104\uff87\105\uff87\106\uff87\110\uff87\111\uff87" +
    "\112\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87\120" +
    "\uff87\121\uff87\001\002\000\040\053\uff52\054\uff52\074\uff52" +
    "\076\uff52\100\uff52\102\uff52\122\uff52\123\uff52\124\uff52\125" +
    "\uff52\126\uff52\127\uff52\130\uff52\131\uff52\132\uff52\001\002" +
    "\000\040\053\uff53\054\uff53\074\uff53\076\uff53\100\uff53\102" +
    "\uff53\122\uff53\123\uff53\124\uff53\125\uff53\126\uff53\127\uff53" +
    "\130\uff53\131\uff53\132\uff53\001\002\000\006\040\157\071" +
    "\156\001\002\000\076\006\022\007\050\011\014\013\067" +
    "\020\011\023\056\024\045\026\057\031\037\034\027\040" +
    "\154\044\100\045\101\046\036\052\025\053\033\054\020" +
    "\074\055\076\042\100\016\102\023\122\035\123\077\124" +
    "\017\125\007\126\062\127\065\130\061\131\053\132\071" +
    "\001\002\000\124\002\uffec\006\uffec\007\uffec\011\uffec\012" +
    "\uffec\013\uffec\014\uffec\015\uffec\016\uffec\020\uffec\021\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\031\uffec\034" +
    "\uffec\040\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec" +
    "\050\uffec\052\uffec\053\uffec\054\uffec\074\uffec\076\uffec\100" +
    "\uffec\102\uffec\122\uffec\123\uffec\124\uffec\125\uffec\126\uffec" +
    "\127\uffec\130\uffec\131\uffec\132\uffec\001\002\000\124\002" +
    "\uffeb\006\uffeb\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb" +
    "\015\uffeb\016\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\031\uffeb\034\uffeb\040\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\074\uffeb\076\uffeb\100\uffeb\102\uffeb\122\uffeb" +
    "\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131" +
    "\uffeb\132\uffeb\001\002\000\006\040\uffe8\071\uffe8\001\002" +
    "\000\076\006\022\007\050\011\014\013\067\020\011\023" +
    "\056\024\045\026\057\031\037\034\027\040\160\044\100" +
    "\045\101\046\036\052\025\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\124\002\uffea\006\uffea\007\uffea\011\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023" +
    "\uffea\024\uffea\025\uffea\026\uffea\031\uffea\034\uffea\040\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\047\uffea\050\uffea\052" +
    "\uffea\053\uffea\054\uffea\074\uffea\076\uffea\100\uffea\102\uffea" +
    "\122\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130" +
    "\uffea\131\uffea\132\uffea\001\002\000\124\002\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\031\uffe9\034\uffe9\040\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\053\uffe9\054\uffe9" +
    "\074\uffe9\076\uffe9\100\uffe9\102\uffe9\122\uffe9\123\uffe9\124" +
    "\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9\132\uffe9" +
    "\001\002\000\006\040\uffe7\071\uffe7\001\002\000\134\004" +
    "\uff81\005\uff81\027\uff81\030\uff81\032\uff81\033\uff81\037\uff81" +
    "\040\uff81\041\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074" +
    "\uff81\075\uff81\077\uff81\100\uff81\101\uff81\103\uff81\104\uff81" +
    "\105\uff81\106\uff81\110\uff81\111\uff81\112\uff81\113\uff81\114" +
    "\uff81\115\uff81\116\uff81\117\uff81\120\uff81\121\uff81\001\002" +
    "\000\004\100\165\001\002\000\004\073\216\001\002\000" +
    "\012\041\170\055\167\101\166\131\173\001\002\000\004" +
    "\073\ufffb\001\002\000\004\131\212\001\002\000\004\131" +
    "\211\001\002\000\006\070\ufff2\101\ufff2\001\002\000\006" +
    "\070\200\101\ufff9\001\002\000\010\070\ufff0\072\176\101" +
    "\ufff0\001\002\000\004\101\175\001\002\000\004\073\ufffa" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\006\070\uffef\101\uffef\001\002\000\010\041\202\055\201" +
    "\131\173\001\002\000\004\131\205\001\002\000\004\131" +
    "\204\001\002\000\006\070\ufff1\101\ufff1\001\002\000\004" +
    "\101\ufff7\001\002\000\006\070\206\101\ufff8\001\002\000" +
    "\004\041\207\001\002\000\004\131\210\001\002\000\004" +
    "\101\ufff6\001\002\000\004\101\ufff3\001\002\000\006\070" +
    "\213\101\ufff5\001\002\000\004\041\214\001\002\000\004" +
    "\131\215\001\002\000\004\101\ufff4\001\002\000\076\006" +
    "\022\007\050\011\014\013\067\020\011\023\056\024\045" +
    "\026\057\031\037\034\027\040\220\044\100\045\101\046" +
    "\036\052\025\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\114\002\ufffc" +
    "\006\ufffc\007\ufffc\011\ufffc\012\ufffc\013\ufffc\020\ufffc\022" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\031\ufffc\034\ufffc" +
    "\040\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050" +
    "\ufffc\052\ufffc\053\ufffc\054\ufffc\074\ufffc\076\ufffc\100\ufffc" +
    "\102\ufffc\122\ufffc\123\ufffc\124\ufffc\125\ufffc\126\ufffc\127" +
    "\ufffc\130\ufffc\131\ufffc\132\ufffc\001\002\000\004\042\222" +
    "\001\002\000\124\002\uff8e\006\uff8e\007\uff8e\011\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\021\uff8e" +
    "\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026\uff8e\031\uff8e\034" +
    "\uff8e\040\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e" +
    "\050\uff8e\052\uff8e\053\uff8e\054\uff8e\074\uff8e\076\uff8e\100" +
    "\uff8e\102\uff8e\122\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e" +
    "\127\uff8e\130\uff8e\131\uff8e\132\uff8e\001\002\000\106\006" +
    "\022\007\050\011\014\012\072\013\067\020\011\022\021" +
    "\023\056\024\045\025\034\026\057\031\037\034\027\044" +
    "\100\045\101\046\036\047\044\050\063\052\025\053\033" +
    "\054\020\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\110\006\022\007\050\011\014\012" +
    "\072\013\067\020\011\022\021\023\056\024\045\025\034" +
    "\026\057\031\037\034\027\043\225\044\100\045\101\046" +
    "\036\047\044\050\063\052\025\053\033\054\020\074\055" +
    "\076\042\100\016\102\023\122\035\123\077\124\017\125" +
    "\007\126\062\127\065\130\061\131\053\132\071\001\002" +
    "\000\110\006\uff8c\007\uff8c\011\uff8c\012\uff8c\013\uff8c\020" +
    "\uff8c\022\uff8c\023\uff8c\024\uff8c\025\uff8c\026\uff8c\031\uff8c" +
    "\034\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050" +
    "\uff8c\052\uff8c\053\uff8c\054\uff8c\074\uff8c\076\uff8c\100\uff8c" +
    "\102\uff8c\122\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c\127" +
    "\uff8c\130\uff8c\131\uff8c\132\uff8c\001\002\000\124\002\uff8d" +
    "\006\uff8d\007\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015" +
    "\uff8d\016\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\031\uff8d\034\uff8d\040\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\074\uff8d\076\uff8d\100\uff8d\102\uff8d\122\uff8d\123" +
    "\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d" +
    "\132\uff8d\001\002\000\110\006\uff8b\007\uff8b\011\uff8b\012" +
    "\uff8b\013\uff8b\020\uff8b\022\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\031\uff8b\034\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\052\uff8b\053\uff8b\054\uff8b\074\uff8b" +
    "\076\uff8b\100\uff8b\102\uff8b\122\uff8b\123\uff8b\124\uff8b\125" +
    "\uff8b\126\uff8b\127\uff8b\130\uff8b\131\uff8b\132\uff8b\001\002" +
    "\000\010\040\uffca\070\231\071\uffca\001\002\000\010\040" +
    "\uff74\070\uff74\071\uff74\001\002\000\040\053\033\054\020" +
    "\074\055\076\042\100\016\102\023\122\035\123\077\124" +
    "\017\125\007\126\062\127\065\130\061\131\053\132\071" +
    "\001\002\000\012\027\uff73\040\uff73\070\uff73\071\uff73\001" +
    "\002\000\004\073\234\001\002\000\076\006\022\007\050" +
    "\011\014\013\067\020\011\023\056\024\045\026\057\031" +
    "\037\034\027\040\220\044\100\045\101\046\036\052\025" +
    "\053\033\054\020\074\055\076\042\100\016\102\023\122" +
    "\035\123\077\124\017\125\007\126\062\127\065\130\061" +
    "\131\053\132\071\001\002\000\114\002\uff9c\006\uff9c\007" +
    "\uff9c\011\uff9c\012\uff9c\013\uff9c\020\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\031\uff9c\034\uff9c\040\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\074\uff9c\076\uff9c\100\uff9c\102\uff9c\122" +
    "\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c" +
    "\131\uff9c\132\uff9c\001\002\000\004\002\000\001\002\000" +
    "\012\005\247\040\uffb5\070\uffb5\071\uffb5\001\002\000\010" +
    "\040\uffc1\070\245\071\uffc1\001\002\000\016\005\uffb3\026" +
    "\uffb3\040\uffb3\061\243\070\uffb3\071\uffb3\001\002\000\010" +
    "\040\uffb7\070\uffb7\071\uffb7\001\002\000\004\131\241\001" +
    "\002\000\014\005\uffb2\026\uffb2\040\uffb2\070\uffb2\071\uffb2" +
    "\001\002\000\004\131\241\001\002\000\010\040\uffb6\070" +
    "\uffb6\071\uffb6\001\002\000\004\131\250\001\002\000\010" +
    "\040\uffb4\070\uffb4\071\uffb4\001\002\000\004\026\302\001" +
    "\002\000\004\131\241\001\002\000\006\061\255\131\uffad" +
    "\001\002\000\006\026\257\131\uffac\001\002\000\010\026" +
    "\uffad\061\255\131\uffad\001\002\000\006\026\uffac\131\uffac" +
    "\001\002\000\010\055\260\100\262\131\263\001\002\000" +
    "\006\040\uffba\071\uffba\001\002\000\012\040\uffb1\070\271" +
    "\071\uffb1\101\uffb1\001\002\000\004\131\263\001\002\000" +
    "\014\005\265\040\uffaf\070\uffaf\071\uffaf\101\uffaf\001\002" +
    "\000\006\040\uffb8\071\uffb8\001\002\000\004\131\266\001" +
    "\002\000\012\040\uffae\070\uffae\071\uffae\101\uffae\001\002" +
    "\000\004\101\270\001\002\000\006\040\uffb9\071\uffb9\001" +
    "\002\000\004\131\263\001\002\000\010\040\uffb0\071\uffb0" +
    "\101\uffb0\001\002\000\004\026\274\001\002\000\010\055" +
    "\275\100\276\131\263\001\002\000\006\040\uffbd\071\uffbd" +
    "\001\002\000\004\131\263\001\002\000\006\040\uffbb\071" +
    "\uffbb\001\002\000\004\101\301\001\002\000\006\040\uffbc" +
    "\071\uffbc\001\002\000\010\055\303\100\304\131\263\001" +
    "\002\000\006\040\uffc0\071\uffc0\001\002\000\004\131\263" +
    "\001\002\000\006\040\uffbe\071\uffbe\001\002\000\004\101" +
    "\307\001\002\000\006\040\uffbf\071\uffbf\001\002\000\134" +
    "\004\uff7f\005\uff7f\027\uff7f\030\uff7f\032\uff7f\033\uff7f\037" +
    "\uff7f\040\uff7f\041\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f" +
    "\074\uff7f\075\uff7f\077\uff7f\100\uff7f\101\uff7f\103\uff7f\104" +
    "\uff7f\105\uff7f\106\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f" +
    "\114\uff7f\115\uff7f\116\uff7f\117\uff7f\120\uff7f\121\uff7f\001" +
    "\002\000\004\075\314\001\002\000\006\070\313\075\uff79" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\134\004\uff7c\005\uff7c\027\uff7c\030\uff7c\032\uff7c\033\uff7c" +
    "\037\uff7c\040\uff7c\041\uff7c\053\uff7c\054\uff7c\055\uff7c\056" +
    "\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c" +
    "\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\074\uff7c\075\uff7c\077\uff7c\100\uff7c\101\uff7c\103\uff7c" +
    "\104\uff7c\105\uff7c\106\uff7c\110\uff7c\111\uff7c\112\uff7c\113" +
    "\uff7c\114\uff7c\115\uff7c\116\uff7c\117\uff7c\120\uff7c\121\uff7c" +
    "\001\002\000\010\040\uffaa\070\uffaa\071\uffaa\001\002\000" +
    "\010\040\uffab\070\317\071\uffab\001\002\000\004\131\320" +
    "\001\002\000\010\040\uffa9\070\uffa9\071\uffa9\001\002\000" +
    "\076\006\022\007\050\011\014\013\067\020\011\023\056" +
    "\024\045\026\057\031\037\034\027\040\220\044\100\045" +
    "\101\046\036\052\025\053\033\054\020\074\055\076\042" +
    "\100\016\102\023\122\035\123\077\124\017\125\007\126" +
    "\062\127\065\130\061\131\053\132\071\001\002\000\006" +
    "\016\325\021\324\001\002\000\122\002\uff98\006\uff98\007" +
    "\uff98\011\uff98\012\uff98\013\uff98\015\342\016\325\020\uff98" +
    "\021\340\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\031" +
    "\uff98\034\uff98\040\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\052\uff98\053\uff98\054\uff98\074\uff98\076" +
    "\uff98\100\uff98\102\uff98\122\uff98\123\uff98\124\uff98\125\uff98" +
    "\126\uff98\127\uff98\130\uff98\131\uff98\132\uff98\001\002\000" +
    "\004\073\336\001\002\000\044\031\037\053\033\054\020" +
    "\073\uff92\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\004\073\327\001\002\000\076\006" +
    "\022\007\050\011\014\013\067\020\011\023\056\024\045" +
    "\026\057\031\037\034\027\040\220\044\100\045\101\046" +
    "\036\052\025\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\122\002\uff94" +
    "\006\uff94\007\uff94\011\uff94\012\uff94\013\uff94\015\uff94\016" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\031\uff94\034\uff94\040\uff94\043\uff94\044\uff94\045" +
    "\uff94\046\uff94\047\uff94\050\uff94\052\uff94\053\uff94\054\uff94" +
    "\074\uff94\076\uff94\100\uff94\102\uff94\122\uff94\123\uff94\124" +
    "\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131\uff94\132\uff94" +
    "\001\002\000\010\005\333\070\332\073\uff91\001\002\000" +
    "\042\031\037\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\042\031\037" +
    "\053\033\054\020\074\055\076\042\100\016\102\023\122" +
    "\035\123\077\124\017\125\007\126\062\127\065\130\061" +
    "\131\053\132\071\001\002\000\004\073\uff90\001\002\000" +
    "\004\073\uff8f\001\002\000\076\006\022\007\050\011\014" +
    "\013\067\020\011\023\056\024\045\026\057\031\037\034" +
    "\027\040\220\044\100\045\101\046\036\052\025\053\033" +
    "\054\020\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\114\002\uff99\006\uff99\007\uff99\011" +
    "\uff99\012\uff99\013\uff99\020\uff99\022\uff99\023\uff99\024\uff99" +
    "\025\uff99\026\uff99\031\uff99\034\uff99\040\uff99\043\uff99\044" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\052\uff99\053\uff99" +
    "\054\uff99\074\uff99\076\uff99\100\uff99\102\uff99\122\uff99\123" +
    "\uff99\124\uff99\125\uff99\126\uff99\127\uff99\130\uff99\131\uff99" +
    "\132\uff99\001\002\000\004\073\352\001\002\000\004\073" +
    "\350\001\002\000\004\073\343\001\002\000\076\006\022" +
    "\007\050\011\014\013\067\020\011\023\056\024\045\026" +
    "\057\031\037\034\027\040\220\044\100\045\101\046\036" +
    "\052\025\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\116\002\uff97\006" +
    "\uff97\007\uff97\011\uff97\012\uff97\013\uff97\020\uff97\021\345" +
    "\022\uff97\023\uff97\024\uff97\025\uff97\026\uff97\031\uff97\034" +
    "\uff97\040\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047\uff97" +
    "\050\uff97\052\uff97\053\uff97\054\uff97\074\uff97\076\uff97\100" +
    "\uff97\102\uff97\122\uff97\123\uff97\124\uff97\125\uff97\126\uff97" +
    "\127\uff97\130\uff97\131\uff97\132\uff97\001\002\000\004\073" +
    "\346\001\002\000\076\006\022\007\050\011\014\013\067" +
    "\020\011\023\056\024\045\026\057\031\037\034\027\040" +
    "\220\044\100\045\101\046\036\052\025\053\033\054\020" +
    "\074\055\076\042\100\016\102\023\122\035\123\077\124" +
    "\017\125\007\126\062\127\065\130\061\131\053\132\071" +
    "\001\002\000\114\002\uff95\006\uff95\007\uff95\011\uff95\012" +
    "\uff95\013\uff95\020\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\026\uff95\031\uff95\034\uff95\040\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\047\uff95\050\uff95\052\uff95\053\uff95\054\uff95" +
    "\074\uff95\076\uff95\100\uff95\102\uff95\122\uff95\123\uff95\124" +
    "\uff95\125\uff95\126\uff95\127\uff95\130\uff95\131\uff95\132\uff95" +
    "\001\002\000\076\006\022\007\050\011\014\013\067\020" +
    "\011\023\056\024\045\026\057\031\037\034\027\040\220" +
    "\044\100\045\101\046\036\052\025\053\033\054\020\074" +
    "\055\076\042\100\016\102\023\122\035\123\077\124\017" +
    "\125\007\126\062\127\065\130\061\131\053\132\071\001" +
    "\002\000\122\002\uff93\006\uff93\007\uff93\011\uff93\012\uff93" +
    "\013\uff93\015\uff93\016\uff93\020\uff93\021\uff93\022\uff93\023" +
    "\uff93\024\uff93\025\uff93\026\uff93\031\uff93\034\uff93\040\uff93" +
    "\043\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\052" +
    "\uff93\053\uff93\054\uff93\074\uff93\076\uff93\100\uff93\102\uff93" +
    "\122\uff93\123\uff93\124\uff93\125\uff93\126\uff93\127\uff93\130" +
    "\uff93\131\uff93\132\uff93\001\002\000\076\006\022\007\050" +
    "\011\014\013\067\020\011\023\056\024\045\026\057\031" +
    "\037\034\027\040\220\044\100\045\101\046\036\052\025" +
    "\053\033\054\020\074\055\076\042\100\016\102\023\122" +
    "\035\123\077\124\017\125\007\126\062\127\065\130\061" +
    "\131\053\132\071\001\002\000\114\002\uff96\006\uff96\007" +
    "\uff96\011\uff96\012\uff96\013\uff96\020\uff96\022\uff96\023\uff96" +
    "\024\uff96\025\uff96\026\uff96\031\uff96\034\uff96\040\uff96\043" +
    "\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\052\uff96" +
    "\053\uff96\054\uff96\074\uff96\076\uff96\100\uff96\102\uff96\122" +
    "\uff96\123\uff96\124\uff96\125\uff96\126\uff96\127\uff96\130\uff96" +
    "\131\uff96\132\uff96\001\002\000\004\002\uffff\001\002\000" +
    "\134\004\uff7e\005\uff7e\027\uff7e\030\uff7e\032\uff7e\033\uff7e" +
    "\037\uff7e\040\uff7e\041\uff7e\053\uff7e\054\uff7e\055\uff7e\056" +
    "\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e" +
    "\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\073" +
    "\uff7e\074\uff7e\075\uff7e\077\uff7e\100\uff7e\101\uff7e\103\uff7e" +
    "\104\uff7e\105\uff7e\106\uff7e\110\uff7e\111\uff7e\112\uff7e\113" +
    "\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e\120\uff7e\121\uff7e" +
    "\001\002\000\006\070\362\077\363\001\002\000\004\073" +
    "\360\001\002\000\042\031\037\053\033\054\020\074\055" +
    "\076\042\100\016\102\023\122\035\123\077\124\017\125" +
    "\007\126\062\127\065\130\061\131\053\132\071\001\002" +
    "\000\006\070\uff78\077\uff78\001\002\000\042\031\037\053" +
    "\033\054\020\074\055\076\042\100\016\102\023\122\035" +
    "\123\077\124\017\125\007\126\062\127\065\130\061\131" +
    "\053\132\071\001\002\000\134\004\uff7b\005\uff7b\027\uff7b" +
    "\030\uff7b\032\uff7b\033\uff7b\037\uff7b\040\uff7b\041\uff7b\053" +
    "\uff7b\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b" +
    "\062\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070" +
    "\uff7b\071\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\110" +
    "\uff7b\111\uff7b\112\uff7b\113\uff7b\114\uff7b\115\uff7b\116\uff7b" +
    "\117\uff7b\120\uff7b\121\uff7b\001\002\000\004\073\365\001" +
    "\002\000\042\031\037\053\033\054\020\074\055\076\042" +
    "\100\016\102\023\122\035\123\077\124\017\125\007\126" +
    "\062\127\065\130\061\131\053\132\071\001\002\000\006" +
    "\070\uff77\077\uff77\001\002\000\042\031\037\053\033\054" +
    "\020\074\055\076\042\100\016\102\023\122\035\123\077" +
    "\124\017\125\007\126\062\127\065\130\061\131\053\132" +
    "\071\001\002\000\050\005\uff72\040\uff72\070\uff72\071\uff72" +
    "\072\uff72\073\uff72\075\uff72\077\uff72\101\uff72\110\uff72\111" +
    "\uff72\112\uff72\113\uff72\114\uff72\115\uff72\116\uff72\117\uff72" +
    "\120\uff72\121\uff72\001\002\000\010\040\uffc5\070\313\071" +
    "\uffc5\001\002\000\004\073\373\001\002\000\076\006\022" +
    "\007\050\011\014\013\067\020\011\023\056\024\045\026" +
    "\057\031\037\034\027\040\220\044\100\045\101\046\036" +
    "\052\025\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\120\002\uffa1\006" +
    "\uffa1\007\uffa1\011\uffa1\012\uffa1\013\uffa1\014\376\015\375" +
    "\020\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\031" +
    "\uffa1\034\uffa1\040\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\047\uffa1\050\uffa1\052\uffa1\053\uffa1\054\uffa1\074\uffa1\076" +
    "\uffa1\100\uffa1\102\uffa1\122\uffa1\123\uffa1\124\uffa1\125\uffa1" +
    "\126\uffa1\127\uffa1\130\uffa1\131\uffa1\132\uffa1\001\002\000" +
    "\004\073\u010a\001\002\000\042\031\037\053\033\054\020" +
    "\074\055\076\042\100\016\102\023\122\035\123\077\124" +
    "\017\125\007\126\062\127\065\130\061\131\053\132\071" +
    "\001\002\000\120\002\uffa2\006\uffa2\007\uffa2\011\uffa2\012" +
    "\uffa2\013\uffa2\014\u0101\015\u0100\020\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\031\uffa2\034\uffa2\040\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\074\uffa2\076\uffa2\100\uffa2\102\uffa2\122" +
    "\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2" +
    "\131\uffa2\132\uffa2\001\002\000\004\073\u0105\001\002\000" +
    "\042\031\037\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\004\073\u0103" +
    "\001\002\000\076\006\022\007\050\011\014\013\067\020" +
    "\011\023\056\024\045\026\057\031\037\034\027\040\220" +
    "\044\100\045\101\046\036\052\025\053\033\054\020\074" +
    "\055\076\042\100\016\102\023\122\035\123\077\124\017" +
    "\125\007\126\062\127\065\130\061\131\053\132\071\001" +
    "\002\000\120\002\uff9d\006\uff9d\007\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\020\uff9d\022\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\uff9d\031\uff9d\034\uff9d\040\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\074\uff9d\076\uff9d\100\uff9d\102\uff9d\122\uff9d" +
    "\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131" +
    "\uff9d\132\uff9d\001\002\000\076\006\022\007\050\011\014" +
    "\013\067\020\011\023\056\024\045\026\057\031\037\034" +
    "\027\040\220\044\100\045\101\046\036\052\025\053\033" +
    "\054\020\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\114\002\uff9f\006\uff9f\007\uff9f\011" +
    "\uff9f\012\uff9f\013\uff9f\020\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\031\uff9f\034\uff9f\040\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\074\uff9f\076\uff9f\100\uff9f\102\uff9f\122\uff9f\123" +
    "\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f" +
    "\132\uff9f\001\002\000\004\073\u0108\001\002\000\076\006" +
    "\022\007\050\011\014\013\067\020\011\023\056\024\045" +
    "\026\057\031\037\034\027\040\220\044\100\045\101\046" +
    "\036\052\025\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\120\002\uff9e" +
    "\006\uff9e\007\uff9e\011\uff9e\012\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\020\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e" +
    "\031\uff9e\034\uff9e\040\uff9e\043\uff9e\044\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\054\uff9e\074\uff9e" +
    "\076\uff9e\100\uff9e\102\uff9e\122\uff9e\123\uff9e\124\uff9e\125" +
    "\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132\uff9e\001\002" +
    "\000\076\006\022\007\050\011\014\013\067\020\011\023" +
    "\056\024\045\026\057\031\037\034\027\040\220\044\100" +
    "\045\101\046\036\052\025\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\114\002\uffa0\006\uffa0\007\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\020\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0\031" +
    "\uffa0\034\uffa0\040\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\047\uffa0\050\uffa0\052\uffa0\053\uffa0\054\uffa0\074\uffa0\076" +
    "\uffa0\100\uffa0\102\uffa0\122\uffa0\123\uffa0\124\uffa0\125\uffa0" +
    "\126\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\001\002\000" +
    "\042\031\uffd1\053\uffd1\054\uffd1\074\uffd1\076\uffd1\100\uffd1" +
    "\102\uffd1\122\uffd1\123\uffd1\124\uffd1\125\uffd1\126\uffd1\127" +
    "\uffd1\130\uffd1\131\uffd1\132\uffd1\001\002\000\042\031\uffd7" +
    "\053\uffd7\054\uffd7\074\uffd7\076\uffd7\100\uffd7\102\uffd7\122" +
    "\uffd7\123\uffd7\124\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7" +
    "\131\uffd7\132\uffd7\001\002\000\042\031\uffd6\053\uffd6\054" +
    "\uffd6\074\uffd6\076\uffd6\100\uffd6\102\uffd6\122\uffd6\123\uffd6" +
    "\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\132" +
    "\uffd6\001\002\000\042\031\uffd4\053\uffd4\054\uffd4\074\uffd4" +
    "\076\uffd4\100\uffd4\102\uffd4\122\uffd4\123\uffd4\124\uffd4\125" +
    "\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\132\uffd4\001\002" +
    "\000\042\031\uffd9\053\uffd9\054\uffd9\074\uffd9\076\uffd9\100" +
    "\uffd9\102\uffd9\122\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9" +
    "\127\uffd9\130\uffd9\131\uffd9\132\uffd9\001\002\000\042\031" +
    "\uffd8\053\uffd8\054\uffd8\074\uffd8\076\uffd8\100\uffd8\102\uffd8" +
    "\122\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\130" +
    "\uffd8\131\uffd8\132\uffd8\001\002\000\042\031\uffd3\053\uffd3" +
    "\054\uffd3\074\uffd3\076\uffd3\100\uffd3\102\uffd3\122\uffd3\123" +
    "\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3\131\uffd3" +
    "\132\uffd3\001\002\000\042\031\uffd0\053\uffd0\054\uffd0\074" +
    "\uffd0\076\uffd0\100\uffd0\102\uffd0\122\uffd0\123\uffd0\124\uffd0" +
    "\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0\132\uffd0\001" +
    "\002\000\042\031\037\053\033\054\020\074\055\076\042" +
    "\100\016\102\023\122\035\123\077\124\017\125\007\126" +
    "\062\127\065\130\061\131\053\132\071\001\002\000\042" +
    "\031\037\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\042\031\uffd2\053" +
    "\uffd2\054\uffd2\074\uffd2\076\uffd2\100\uffd2\102\uffd2\122\uffd2" +
    "\123\uffd2\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131" +
    "\uffd2\132\uffd2\001\002\000\042\031\uffd5\053\uffd5\054\uffd5" +
    "\074\uffd5\076\uffd5\100\uffd5\102\uffd5\122\uffd5\123\uffd5\124" +
    "\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\132\uffd5" +
    "\001\002\000\010\040\uffdb\070\313\071\uffdb\001\002\000" +
    "\010\040\uffda\070\313\071\uffda\001\002\000\040\053\033" +
    "\054\020\074\055\076\042\100\016\102\023\122\035\123" +
    "\077\124\017\125\007\126\062\127\065\130\061\131\053" +
    "\132\071\001\002\000\004\070\u011c\001\002\000\040\053" +
    "\033\054\020\074\055\076\042\100\016\102\023\122\035" +
    "\123\077\124\017\125\007\126\062\127\065\130\061\131" +
    "\053\132\071\001\002\000\006\070\u011e\101\u011f\001\002" +
    "\000\040\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\010\040\uffcb\071" +
    "\uffcb\073\uffcb\001\002\000\004\101\u0121\001\002\000\010" +
    "\040\uffcc\071\uffcc\073\uffcc\001\002\000\010\040\uffa8\070" +
    "\313\071\uffa8\001\002\000\006\027\u0129\070\231\001\002" +
    "\000\006\027\u0125\070\uff74\001\002\000\042\031\037\053" +
    "\033\054\020\074\055\076\042\100\016\102\023\122\035" +
    "\123\077\124\017\125\007\126\062\127\065\130\061\131" +
    "\053\132\071\001\002\000\004\073\u0127\001\002\000\076" +
    "\006\022\007\050\011\014\013\067\020\011\023\056\024" +
    "\045\026\057\031\037\034\027\040\220\044\100\045\101" +
    "\046\036\052\025\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\114\002" +
    "\uff9b\006\uff9b\007\uff9b\011\uff9b\012\uff9b\013\uff9b\020\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\031\uff9b\034" +
    "\uff9b\040\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b" +
    "\050\uff9b\052\uff9b\053\uff9b\054\uff9b\074\uff9b\076\uff9b\100" +
    "\uff9b\102\uff9b\122\uff9b\123\uff9b\124\uff9b\125\uff9b\126\uff9b" +
    "\127\uff9b\130\uff9b\131\uff9b\132\uff9b\001\002\000\004\052" +
    "\025\001\002\000\004\073\u012b\001\002\000\076\006\022" +
    "\007\050\011\014\013\067\020\011\023\056\024\045\026" +
    "\057\031\037\034\027\040\220\044\100\045\101\046\036" +
    "\052\025\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\114\002\uff9a\006" +
    "\uff9a\007\uff9a\011\uff9a\012\uff9a\013\uff9a\020\uff9a\022\uff9a" +
    "\023\uff9a\024\uff9a\025\uff9a\026\uff9a\031\uff9a\034\uff9a\040" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\074\uff9a\076\uff9a\100\uff9a\102" +
    "\uff9a\122\uff9a\123\uff9a\124\uff9a\125\uff9a\126\uff9a\127\uff9a" +
    "\130\uff9a\131\uff9a\132\uff9a\001\002\000\134\004\uff80\005" +
    "\uff80\027\uff80\030\uff80\032\uff80\033\uff80\037\uff80\040\uff80" +
    "\041\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060" +
    "\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066\uff80" +
    "\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\uff80\075" +
    "\uff80\077\uff80\100\uff80\101\uff80\103\uff80\104\uff80\105\uff80" +
    "\106\uff80\110\uff80\111\uff80\112\uff80\113\uff80\114\uff80\115" +
    "\uff80\116\uff80\117\uff80\120\uff80\121\uff80\001\002\000\004" +
    "\101\u0130\001\002\000\006\070\313\101\uff7a\001\002\000" +
    "\134\004\uff7d\005\uff7d\027\uff7d\030\uff7d\032\uff7d\033\uff7d" +
    "\037\uff7d\040\uff7d\041\uff7d\053\uff7d\054\uff7d\055\uff7d\056" +
    "\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d" +
    "\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073" +
    "\uff7d\074\uff7d\075\uff7d\077\uff7d\100\uff7d\101\uff7d\103\uff7d" +
    "\104\uff7d\105\uff7d\106\uff7d\110\uff7d\111\uff7d\112\uff7d\113" +
    "\uff7d\114\uff7d\115\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d" +
    "\001\002\000\126\004\uff85\005\uff85\027\uff85\030\uff85\032" +
    "\uff85\033\uff85\037\uff85\040\uff85\041\uff85\053\uff85\054\uff85" +
    "\055\uff85\056\uff85\057\uff85\060\uff85\062\uff85\063\uff85\064" +
    "\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85" +
    "\073\uff85\075\uff85\077\uff85\101\uff85\103\uff85\104\uff85\105" +
    "\uff85\106\uff85\110\uff85\111\uff85\112\uff85\113\uff85\114\uff85" +
    "\115\uff85\116\uff85\117\uff85\120\uff85\121\uff85\001\002\000" +
    "\044\031\037\053\033\054\020\074\055\075\u015a\076\042" +
    "\100\016\102\023\122\035\123\077\124\017\125\007\126" +
    "\062\127\065\130\061\131\053\132\071\001\002\000\050" +
    "\031\037\041\u013a\053\033\054\020\055\u013b\074\055\076" +
    "\042\100\016\101\u0136\102\023\122\035\123\077\124\017" +
    "\125\007\126\062\127\065\130\061\131\053\132\071\001" +
    "\002\000\004\131\u0135\001\002\000\126\004\uff6d\005\uff6d" +
    "\027\uff6d\030\uff6d\032\uff6d\033\uff6d\037\uff6d\040\uff6d\041" +
    "\uff6d\053\uff6d\054\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d" +
    "\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070" +
    "\uff6d\071\uff6d\072\uff6d\073\uff6d\075\uff6d\077\uff6d\101\uff6d" +
    "\103\uff6d\104\uff6d\105\uff6d\106\uff6d\110\uff6d\111\uff6d\112" +
    "\uff6d\113\uff6d\114\uff6d\115\uff6d\116\uff6d\117\uff6d\120\uff6d" +
    "\121\uff6d\001\002\000\126\004\uff71\005\uff71\027\uff71\030" +
    "\uff71\032\uff71\033\uff71\037\uff71\040\uff71\041\uff71\053\uff71" +
    "\054\uff71\055\uff71\056\uff71\057\uff71\060\uff71\062\uff71\063" +
    "\uff71\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71" +
    "\072\uff71\073\uff71\075\uff71\077\uff71\101\uff71\103\uff71\104" +
    "\uff71\105\uff71\106\uff71\110\uff71\111\uff71\112\uff71\113\uff71" +
    "\114\uff71\115\uff71\116\uff71\117\uff71\120\uff71\121\uff71\001" +
    "\002\000\004\101\u0159\001\002\000\050\031\037\041\u014c" +
    "\053\033\054\020\055\u014d\074\055\076\042\100\016\101" +
    "\uff6b\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\006\070" +
    "\u0145\101\uff6c\001\002\000\042\031\037\053\033\054\020" +
    "\074\055\076\042\100\016\102\023\122\035\123\077\124" +
    "\017\125\007\126\062\127\065\130\061\131\053\132\071" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\010\070\uff5d\072\u013d\101\uff5d\001\002\000\042\031\037" +
    "\053\033\054\020\074\055\076\042\100\016\102\023\122" +
    "\035\123\077\124\017\125\007\126\062\127\065\130\061" +
    "\131\053\132\071\001\002\000\006\070\uff5c\101\uff5c\001" +
    "\002\000\006\070\u0140\101\uff6a\001\002\000\044\031\037" +
    "\041\u0143\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\042\031\037\053" +
    "\033\054\020\074\055\076\042\100\016\102\023\122\035" +
    "\123\077\124\017\125\007\126\062\127\065\130\061\131" +
    "\053\132\071\001\002\000\004\070\u0145\001\002\000\042" +
    "\031\037\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\004\101\uff68\001" +
    "\002\000\050\031\uff5f\041\uff5f\053\uff5f\054\uff5f\055\uff5f" +
    "\074\uff5f\076\uff5f\100\uff5f\101\uff5f\102\uff5f\122\uff5f\123" +
    "\uff5f\124\uff5f\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f" +
    "\132\uff5f\001\002\000\006\070\u0147\101\uff69\001\002\000" +
    "\044\031\uff5e\041\u0148\053\uff5e\054\uff5e\074\uff5e\076\uff5e" +
    "\100\uff5e\102\uff5e\122\uff5e\123\uff5e\124\uff5e\125\uff5e\126" +
    "\uff5e\127\uff5e\130\uff5e\131\uff5e\132\uff5e\001\002\000\042" +
    "\031\037\053\033\054\020\074\055\076\042\100\016\102" +
    "\023\122\035\123\077\124\017\125\007\126\062\127\065" +
    "\130\061\131\053\132\071\001\002\000\004\101\uff67\001" +
    "\002\000\004\101\uff66\001\002\000\006\070\u0158\101\uff65" +
    "\001\002\000\042\031\037\053\033\054\020\074\055\076" +
    "\042\100\016\102\023\122\035\123\077\124\017\125\007" +
    "\126\062\127\065\130\061\131\053\132\071\001\002\000" +
    "\042\031\037\053\033\054\020\074\055\076\042\100\016" +
    "\102\023\122\035\123\077\124\017\125\007\126\062\127" +
    "\065\130\061\131\053\132\071\001\002\000\006\070\u014f" +
    "\101\uff64\001\002\000\044\031\037\041\u0151\053\033\054" +
    "\020\074\055\076\042\100\016\102\023\122\035\123\077" +
    "\124\017\125\007\126\062\127\065\130\061\131\053\132" +
    "\071\001\002\000\042\031\037\053\033\054\020\074\055" +
    "\076\042\100\016\102\023\122\035\123\077\124\017\125" +
    "\007\126\062\127\065\130\061\131\053\132\071\001\002" +
    "\000\042\031\037\053\033\054\020\074\055\076\042\100" +
    "\016\102\023\122\035\123\077\124\017\125\007\126\062" +
    "\127\065\130\061\131\053\132\071\001\002\000\004\101" +
    "\uff62\001\002\000\006\070\u0154\101\uff63\001\002\000\044" +
    "\031\uff5e\041\u0155\053\uff5e\054\uff5e\074\uff5e\076\uff5e\100" +
    "\uff5e\102\uff5e\122\uff5e\123\uff5e\124\uff5e\125\uff5e\126\uff5e" +
    "\127\uff5e\130\uff5e\131\uff5e\132\uff5e\001\002\000\042\031" +
    "\037\053\033\054\020\074\055\076\042\100\016\102\023" +
    "\122\035\123\077\124\017\125\007\126\062\127\065\130" +
    "\061\131\053\132\071\001\002\000\004\101\uff61\001\002" +
    "\000\004\101\uff60\001\002\000\050\031\uff5e\041\uff5e\053" +
    "\uff5e\054\uff5e\055\uff5e\074\uff5e\076\uff5e\100\uff5e\101\uff5e" +
    "\102\uff5e\122\uff5e\123\uff5e\124\uff5e\125\uff5e\126\uff5e\127" +
    "\uff5e\130\uff5e\131\uff5e\132\uff5e\001\002\000\126\004\uff70" +
    "\005\uff70\027\uff70\030\uff70\032\uff70\033\uff70\037\uff70\040" +
    "\uff70\041\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\060\uff70\062\uff70\063\uff70\064\uff70\065\uff70\066\uff70\067" +
    "\uff70\070\uff70\071\uff70\072\uff70\073\uff70\075\uff70\077\uff70" +
    "\101\uff70\103\uff70\104\uff70\105\uff70\106\uff70\110\uff70\111" +
    "\uff70\112\uff70\113\uff70\114\uff70\115\uff70\116\uff70\117\uff70" +
    "\120\uff70\121\uff70\001\002\000\126\004\uff6f\005\uff6f\027" +
    "\uff6f\030\uff6f\032\uff6f\033\uff6f\037\uff6f\040\uff6f\041\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\062" +
    "\uff6f\063\uff6f\064\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\073\uff6f\075\uff6f\077\uff6f\101\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\110\uff6f\111\uff6f\112\uff6f" +
    "\113\uff6f\114\uff6f\115\uff6f\116\uff6f\117\uff6f\120\uff6f\121" +
    "\uff6f\001\002\000\006\070\313\075\u015c\001\002\000\126" +
    "\004\uff6e\005\uff6e\027\uff6e\030\uff6e\032\uff6e\033\uff6e\037" +
    "\uff6e\040\uff6e\041\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e" +
    "\057\uff6e\060\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\075\uff6e" +
    "\077\uff6e\101\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\110" +
    "\uff6e\111\uff6e\112\uff6e\113\uff6e\114\uff6e\115\uff6e\116\uff6e" +
    "\117\uff6e\120\uff6e\121\uff6e\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015a\000\076\002\057\003\011\004\103\005\050\006" +
    "\037\007\014\010\065\011\045\012\004\013\023\014\025" +
    "\017\073\024\102\027\030\030\051\047\031\050\072\051" +
    "\046\052\005\053\063\055\040\061\074\072\003\073\101" +
    "\074\067\075\075\076\012\100\027\104\007\110\053\001" +
    "\001\000\004\114\u0130\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\073\072\003\073\101\074" +
    "\067\075\075\076\012\100\u012e\102\u012d\104\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\073\072" +
    "\003\073\101\074\u0123\105\u0122\001\001\000\022\017\073" +
    "\072\003\073\101\074\067\075\075\076\012\100\u0121\104" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u0114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\017\073\072\003\073\101\074\067\075" +
    "\075\076\371\104\007\001\001\000\002\001\001\000\022" +
    "\017\073\072\003\073\101\074\067\075\075\076\012\100" +
    "\370\104\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\017\073\072\003\073\101\074" +
    "\067\075\075\076\356\101\355\104\007\001\001\000\074" +
    "\003\353\004\103\005\050\006\037\007\014\010\065\011" +
    "\045\012\004\013\023\014\025\017\073\024\102\027\030" +
    "\030\051\047\031\050\072\051\046\052\005\053\063\055" +
    "\040\061\074\072\003\073\101\074\067\075\075\076\012" +
    "\100\027\104\007\110\053\001\001\000\002\001\001\000" +
    "\004\023\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\017\073\072\003" +
    "\073\101\074\067\075\075\076\012\100\311\103\310\104" +
    "\007\001\001\000\006\031\250\036\251\001\001\000\010" +
    "\031\236\032\241\033\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\017\073\072\003" +
    "\073\101\074\067\075\075\076\232\104\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\073\072\003\073\101\074\227\105\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\017\073\072\161\073\101\001\001\000" +
    "\004\062\150\001\001\000\004\016\132\001\001\000\002" +
    "\001\001\000\022\017\073\072\003\073\101\074\067\075" +
    "\075\076\012\100\112\104\007\001\001\000\020\017\073" +
    "\072\003\073\101\074\067\075\075\076\105\104\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\003\104" +
    "\004\103\005\050\006\037\007\014\010\065\011\045\012" +
    "\004\013\023\014\025\017\073\024\102\027\030\030\051" +
    "\047\031\050\072\051\046\052\005\053\063\055\040\061" +
    "\074\072\003\073\101\074\067\075\075\076\012\100\027" +
    "\104\007\110\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\017\073\072\003\073\101\074\067\075\075" +
    "\076\107\104\007\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\111\104\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\114\104\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\073\072\003\073" +
    "\101\074\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\006\037" +
    "\007\014\010\065\011\045\012\004\013\023\014\025\017" +
    "\073\024\102\027\030\030\051\061\154\072\003\073\101" +
    "\074\067\075\075\076\012\100\027\104\007\110\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\006\037\007\014\010\065\011\045\012\004\013" +
    "\023\014\025\017\073\024\102\027\030\030\051\061\160" +
    "\072\003\073\101\074\067\075\075\076\012\100\027\104" +
    "\007\110\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\111\163\001" +
    "\001\000\002\001\001\000\010\077\170\112\171\113\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\073\072" +
    "\003\073\101\074\067\075\075\076\176\104\007\001\001" +
    "\000\002\001\001\000\004\077\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\005" +
    "\220\006\037\007\014\010\065\011\045\012\004\013\023" +
    "\014\025\017\073\024\102\027\030\030\051\061\074\072" +
    "\003\073\101\074\067\075\075\076\012\100\027\104\007" +
    "\110\053\115\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\004\223\005\050\006\037" +
    "\007\014\010\065\011\045\012\004\013\023\014\025\017" +
    "\073\024\102\027\030\030\051\047\031\050\072\051\046" +
    "\052\005\053\063\055\040\060\222\061\074\072\003\073" +
    "\101\074\067\075\075\076\012\100\027\104\007\110\053" +
    "\001\001\000\072\004\225\005\050\006\037\007\014\010" +
    "\065\011\045\012\004\013\023\014\025\017\073\024\102" +
    "\027\030\030\051\047\031\050\072\051\046\052\005\053" +
    "\063\055\040\061\074\072\003\073\101\074\067\075\075" +
    "\076\012\100\027\104\007\110\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\017\073\072\003\073\101\074" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\056" +
    "\005\220\006\037\007\014\010\065\011\045\012\004\013" +
    "\023\014\025\017\073\024\102\027\030\030\051\061\074" +
    "\072\003\073\101\074\067\075\075\076\012\100\027\104" +
    "\007\110\053\115\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\243\001\001\000\002" +
    "\001\001\000\006\031\236\032\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\272\001\001\000\004\036\253\001\001\000" +
    "\002\001\001\000\004\036\255\001\001\000\002\001\001" +
    "\000\006\034\260\035\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\034\260\035\266\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\034\260" +
    "\035\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\260\035\276\001\001\000\002\001\001\000\006" +
    "\034\260\035\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\034\260\035\304\001\001" +
    "\000\002\001\001\000\006\034\260\035\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\114\104\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\005\220" +
    "\006\037\007\014\010\065\011\045\012\004\013\023\014" +
    "\025\017\073\024\102\027\030\030\051\061\074\072\003" +
    "\073\101\074\067\075\075\076\012\100\027\104\007\110" +
    "\053\115\321\001\001\000\006\064\325\065\322\001\001" +
    "\000\004\064\340\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\330\104\007" +
    "\001\001\000\002\001\001\000\056\005\220\006\037\007" +
    "\014\010\065\011\045\012\004\013\023\014\025\017\073" +
    "\024\102\027\030\030\051\061\074\072\003\073\101\074" +
    "\067\075\075\076\012\100\027\104\007\110\053\115\327" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\334\104\007" +
    "\001\001\000\020\017\073\072\003\073\101\074\067\075" +
    "\075\076\333\104\007\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\005\220\006\037\007\014\010\065\011" +
    "\045\012\004\013\023\014\025\017\073\024\102\027\030" +
    "\030\051\061\074\072\003\073\101\074\067\075\075\076" +
    "\012\100\027\104\007\110\053\115\336\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\056\005\220\006\037\007\014\010\065\011\045" +
    "\012\004\013\023\014\025\017\073\024\102\027\030\030" +
    "\051\061\074\072\003\073\101\074\067\075\075\076\012" +
    "\100\027\104\007\110\053\115\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\005\220\006\037\007\014" +
    "\010\065\011\045\012\004\013\023\014\025\017\073\024" +
    "\102\027\030\030\051\061\074\072\003\073\101\074\067" +
    "\075\075\076\012\100\027\104\007\110\053\115\346\001" +
    "\001\000\002\001\001\000\056\005\220\006\037\007\014" +
    "\010\065\011\045\012\004\013\023\014\025\017\073\024" +
    "\102\027\030\030\051\061\074\072\003\073\101\074\067" +
    "\075\075\076\012\100\027\104\007\110\053\115\350\001" +
    "\001\000\002\001\001\000\056\005\220\006\037\007\014" +
    "\010\065\011\045\012\004\013\023\014\025\017\073\024" +
    "\102\027\030\030\051\061\074\072\003\073\101\074\067" +
    "\075\075\076\012\100\027\104\007\110\053\115\352\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\017\073\072" +
    "\003\073\101\074\067\075\075\076\360\104\007\001\001" +
    "\000\002\001\001\000\020\017\073\072\003\073\101\074" +
    "\067\075\075\076\363\104\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\017\073\072\003\073\101\074" +
    "\067\075\075\076\365\104\007\001\001\000\002\001\001" +
    "\000\020\017\073\072\003\073\101\074\067\075\075\076" +
    "\367\104\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\220\006\037\007\014\010" +
    "\065\011\045\012\004\013\023\014\025\017\073\024\102" +
    "\027\030\030\051\061\074\072\003\073\101\074\067\075" +
    "\075\076\012\100\027\104\007\110\053\115\373\001\001" +
    "\000\004\063\376\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\u0106\104\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\u0101\104\007" +
    "\001\001\000\002\001\001\000\056\005\220\006\037\007" +
    "\014\010\065\011\045\012\004\013\023\014\025\017\073" +
    "\024\102\027\030\030\051\061\074\072\003\073\101\074" +
    "\067\075\075\076\012\100\027\104\007\110\053\115\u0103" +
    "\001\001\000\002\001\001\000\056\005\220\006\037\007" +
    "\014\010\065\011\045\012\004\013\023\014\025\017\073" +
    "\024\102\027\030\030\051\061\074\072\003\073\101\074" +
    "\067\075\075\076\012\100\027\104\007\110\053\115\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\005" +
    "\220\006\037\007\014\010\065\011\045\012\004\013\023" +
    "\014\025\017\073\024\102\027\030\030\051\061\074\072" +
    "\003\073\101\074\067\075\075\076\012\100\027\104\007" +
    "\110\053\115\u0108\001\001\000\002\001\001\000\056\005" +
    "\220\006\037\007\014\010\065\011\045\012\004\013\023" +
    "\014\025\017\073\024\102\027\030\030\051\061\074\072" +
    "\003\073\101\074\067\075\075\076\012\100\027\104\007" +
    "\110\053\115\u010a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\017\073\072\003\073\101\074\067" +
    "\075\075\076\012\100\u0118\104\007\001\001\000\022\017" +
    "\073\072\003\073\101\074\067\075\075\076\012\100\u0117" +
    "\104\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\017\073\072\003" +
    "\073\101\074\u011a\001\001\000\002\001\001\000\012\017" +
    "\073\072\003\073\101\074\u011c\001\001\000\002\001\001" +
    "\000\012\017\073\072\003\073\101\074\u011f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\u0125\104\007" +
    "\001\001\000\002\001\001\000\056\005\220\006\037\007" +
    "\014\010\065\011\045\012\004\013\023\014\025\017\073" +
    "\024\102\027\030\030\051\061\074\072\003\073\101\074" +
    "\067\075\075\076\012\100\027\104\007\110\053\115\u0127" +
    "\001\001\000\002\001\001\000\004\024\u0129\001\001\000" +
    "\002\001\001\000\056\005\220\006\037\007\014\010\065" +
    "\011\045\012\004\013\023\014\025\017\073\024\102\027" +
    "\030\030\051\061\074\072\003\073\101\074\067\075\075" +
    "\076\012\100\027\104\007\110\053\115\u012b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\017" +
    "\073\072\003\073\101\074\067\075\075\076\012\100\u015a" +
    "\104\007\001\001\000\026\017\073\037\u0136\072\003\073" +
    "\101\074\067\075\075\076\u013b\104\007\106\u0138\107\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\073\072\003\073\101" +
    "\074\067\075\075\076\u013b\104\007\106\u014a\001\001\000" +
    "\002\001\001\000\020\017\073\072\003\073\101\074\067" +
    "\075\075\076\u0149\104\007\001\001\000\020\017\073\072" +
    "\003\073\101\074\067\075\075\076\u013e\104\007\001\001" +
    "\000\002\001\001\000\020\017\073\072\003\073\101\074" +
    "\067\075\075\076\u013d\104\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\017\073\072\003\073\101\074" +
    "\067\075\075\076\u013b\104\007\106\u0141\107\u0140\001\001" +
    "\000\022\017\073\072\003\073\101\074\067\075\075\076" +
    "\u013b\104\007\106\u0145\001\001\000\002\001\001\000\020" +
    "\017\073\072\003\073\101\074\067\075\075\076\u0143\104" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\017\073\072\003\073" +
    "\101\074\067\075\075\076\u0148\104\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\017" +
    "\073\072\003\073\101\074\067\075\075\076\u0156\104\007" +
    "\001\001\000\020\017\073\072\003\073\101\074\067\075" +
    "\075\076\u014d\104\007\001\001\000\002\001\001\000\024" +
    "\017\073\072\003\073\101\074\067\075\075\076\u013b\104" +
    "\007\106\u0141\107\u014f\001\001\000\022\017\073\072\003" +
    "\073\101\074\067\075\075\076\u013b\104\007\106\u0152\001" +
    "\001\000\020\017\073\072\003\073\101\074\067\075\075" +
    "\076\u0151\104\007\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\017\073\072\003\073\101" +
    "\074\067\075\075\076\u0155\104\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // String buffer used to store output program
    outputBuffer = new StringBuffer();
    tabCounter = 0;

    }


    // It can be "stdout" to write output program to standard
    // output or "file" to dump program in a file.
    public static String dumpOutput;

    // It's true if the semantic check is enabled
    public boolean enableSem = true;
    
    // String buffer used to store output program
    public StringBuffer outputBuffer;
    
     // counter used to count indentation level
    public static int tabCounter;

    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // Return actual symbol
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // Return semantic value of symbol in position (position)
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos+position)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {


	// Disable semantic check
    private void disableSem(){
        parser.enableSem = false;
    }
    // Return true if semantic is enabled, false otherwise
    private boolean sem(){
        return parser.enableSem;
    }
	// Error management
    private void pSemError(String message){
        System.err.println("SEM ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);

        parser.done_parsing();
    }
    private void pSemWarning(String message){
        System.err.println("SEM WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
    }
    private void pSynError(String message){
        System.err.println("SYN ERROR: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        parser.done_parsing();
    }
    private void pSynWarning(String message){
        System.err.println("SYN WARNING: line: "+parser.getLine()+" col: "+parser.getColumn()+": "+message);
        /* Quando c'e' un errore sintattico continuo il parsing ma disabilito la semantica */
        //disableSem();
    }
        
    // Write a string in output
    private void dump(String s){
        parser.outputBuffer.append(s);
    }
    private void dumpln(String s){
        parser.outputBuffer.append(s+"\n");
    }
    
    private int getIndentation()
    {
    	return ((PythonLex)parser.getScanner()).stackLength()-1; //-1 perche' ho lo zero
    }
    
    class Attributo {
    	
		public String name;
		public AttrType type;
		public Object value;

  	 	Attributo(String name, AttrType type, Object value){
			this.name = name;
			this.type = type;
			this.value = value;
    	}
		
		Attributo(String name, Object value){
				this.name = name;
				this.value = value;
        }
        
        Attributo(String name, AttrType type)
        {
        	this.name = name;
        	this.type = type;
        	this.value = new String(name);
        }

	    	//Nota: occorre ridefinire il metodo equals ereditato da Object al fine di	    
	    	//      di fornire a indexOf un metodo corretto per dire quando 2 oggetti
	    	//      sono uguali.
	    	public boolean equals(Object o){
			if((this.name).equals(((Attributo)o).name))return true;
    			else return false;
            	}
	};


  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // comment ::= COMMENT 
            {
              Attributo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo(c.toString().replace("#","--"),AttrType.COMMENT);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comment",70, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // number ::= BIN 
            {
              Attributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =new Attributo(i.toString(), AttrType.NUMBER); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // number ::= OCT 
            {
              Attributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =new Attributo(i.toString(), AttrType.NUMBER); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // number ::= HEX 
            {
              Attributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =new Attributo(i.toString(), AttrType.NUMBER); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // number ::= DECIMAL 
            {
              Attributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =new Attributo(i.toString(), AttrType.NUMBER);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // number ::= LONGINT 
            {
              Attributo RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT =new Attributo(li.toString(), AttrType.NUMBER); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // number ::= IMAGNUM 
            {
              Attributo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo(i.toString(), AttrType.NUMBER);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // number ::= FLOAT 
            {
              Attributo RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo(f.toString(), AttrType.NUMBER);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // unop ::= TILDE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("unop",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // binop ::= DIVDIV 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // binop ::= ECOM 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="and";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // binop ::= PIPE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="or";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // binop ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = not;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // binop ::= MULTMULT 
            {
              Object RESULT =null;
		RESULT = "^";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // binop ::= OR 
            {
              Object RESULT =null;
		RESULT = "or";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // binop ::= AND 
            {
              Object RESULT =null;
		RESULT = "and";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // binop ::= NEQ 
            {
              Object RESULT =null;
		RESULT = "~=";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // binop ::= EQ 
            {
              Object RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = eq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // binop ::= MAIEQ 
            {
              Object RESULT =null;
		int maieqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int maieqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object maieq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = maieq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // binop ::= MAIOR 
            {
              Object RESULT =null;
		int magleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int magright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mag = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mag;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // binop ::= MINEQ 
            {
              Object RESULT =null;
		int mineqleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mineqright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object mineq = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = mineq;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // binop ::= MINOR 
            {
              Object RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = min;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // binop ::= RSHIFT 
            {
              Object RESULT =null;
		int rshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object rshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = rshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // binop ::= LSHIFT 
            {
              Object RESULT =null;
		int lshiftleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lshiftright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object lshift = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = lshift;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // binop ::= NOT IN 
            {
              Object RESULT =null;
		int notinleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int notinright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object notin = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = notin;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // binop ::= IS NOT 
            {
              Object RESULT =null;
		int isnotleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isnotright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object isnot = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "~=";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // binop ::= IN 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = in;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // binop ::= IS 
            {
              Object RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "==";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // binop ::= MOD 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // binop ::= EXPON 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ex;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // binop ::= DIVIDE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // binop ::= MULT 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // binop ::= MINUS 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = m;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // binop ::= PLUS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = p;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("binop",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // argument ::= test ASSIGN test 
            {
              Attributo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					if(t1.type==AttrType.STRING)
						t1.name = t1.name.replaceAll("[\"\']","");
					RESULT = new Attributo(t1.name+"="+t2.name,AttrType.ASSIGN);
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // argument ::= test 
            {
              Attributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument",68, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // argument_rec ::= argument_rec argument COMMA 
            {
              Attributo RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
					((LinkedList<Attributo>)ar.value).add(a);
					ar.name = ar.name+a.name+",";
					RESULT = ar;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // argument_rec ::= argument COMMA 
            {
              Attributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
					Attributo lista = new Attributo(a.name+",", new LinkedList<Attributo>());
					((LinkedList<Attributo>)lista.value).add(a);
					RESULT = lista;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_rec",69, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // arglist ::= argument_rec MULTMULT test 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.LIST)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				RESULT = ar.name+t.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // arglist ::= argument_rec MULT test COMMA argument_rec argument COMMA MULTMULT test 
            {
              Object RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)).right;
		Attributo ar1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo ar2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t1.type != AttrType.LIST && t1.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass list after '*'");
				}
				if (t2.type != AttrType.DICT && t2.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				RESULT = ar1.name+"unpack("+t1.name+"),"+ar2.name+a.name+","+t2.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-8)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // arglist ::= argument_rec MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t1.type != AttrType.LIST && t1.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass list after '*'");
				}
				if (t2.type != AttrType.DICT && t2.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				RESULT = ar.name+"unpack("+t1.name+"),"+t2.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arglist ::= argument_rec MULT test COMMA argument_rec argument 
            {
              Object RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Attributo ar1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int ar2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int ar2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo ar2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.DICT)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: passing a dictionary after '*'");
				}
				RESULT = ar1.name+"unpack("+t.name+"),"+ar2.name+a.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arglist ::= argument_rec MULT test 
            {
              Object RESULT =null;
		int ar1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int ar1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo ar1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.DICT)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: passing a dictionary after '*'");
				}
				RESULT = ar1.name+"unpack("+t.name+")";
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arglist ::= argument_rec argument 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				RESULT = ar.name + a.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arglist ::= MULTMULT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.LIST)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				RESULT = t.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arglist ::= MULT test COMMA argument_rec argument COMMA MULTMULT test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t1.type != AttrType.LIST && t1.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass list after '*'");
				}
				if (t2.type != AttrType.DICT && t2.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				else
					RESULT = "unpack("+t1.name+"),"+ar.name+a.name+","+t2.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arglist ::= MULT test COMMA MULTMULT test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t1.type != AttrType.LIST && t1.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass list after '*'");
				}
				if (t2.type != AttrType.DICT && t2.type != AttrType.ID)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: must pass dict after '**'");
				}
				RESULT = "unpack("+t1.name+"),"+t2.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arglist ::= MULT test COMMA argument_rec argument 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.DICT)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: passing a dictionary after '*'");
				}
				RESULT = "unpack("+t.name+"),"+ar.name+a.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arglist ::= MULT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				if (t.type == AttrType.DICT)
				{
					//throw new Exception("Error: passing a dictionary with '*'");
					pSynWarning("Error: passing a dictionary after '*'");
				}
				RESULT = "unpack("+t.name+")"; 
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arglist ::= argument_rec 
            {
              Object RESULT =null;
		int arleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int arright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo ar = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				RESULT = ar.name.replace(",$","");
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arglist ::= argument 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				RESULT = a.name;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("arglist",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // trailer ::= DOT NAME 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "."+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // trailer ::= LBRACK testlist RBRACK 
            {
              String RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo tl = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
				StringBuilder sb = new StringBuilder();
				
				for (Attributo att: (LinkedList<Attributo>)tl.value)
				{
					if(att.type == AttrType.NUMBER)
					{
						att.name = ""+(Integer.parseInt(att.name)+1);
						sb.append(att.name);
						sb.append(",");
					}
					else
					{
						sb.append(att.name);
						sb.append(",");
					}
				}
				tl.name = sb.deleteCharAt(sb.length() - 1).toString();
				RESULT = "[" + tl.name + "]";
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // trailer ::= LBRACK RBRACK 
            {
              String RESULT =null;
		RESULT = "[]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // trailer ::= LPAREN arglist RPAREN 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "("+a+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // trailer ::= LPAREN RPAREN 
            {
              String RESULT =null;
		RESULT = "()";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("trailer",74, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // lambdef ::= LAMBDA COLON test 
            {
              Attributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo("function() return "+t.name+" end",AttrType.LAMBDA);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lambdef",66, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // exprlist ::= exprlist COMMA expr 
            {
              Attributo RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo explist = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					((LinkedList<Attributo>)explist.value).add(e);
					explist.name = explist.name + ", "+e.name;
					RESULT = explist;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // exprlist ::= expr 
            {
              Attributo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					Attributo lista = new Attributo(e.name, new LinkedList<Attributo>());
					((LinkedList<Attributo>)lista.value).add(e);
					RESULT = lista;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exprlist",67, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // testlist ::= testlist COMMA test 
            {
              Attributo RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo tl = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					((LinkedList<Attributo>)tl.value).add(t);
					tl.name = tl.name + ", "+t.name;
					RESULT = tl;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",62, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // testlist ::= test 
            {
              Attributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					Attributo lista = new Attributo(t.name, new LinkedList<Attributo>());
					((LinkedList<Attributo>)lista.value).add(t);
					RESULT = lista;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist",62, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // dictorsetmaker ::= dictorsetmaker COMMA test COLON test 
            {
              Attributo RESULT =null;
		int dicleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dicright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo dic = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					t1.name = t1.name.replaceAll("[\"\']","");
					Attributo n = new Attributo(t1.name + "="+t2.name, AttrType.ASSIGN);
					dic.name = dic.name + "," + n.name;
					((LinkedList<Attributo>)dic.value).add(n);
					RESULT = dic;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // dictorsetmaker ::= test COLON test 
            {
              Attributo RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					t1.name = t1.name.replaceAll("[\"\']","");
					Attributo n = new Attributo(t1.name + "="+t2.name, AttrType.ASSIGN);
					Attributo a = new Attributo(n.name, AttrType.DICT,  new LinkedList<Attributo>());
					((LinkedList<Attributo>)a.value).add(n);
					RESULT = a;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dictorsetmaker",63, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // listmaker ::= testlist 
            {
              Attributo RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo tlist = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = tlist;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("listmaker",65, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // testlist_comp ::= testlist 
            {
              Attributo RESULT =null;
		int tlistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tlistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo tlist = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = tlist;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("testlist_comp",64, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // atom ::= LCURLY dictorsetmaker RCURLY 
            {
              Attributo RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo d = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
					d.name = "{"+d.name+"}";
					RESULT = d;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // atom ::= LBRACK listmaker RBRACK 
            {
              Attributo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo l = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
					l.name = "{"+l.name+"}";
					l.type = AttrType.LIST;
					RESULT = l;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // atom ::= LPAREN testlist_comp RPAREN 
            {
              Attributo RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
					RESULT = new Attributo ("{"+t.name+"}",AttrType.TUPLE,(LinkedList<Attributo>)t.value);
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // atom ::= LCURLY RCURLY 
            {
              Attributo RESULT =null;
		RESULT=new Attributo("{}",AttrType.DICT, new LinkedList<Attributo>());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // atom ::= LBRACK RBRACK 
            {
              Attributo RESULT =null;
		RESULT=new Attributo("{}",AttrType.LIST, new LinkedList<Attributo>());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // atom ::= LPAREN RPAREN 
            {
              Attributo RESULT =null;
		RESULT=new Attributo("{}",AttrType.TUPLE, new LinkedList<Attributo>());
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // atom ::= unop atom 
            {
              Attributo RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					a.name = u.toString() + a.name;
					RESULT = a;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // atom ::= STRING 
            {
              Attributo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo(s,AttrType.STRING);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // atom ::= number 
            {
              Attributo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo n = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // atom ::= NAME 
            {
              Attributo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = new Attributo(n,AttrType.ID);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= atom trailer 
            {
              Attributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					a.name = a.name + t;
					RESULT = a;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= atom 
            {
              Attributo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo a = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // comparison ::= comparison binop expr 
            {
              Attributo RESULT =null;
		int comparisonleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int comparisonright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo comparison = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int binopleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int binopright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object binop = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					System.out.println("in comparison binop");
					comparison.name = comparison.name + binop.toString() + e.name;
					comparison.type = AttrType.OPERATION;
					RESULT = comparison;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // comparison ::= expr 
            {
              Attributo RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT = e;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comparison",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // test ::= lambdef 
            {
              Attributo RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo l = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = l;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // test ::= comparison 
            {
              Attributo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo c = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = c;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("test",60, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // stmt_rec ::= stmt_rec stmt 
            {
              Object RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object sr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					int tab = getIndentation();
					StringBuilder sb = new StringBuilder();
					for(int i = 0; i<tab; i++)
						sb.append("\t");
					RESULT = sr.toString() + sb.toString() + s.toString();
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // stmt_rec ::= stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					int tab = getIndentation();
					StringBuilder sb = new StringBuilder();
					for(int i = 0; i<tab; i++)
						sb.append("\t");
					RESULT = sb.toString()+s;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt_rec",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // suite ::= NEWLINE INDENT stmt_rec DEDENT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
				//System.out.println("TOKEN: " + parser.getToken());
				RESULT = "\n" + s;
				//System.out.println("suite->NEWLINE INDENT stmt_rec DEDENT: " + s);
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // suite ::= simple_stmt 
            {
              String RESULT =null;
		int simpleleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int simpleright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object simple = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("suite simple: " + simple.toString());RESULT = "\n"+simple.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("suite",75, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // except_clause ::= EXCEPT test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t1 + "," + t2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // except_clause ::= EXCEPT test AS test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t + " as "+t2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // except_clause ::= EXCEPT test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "except " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // except_clause ::= EXCEPT 
            {
              Object RESULT =null;
		RESULT = "except";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // except_clause_recoursive ::= except_clause_recoursive except_clause COLON suite 
            {
              Object RESULT =null;
		int ecrecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int ecrecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object ecrec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ecrec+""+ec+":"+s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // except_clause_recoursive ::= except_clause COLON suite 
            {
              Object RESULT =null;
		int ecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ec+":"+s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("except_clause_recoursive",51, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s3 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "try:" + s1 + excrec + "else:"+s2 + "finally:" + s3;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-9)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // try_stmt ::= TRY COLON suite except_clause_recoursive FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "try:" + s1 + excrec + "finally:" + s2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // try_stmt ::= TRY COLON suite except_clause_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "try:" + s1 + excrec + "else:"+s2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // try_stmt ::= TRY COLON suite except_clause_recoursive 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int excrecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int excrecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object excrec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "try:" + s1 + excrec;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // try_stmt ::= TRY COLON suite FINALLY COLON suite 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "try:" + s1 + "finally:"+s2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("try_stmt",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // for_stmt ::= FOR exprlist IN range_stmt COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					String[] range = (String[])r;
					if(range.length == 3)
						RESULT = "for " + e.name + "=" + range[0]+","+range[1] + "-1," + range[2]+" do " + s;
					else
						RESULT = "for " + e.name + "=" + range[0]+","+range[1]+"-1 do " + s;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // for_stmt ::= FOR expr IN test COLON suite 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo e = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					if (t.type == AttrType.DICT)
						RESULT = "for " + e.name + " in pairs(" + t.name + ") do " + s;
					else
						RESULT = "for __k, " + e.name + " in pairs(" + t.name + ") do " + s;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // while_stmt ::= WHILE test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
							
					RESULT = "while " + t.name.replaceAll("[\\{\\}]","") + " do " + s.toString();
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("while_stmt",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // else_recoursive ::= else_recoursive ELIF test COLON suite 
            {
              Object RESULT =null;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
							RESULT =else_rec + "elseif " + t.name.replaceAll("[\\{\\}]","") + " then " + s;
						
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // else_recoursive ::= ELIF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
							RESULT = "elseif " + t.name.replaceAll("[\\{\\}]","") + " then " + s;
						
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("else_recoursive",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // if_stmt ::= IF test COLON suite else_recoursive ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT="if " + t.name.replaceAll("[\\{\\}]","") + " then " + s1 + else_rec + "else " + s2;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // if_stmt ::= IF test COLON suite ELSE COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT="if " + t.name.replaceAll("[\\{\\}]","") + " then " + s1 + "else " + s2;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // if_stmt ::= IF test COLON suite 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT ="if " + t.name.replaceAll("[\\{\\}]","") + " then " + s;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // if_stmt ::= IF test COLON suite else_recoursive 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int else_recleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int else_recright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object else_rec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					RESULT ="if " + t.name.replaceAll("[\\{\\}]","") + " then " + s + else_rec;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("if_stmt",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // compound_stmt ::= funcdef 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("funcdef: " + f); RESULT = f.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // compound_stmt ::= try_stmt 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						pSynWarning("Try statement not supported in LUA");
						RESULT = "--[[Try statement not supported in LUA\n" + t.toString() + "]]";
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // compound_stmt ::= for_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = f.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // compound_stmt ::= while_stmt 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = w.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // compound_stmt ::= if_stmt 
            {
              Object RESULT =null;
		int if_stmtleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int if_stmtright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object if_stmt = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = if_stmt; System.out.println(if_stmt);
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("compound_stmt",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assert_stmt ::= ASSERT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "assert (" + t.name + ")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("assert_stmt",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // name_recoursive ::= name_recoursive COMMA NAME 
            {
              Object RESULT =null;
		int nrleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nrright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object nr = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=nr+","+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // name_recoursive ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("name_recoursive",17, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // global_stmt ::= GLOBAL name_recoursive 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="global "+n.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("global_stmt",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // dot_rec ::= DOT dot_rec 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT="."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // dot_rec ::= DOT 
            {
              Object RESULT =null;
		RESULT=".";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dot_rec",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // import_as_name ::= NAME AS NAME 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n1+"as"+n2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // import_as_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_name",26, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // import_as_names ::= import_as_name COMMA import_as_names 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object is = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=i+","+is;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // import_as_names ::= import_as_name 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT= i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_as_names",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // dotted_name ::= NAME DOT dotted_name 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n+"."+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // dotted_name ::= NAME 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_name",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // dotted_as_name ::= dotted_name AS NAME 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = d+"as"+n;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // dotted_as_name ::= dotted_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_name",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // dotted_as_names ::= dotted_as_names COMMA dotted_as_name 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object ds = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=ds+","+d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // dotted_as_names ::= dotted_as_name 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dotted_as_names",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // import_stmt ::= FROM DOT dot_rec IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from." + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // import_stmt ::= FROM DOT dot_rec IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from." + d+" import("+i.toString()+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // import_stmt ::= FROM DOT dot_rec IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from." + d+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // import_stmt ::= FROM dot_rec dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+n+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // import_stmt ::= FROM dot_rec dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+n+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // import_stmt ::= FROM dot_rec dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d+n+" import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // import_stmt ::= FROM dotted_name IMPORT import_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "from " + d+" import "+i;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // import_stmt ::= FROM dotted_name IMPORT LPAREN import_as_names RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "from " + d+" import("+i+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // import_stmt ::= FROM dotted_name IMPORT MULT 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = "from " + d + " import*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // import_stmt ::= IMPORT dotted_as_names 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "import " + d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("import_stmt",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // raise_stmt ::= RAISE test COMMA test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t3left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t3right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t3 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "raise " + t1 + ","+t2+","+t3;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // raise_stmt ::= RAISE test COMMA test 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "raise " + t1 + ","+t2;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // raise_stmt ::= RAISE test 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "raise " + t;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("raise_stmt",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // return_stmt ::= RETURN testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "return " + t.name;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("return_stmt",21, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // flow_stmt ::= raise_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		pSemWarning("Found raise statement, not supported in LUA"); RESULT = "--[[LUA doesn't support raise statement\n"+r+"]]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // flow_stmt ::= return_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = r;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // flow_stmt ::= CONTINUE 
            {
              Object RESULT =null;
		pSemWarning("LUA doesn't support continue statement");RESULT = "--[[LUA doesn't support continue statement\ncontinue]]";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // flow_stmt ::= BREAK 
            {
              Object RESULT =null;
		RESULT = "break ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("flow_stmt",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // del_stmt ::= DEL exprlist 
            {
              Object RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo explist = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = explist.name+" = nil";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("del_stmt",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // range_stmt ::= RANGE LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo e1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo e2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = new String[]{e1.name,e2.name};
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("range_stmt",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // range_stmt ::= RANGE LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).right;
		Attributo e1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Attributo e2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo e3 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = new String[]{e1.name,e2.name,e3.name};
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("range_stmt",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // print_stmt ::= PRINT testlist COMMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = "print (" + t.name+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // print_stmt ::= PRINT testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "print (" + t.name+")";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // print_stmt ::= PRINT 
            {
              Object RESULT =null;
		RESULT = "print ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("print_stmt",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // augassign ::= LSEQ 
            {
              Object RESULT =null;
		RESULT=">>";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // augassign ::= RSEQ 
            {
              Object RESULT =null;
		RESULT="<<";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // augassign ::= EXPEQ 
            {
              Object RESULT =null;
		RESULT="^";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // augassign ::= OREQ 
            {
              Object RESULT =null;
		RESULT=" or ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // augassign ::= ANDEQ 
            {
              Object RESULT =null;
		RESULT=" and ";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // augassign ::= MODEQ 
            {
              Object RESULT =null;
		RESULT="%";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // augassign ::= DIVEQ 
            {
              Object RESULT =null;
		RESULT="/";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // augassign ::= MULTEQ 
            {
              Object RESULT =null;
		RESULT="*";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // augassign ::= MINUSEQ 
            {
              Object RESULT =null;
		RESULT="-";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // augassign ::= PLUSEQ 
            {
              Object RESULT =null;
		RESULT="+";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("augassign",19, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_stmt ::= testlist ASSIGN testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					if(((LinkedList<Attributo>)t1.value).size() == ((LinkedList<Attributo>)t2.value).size())
					{
						RESULT = t1.name +"="+t2.name;
					}
					else if(((LinkedList<Attributo>)t1.value).size() == 1 && ((LinkedList<Attributo>)t2.value).size()>1)
					{
						RESULT = t1.name +"= {"+t2.name+"}";
					}
					else
					{
						pSynWarning("Error in assignment");
						throw new Exception("Error in assignment");
					}
					
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_stmt ::= testlist augassign testlist 
            {
              Object RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Attributo t1 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t2 = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
					//poiche' lua non supporta le assegnazioni +=, *=, /=, -=, **=, ^= si deve modificare la regola
					//String split[] = a.toString().split("=");
					RESULT = t1.name + "=" +t1.name+a+ t2.name;
				
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_stmt ::= testlist 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
			RESULT=t.name;	
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expr_stmt",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // small_stmt ::= comment 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo c = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = c.name;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // small_stmt ::= global_stmt 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int gright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
         				pSemWarning("Found global_stmt not supported in LUA");
         				RESULT = "--[[Global not supported in LUA\n"+g+"]]";
         			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // small_stmt ::= assert_stmt 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		System.out.println("Found assert_stmt"); RESULT = a;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // small_stmt ::= import_stmt 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						pSemWarning("Found import_stmt not supported in LUA");
						RESULT = "--[[Import not supported in LUA\n"+i+"]]";
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // small_stmt ::= flow_stmt 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						/*String tab = "";
						for(int i=0; i<getIndentation(); i++)
							tab+="\t";
						RESULT = tab+f;*/
						RESULT = f;
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // small_stmt ::= PASS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=p; System.out.println("Found PASS_stmt");
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // small_stmt ::= del_stmt 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT=d;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // small_stmt ::= range_stmt 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = r.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // small_stmt ::= print_stmt 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						/*String tab = "";
						for(int i=0; i<getIndentation(); i++)
							tab+="\t";
						RESULT = tab+p.toString();*/
						RESULT = p.toString();
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // small_stmt ::= expr_stmt 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						/*String tab = "";
						for(int i=0; i<getIndentation(); i++)
							tab+="\t";
						RESULT =tab+e.toString(); System.out.println("Found expr_stmt");*/
						RESULT = e.toString();
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // small_stmt_rec ::= small_stmt_rec SEMI small_stmt 
            {
              Object RESULT =null;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = srec.toString()+";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // small_stmt_rec ::= SEMI small_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = ";"+s.toString();
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("small_stmt_rec",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_stmt ::= small_stmt small_stmt_rec SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+ srec.toString() + ";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_stmt ::= small_stmt small_stmt_rec NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int srecleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int srecright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object srec = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+ srec.toString() + "\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_stmt ::= small_stmt SEMI NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		RESULT = s.toString()+";\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_stmt ::= small_stmt NEWLINE 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = s.toString()+"\n";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_stmt",3, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= compound_stmt 
            {
              Object RESULT =null;
		int compoundleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int compoundright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object compound = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						/*String tab = "";
						for(int i=0; i<getIndentation(); i++)
							tab+="\t";
						System.out.println("Compound indentation: " + getIndentation());	
						RESULT =tab+ compound+tab+"end\n";*/
						RESULT = compound + "end\n";
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= simple_stmt 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = s;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // defparameter ::= NAME ASSIGN test 
            {
              Attributo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo t = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						RESULT=new Attributo(n+"="+n+" or "+t.name, AttrType.ASSIGN);
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",61, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // defparameter ::= NAME 
            {
              Attributo RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
						RESULT = new Attributo(n,AttrType.ID);
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter",61, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // defparameter_recoursive ::= defparameter_recoursive COMMA defparameter 
            {
              LinkedList<Attributo> RESULT =null;
		int drleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int drright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		LinkedList<Attributo> dr = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo d = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								dr.add(d);
								RESULT = dr;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // defparameter_recoursive ::= defparameter 
            {
              LinkedList<Attributo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Attributo d = (Attributo)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								LinkedList<Attributo> list = new LinkedList<Attributo>();
								list.add(d);
								RESULT=list;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("defparameter_recoursive",72, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varargslist ::= MULTMULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								LinkedList<Attributo> list = new LinkedList<Attributo>();
								list.add(new Attributo(n,AttrType.DICT));
								RESULT = list; 
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varargslist ::= MULT NAME COMMA MULTMULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								LinkedList<Attributo> list = new LinkedList<Attributo>();
								list.add(new Attributo(n1,AttrType.LIST));
								list.add(new Attributo(n2,AttrType.DICT));
								RESULT = list;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varargslist ::= MULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								LinkedList<Attributo> list = new LinkedList<Attributo>();
								list.add(new Attributo(n,AttrType.LIST));
								RESULT = list; 
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varargslist ::= defparameter_recoursive COMMA MULT NAME COMMA MULTMULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).right;
		LinkedList<Attributo> d = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								d.add(new Attributo(n1,AttrType.LIST));
								d.add(new Attributo(n2,AttrType.DICT));
								RESULT = d;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varargslist ::= defparameter_recoursive COMMA MULTMULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		LinkedList<Attributo> d = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								d.add(new Attributo(n,AttrType.DICT));
								RESULT = d;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varargslist ::= defparameter_recoursive COMMA MULT NAME 
            {
              LinkedList<Attributo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		LinkedList<Attributo> d = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								d.add(new Attributo(n,AttrType.LIST));
								RESULT = d;
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varargslist ::= defparameter_recoursive 
            {
              LinkedList<Attributo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		LinkedList<Attributo> d = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
								RESULT = d; 
							
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("varargslist",73, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // parameters ::= LPAREN varargslist RPAREN 
            {
              LinkedList<Attributo> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		LinkedList<Attributo> v = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		
						RESULT = v;
					
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parameters ::= LPAREN RPAREN 
            {
              LinkedList<Attributo> RESULT =null;
		
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parameters",71, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // funcdef ::= DEF NAME parameters COLON suite 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).right;
		LinkedList<Attributo> p = (LinkedList<Attributo>)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				boolean vararg = false;
				String asyouwant = 
				    "#{INDENT}function #{ID}(#{PARAMS})\n"
				  + "#{BODY}";
				
				asyouwant = asyouwant.replaceAll("#\\{ID\\}", n);
				
				if (p == null)
					p = new LinkedList<Attributo>();
				
				for (Attributo a : p)
				{
					switch (a.type)
					{
						case ID:
							asyouwant = asyouwant.replaceAll("#\\{PARAMS\\}", a.name+",#{PARAMS}");
							break;
						/* *args */
						case LIST:
							if (!vararg)
							{
								asyouwant = asyouwant.replaceAll("#\\{PARAMS\\}", "#{PARAMS}...");
								vararg = true;
							}
							
							String args = 
							    "#{INDENT}\tlocal "+a.name+" = { }\n"
							  + "#{INDENT}\tfor i = 1,#arg-1 do\n"
							  + "#{INDENT}\t\t"+a.name+"[i] = arg[i]\n"
							  + "#{INDENT}\tend\n"
							  + "#{BODY}";
							
							asyouwant = asyouwant.replaceAll("#\\{BODY\\}", args);
							break;
						/* **kwargs */
						case DICT:
							if (!vararg)
							{
								asyouwant = asyouwant.replaceAll("#\\{PARAMS\\}", "...");
								vararg = true;
							}
							
							String kwargs = 
							    "#{INDENT}\tlocal "+a.name+" = arg[#arg]\n"
							  + "#{BODY}";
							
							asyouwant = asyouwant.replaceAll("#\\{BODY\\}", kwargs);
							break;
						case ASSIGN:
							String init = 
							    "#{INDENT}\tlocal "+a.name+"\n"
							  + "#{BODY}";
							
							asyouwant = asyouwant.replaceAll("#\\{PARAMS\\}", a.name.split("=")[0] +",#{PARAMS}");
							asyouwant = asyouwant.replaceAll("#\\{BODY\\}", init);
							break;
					}
				}
				StringBuilder indentation = new StringBuilder();
				
				for (int i = 0; i < getIndentation(); i++)
					indentation.append("\t");
				 
				asyouwant = asyouwant.replaceAll("#\\{INDENT\\}", indentation.toString());
				asyouwant = asyouwant.replaceAll("#\\{PARAMS\\}", "");
				asyouwant = asyouwant.replaceAll(",\\)", ")");
				asyouwant = asyouwant.replaceAll("#\\{BODY\\}", s);
				
				RESULT = asyouwant;
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("funcdef",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
									if(s==null && f!=null)
										RESULT= f.toString();
									else if (s!=null && f == null)
										RESULT = s.toString();
									else if (s!=null && f != null)
										RESULT = s.toString() + f.toString();
								
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		RESULT = "\n"+f;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.peek()).value;
		
				try {
					if(f != null)
					{
						dumpln(f.toString());
						BufferedWriter out = new BufferedWriter(new FileWriter(parser.dumpOutput));
						String outText = parser.outputBuffer.toString();
						out.write(outText);
						out.close();
					}
				}
	            catch (IOException e)
	            {
	            	e.printStackTrace();
	            }
			
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

