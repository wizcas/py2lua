
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 19 17:50:22 CET 2011
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 19 17:50:22 CET 2011
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\072\003\000\002\002\004\000\002\073" +
    "\004\000\002\073\004\000\002\073\002\000\002\074\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\003\003\000\002\003\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\010\004\000\002\010\005" +
    "\000\002\006\003\000\002\007\003\000\002\007\005\000" +
    "\002\011\004\000\002\011\005\000\002\011\005\000\002" +
    "\012\004\000\002\013\006\000\002\013\007\000\002\015" +
    "\003\000\002\015\003\000\002\014\003\000\002\014\005" +
    "\000\002\016\003\000\002\016\003\000\002\017\004\000" +
    "\002\017\005\000\002\030\004\000\002\031\006\000\002" +
    "\031\007\000\002\032\003\000\002\032\003\000\002\033" +
    "\004\000\002\033\005\000\002\020\006\000\002\021\004" +
    "\000\002\021\005\000\002\021\005\000\002\035\003\000" +
    "\002\035\005\000\002\035\004\000\002\036\005\000\002" +
    "\037\006\000\002\024\005\000\002\040\003\000\002\040" +
    "\004\000\002\022\005\000\002\022\005\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\041\005\000\002\043\006\000\002" +
    "\044\003\000\002\044\003\000\002\051\006\000\002\052" +
    "\006\000\002\047\003\000\002\047\004\000\002\047\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\003\000\002\054\003\000\002\050\005\000\002" +
    "\046\004\000\002\046\005\000\002\055\003\000\002\056" +
    "\003\000\002\057\003\000\002\060\003\000\002\045\005" +
    "\000\002\045\006\000\002\045\007\000\002\045\007\000" +
    "\002\061\003\000\002\061\005\000\002\061\006\000\002" +
    "\061\012\000\002\061\006\000\002\061\015\000\002\061" +
    "\003\000\002\061\006\000\002\061\006\000\002\061\011" +
    "\000\002\061\004\000\002\061\007\000\002\061\007\000" +
    "\002\061\012\000\002\061\004\000\002\062\003\000\002" +
    "\062\005\000\002\063\003\000\002\063\005\000\002\064" +
    "\005\000\002\066\003\000\002\066\005\000\002\067\003" +
    "\000\002\067\004\000\002\067\004\000\002\067\004\000" +
    "\002\070\003\000\002\070\005\000\002\070\005\000\002" +
    "\070\005\000\002\070\005\000\002\071\003\000\002\071" +
    "\005\000\002\071\005\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\036\002\ufffd\066\012\070\020\072\016\114" +
    "\021\115\010\116\035\117\017\120\026\121\025\122\022" +
    "\123\023\124\013\125\024\001\002\000\036\002\ufff6\066" +
    "\ufff6\070\ufff6\072\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6" +
    "\120\ufff6\121\ufff6\122\ufff6\123\ufff6\124\ufff6\125\ufff6\001" +
    "\002\000\036\002\ufffc\066\ufffc\070\ufffc\072\ufffc\114\ufffc" +
    "\115\ufffc\116\ufffc\117\ufffc\120\ufffc\121\ufffc\122\ufffc\123" +
    "\ufffc\124\ufffc\125\ufffc\001\002\000\036\002\ufff7\066\ufff7" +
    "\070\ufff7\072\ufff7\114\ufff7\115\ufff7\116\ufff7\117\ufff7\120" +
    "\ufff7\121\ufff7\122\ufff7\123\ufff7\124\ufff7\125\ufff7\001\002" +
    "\000\004\002\001\001\002\000\036\002\uff85\066\uff85\070" +
    "\uff85\072\uff85\114\uff85\115\uff85\116\uff85\117\uff85\120\uff85" +
    "\121\uff85\122\uff85\123\uff85\124\uff85\125\uff85\001\002\000" +
    "\036\002\ufff5\066\ufff5\070\ufff5\072\ufff5\114\ufff5\115\ufff5" +
    "\116\ufff5\117\ufff5\120\ufff5\121\ufff5\122\ufff5\123\ufff5\124" +
    "\ufff5\125\ufff5\001\002\000\004\067\115\001\002\000\036" +
    "\002\ufffb\066\ufffb\070\ufffb\072\ufffb\114\ufffb\115\ufffb\116" +
    "\ufffb\117\ufffb\120\ufffb\121\ufffb\122\ufffb\123\ufffb\124\ufffb" +
    "\125\ufffb\001\002\000\036\002\ufff2\066\ufff2\070\ufff2\072" +
    "\ufff2\114\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2" +
    "\122\ufff2\123\ufff2\124\ufff2\125\ufff2\001\002\000\036\002" +
    "\ufff9\066\ufff9\070\ufff9\072\ufff9\114\ufff9\115\ufff9\116\ufff9" +
    "\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124\ufff9\125" +
    "\ufff9\001\002\000\006\042\103\073\105\001\002\000\036" +
    "\002\uff84\066\uff84\070\uff84\072\uff84\114\uff84\115\uff84\116" +
    "\uff84\117\uff84\120\uff84\121\uff84\122\uff84\123\uff84\124\uff84" +
    "\125\uff84\001\002\000\004\071\050\001\002\000\036\002" +
    "\ufff8\066\ufff8\070\ufff8\072\ufff8\114\ufff8\115\ufff8\116\ufff8" +
    "\117\ufff8\120\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8\125" +
    "\ufff8\001\002\000\036\002\uff88\066\uff88\070\uff88\072\uff88" +
    "\114\uff88\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122" +
    "\uff88\123\uff88\124\uff88\125\uff88\001\002\000\036\002\uff87" +
    "\066\uff87\070\uff87\072\uff87\114\uff87\115\uff87\116\uff87\117" +
    "\uff87\120\uff87\121\uff87\122\uff87\123\uff87\124\uff87\125\uff87" +
    "\001\002\000\036\002\ufffd\066\012\070\020\072\016\114" +
    "\021\115\010\116\035\117\017\120\026\121\025\122\022" +
    "\123\023\124\013\125\024\001\002\000\036\002\uff82\066" +
    "\uff82\070\uff82\072\uff82\114\uff82\115\uff82\116\uff82\117\uff82" +
    "\120\uff82\121\uff82\122\uff82\123\uff82\124\uff82\125\uff82\001" +
    "\002\000\036\002\uff83\066\uff83\070\uff83\072\uff83\114\uff83" +
    "\115\uff83\116\uff83\117\uff83\120\uff83\121\uff83\122\uff83\123" +
    "\uff83\124\uff83\125\uff83\001\002\000\004\002\037\001\002" +
    "\000\036\002\ufffa\066\ufffa\070\ufffa\072\ufffa\114\ufffa\115" +
    "\ufffa\116\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa\123\ufffa" +
    "\124\ufffa\125\ufffa\001\002\000\036\002\ufff3\066\ufff3\070" +
    "\ufff3\072\ufff3\114\ufff3\115\ufff3\116\ufff3\117\ufff3\120\ufff3" +
    "\121\ufff3\122\ufff3\123\ufff3\124\ufff3\125\ufff3\001\002\000" +
    "\036\002\ufff4\066\ufff4\070\ufff4\072\ufff4\114\ufff4\115\ufff4" +
    "\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4\124" +
    "\ufff4\125\ufff4\001\002\000\036\002\ufff1\066\ufff1\070\ufff1" +
    "\072\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121" +
    "\ufff1\122\ufff1\123\ufff1\124\ufff1\125\ufff1\001\002\000\036" +
    "\002\ufffd\066\012\070\020\072\016\114\021\115\010\116" +
    "\035\117\017\120\026\121\025\122\022\123\023\124\013" +
    "\125\024\001\002\000\036\002\uff86\066\uff86\070\uff86\072" +
    "\uff86\114\uff86\115\uff86\116\uff86\117\uff86\120\uff86\121\uff86" +
    "\122\uff86\123\uff86\124\uff86\125\uff86\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\002\uffff" +
    "\001\002\000\004\071\102\001\002\000\004\071\101\001" +
    "\002\000\004\071\100\001\002\000\004\071\077\001\002" +
    "\000\010\067\uffee\071\uffee\073\uffee\001\002\000\006\062" +
    "\072\071\uffd2\001\002\000\012\021\053\062\051\065\054" +
    "\071\uffed\001\002\000\036\002\uffd5\066\uffd5\070\uffd5\072" +
    "\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5" +
    "\122\uffd5\123\uffd5\124\uffd5\125\uffd5\001\002\000\002\001" +
    "\002\000\004\071\uffdd\001\002\000\002\001\002\000\002" +
    "\001\002\000\010\021\053\062\uffcf\071\uffcf\001\002\000" +
    "\004\071\uffce\001\002\000\004\026\060\001\002\000\002" +
    "\001\002\000\012\021\053\024\065\071\uffdc\073\uffdc\001" +
    "\002\000\006\071\uffdb\073\uffdb\001\002\000\006\071\uffda" +
    "\073\uffda\001\002\000\006\071\uffd9\073\uffd9\001\002\000" +
    "\002\001\002\000\012\021\053\024\065\071\uffd8\073\uffd8" +
    "\001\002\000\006\071\uffd7\073\uffd7\001\002\000\010\067" +
    "\uffec\071\uffec\073\uffec\001\002\000\012\062\051\067\uffed" +
    "\071\uffed\073\uffed\001\002\000\004\071\uffd0\001\002\000" +
    "\004\071\uffd1\001\002\000\004\065\075\001\002\000\002" +
    "\001\002\000\006\062\uffcf\071\uffcf\001\002\000\036\002" +
    "\uffca\066\uffca\070\uffca\072\uffca\114\uffca\115\uffca\116\uffca" +
    "\117\uffca\120\uffca\121\uffca\122\uffca\123\uffca\124\uffca\125" +
    "\uffca\001\002\000\036\002\uffd4\066\uffd4\070\uffd4\072\uffd4" +
    "\114\uffd4\115\uffd4\116\uffd4\117\uffd4\120\uffd4\121\uffd4\122" +
    "\uffd4\123\uffd4\124\uffd4\125\uffd4\001\002\000\036\002\uffc9" +
    "\066\uffc9\070\uffc9\072\uffc9\114\uffc9\115\uffc9\116\uffc9\117" +
    "\uffc9\120\uffc9\121\uffc9\122\uffc9\123\uffc9\124\uffc9\125\uffc9" +
    "\001\002\000\036\002\uffd3\066\uffd3\070\uffd3\072\uffd3\114" +
    "\uffd3\115\uffd3\116\uffd3\117\uffd3\120\uffd3\121\uffd3\122\uffd3" +
    "\123\uffd3\124\uffd3\125\uffd3\001\002\000\004\073\uffcc\001" +
    "\002\000\004\073\113\001\002\000\036\002\ufff0\066\ufff0" +
    "\070\ufff0\072\ufff0\114\ufff0\115\ufff0\116\ufff0\117\ufff0\120" +
    "\ufff0\121\ufff0\122\ufff0\123\ufff0\124\ufff0\125\ufff0\001\002" +
    "\000\004\073\112\001\002\000\010\021\053\062\051\073" +
    "\uffed\001\002\000\004\073\111\001\002\000\036\002\uffd6" +
    "\066\uffd6\070\uffd6\072\uffd6\114\uffd6\115\uffd6\116\uffd6\117" +
    "\uffd6\120\uffd6\121\uffd6\122\uffd6\123\uffd6\124\uffd6\125\uffd6" +
    "\001\002\000\036\002\uffef\066\uffef\070\uffef\072\uffef\114" +
    "\uffef\115\uffef\116\uffef\117\uffef\120\uffef\121\uffef\122\uffef" +
    "\123\uffef\124\uffef\125\uffef\001\002\000\036\002\uffcd\066" +
    "\uffcd\070\uffcd\072\uffcd\114\uffcd\115\uffcd\116\uffcd\117\uffcd" +
    "\120\uffcd\121\uffcd\122\uffcd\123\uffcd\124\uffcd\125\uffcd\001" +
    "\002\000\004\073\uffcb\001\002\000\036\002\uffeb\066\uffeb" +
    "\070\uffeb\072\uffeb\114\uffeb\115\uffeb\116\uffeb\117\uffeb\120" +
    "\uffeb\121\uffeb\122\uffeb\123\uffeb\124\uffeb\125\uffeb\001\002" +
    "\000\004\067\142\001\002\000\004\067\141\001\002\000" +
    "\010\021\122\062\051\067\uffed\001\002\000\004\067\uffe8" +
    "\001\002\000\002\001\002\000\004\026\124\001\002\000" +
    "\002\001\002\000\012\021\uffe5\024\uffe5\062\uffe5\067\uffe5" +
    "\001\002\000\012\021\uffe3\024\uffe3\062\137\067\uffe3\001" +
    "\002\000\010\021\122\024\134\067\uffe7\001\002\000\012" +
    "\021\uffe4\024\uffe4\062\uffe4\067\uffe4\001\002\000\004\067" +
    "\uffe1\001\002\000\004\067\uffe0\001\002\000\004\067\uffe6" +
    "\001\002\000\002\001\002\000\010\021\122\024\134\067" +
    "\uffdf\001\002\000\004\067\uffde\001\002\000\002\001\002" +
    "\000\010\021\uffe2\024\uffe2\067\uffe2\001\002\000\036\002" +
    "\uffe9\066\uffe9\070\uffe9\072\uffe9\114\uffe9\115\uffe9\116\uffe9" +
    "\117\uffe9\120\uffe9\121\uffe9\122\uffe9\123\uffe9\124\uffe9\125" +
    "\uffe9\001\002\000\036\002\uffea\066\uffea\070\uffea\072\uffea" +
    "\114\uffea\115\uffea\116\uffea\117\uffea\120\uffea\121\uffea\122" +
    "\uffea\123\uffea\124\uffea\125\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\034\002\004\003\027\004\014\010\003\011" +
    "\010\020\031\021\030\022\013\024\032\072\026\073\006" +
    "\074\033\075\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\117\006\115\007\044\012" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\106\006\105\007\044\040\103\001" +
    "\001\000\002\001\001\000\020\005\046\006\043\007\044" +
    "\030\041\035\042\036\045\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\004" +
    "\003\027\004\014\010\003\011\010\020\031\021\030\022" +
    "\013\024\032\073\037\074\033\075\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\004\003\027\004\014\010\003\011\010\020" +
    "\031\021\030\022\013\024\032\073\035\074\033\075\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\051\001\001\000\002\001\001" +
    "\000\006\005\070\007\067\001\001\000\002\001\001\000" +
    "\004\025\056\001\001\000\004\005\054\001\001\000\004" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\060\001\001\000\010\031\062\032\061\033\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\065\001\001\000\010\031\062\032\066" +
    "\033\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\073\035\072\036\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\070\006" +
    "\113\007\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\120\001\001\000\002\001\001" +
    "\000\004\025\122\001\001\000\002\001\001\000\012\014" +
    "\126\015\125\026\124\027\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\130\016\132\017\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\134\026\124\027\127\001" +
    "\001\000\010\013\130\016\135\017\131\001\001\000\002" +
    "\001\001\000\012\014\137\015\125\026\124\027\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {



  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // number ::= BIN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // number ::= OCT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // number ::= HEX 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // number ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // number ::= LONGINT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // number ::= IMAGNUM 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",59, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // a_expr ::= a_expr MINUS m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // a_expr ::= a_expr PLUS m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // a_expr ::= m_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("a_expr",55, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // m_expr ::= m_expr MOD u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // m_expr ::= m_expr DIVIDE u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // m_expr ::= m_expr DIVDIV u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // m_expr ::= m_expr MULT u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // m_expr ::= u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("m_expr",54, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // u_expr ::= TILDE u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // u_expr ::= PLUS u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // u_expr ::= MINUS u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // u_expr ::= power 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("u_expr",53, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // power ::= primary EXPON u_expr 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("power",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // power ::= primary 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("power",52, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // keyword_item ::= NAME ASSIGN expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_item",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // keyword_arguments ::= keyword_arguments COMMA keyword_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_arguments",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // keyword_arguments ::= keyword_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("keyword_arguments",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // positional_arguments ::= positional_arguments COMMA expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // positional_arguments ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("positional_arguments",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // argument_list ::= EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // argument_list ::= MULT expression COMMA MULT expression COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // argument_list ::= MULT expression COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // argument_list ::= MULT expression COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // argument_list ::= MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // argument_list ::= keyword_arguments COMMA MULT expression COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-6)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // argument_list ::= keyword_arguments COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // argument_list ::= keyword_arguments COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // argument_list ::= keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // argument_list ::= positional_arguments COMMA keyword_arguments COMMA MULT expression COMMA keyword_arguments COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-10)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // argument_list ::= positional_arguments COMMA EXPON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // argument_list ::= positional_arguments COMMA keyword_arguments COMMA MULT expression COMMA keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-7)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // argument_list ::= positional_arguments COMMA MULT expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // argument_list ::= positional_arguments COMMA keyword_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // argument_list ::= positional_arguments 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("argument_list",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // call ::= primary LPAREN expression genexpr_for RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // call ::= primary LPAREN argument_list COMMA RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // call ::= primary LPAREN argument_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // call ::= primary LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("call",35, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ellipsis ::= TRIDOT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("ellipsis",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // stride ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stride",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // upper_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("upper_bound",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lower_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lower_bound",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // long_slice ::= short_slice COLON stride 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("long_slice",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // long_slice ::= short_slice COLON 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("long_slice",36, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // short_slice ::= lower_bound COLON upper_bound 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("short_slice",38, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // proper_slice ::= long_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // proper_slice ::= short_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // slice_item ::= ellipsis 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // slice_item ::= proper_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // slice_item ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // slice_list ::= slice_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // slice_list ::= slice_item COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // slice_list ::= slice_item 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_list",37, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // extended_slicing ::= primary LBRACK slice_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("extended_slicing",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // simple_slicing ::= primary LBRACK short_slice RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_slicing",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // slicing ::= extended_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // slicing ::= simple_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // subscription ::= primary LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscription",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // attributeref ::= primary DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // primary ::= call 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // primary ::= slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary ::= subscription 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= attributeref 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // set_display ::= LCURLY comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // set_display ::= LCURLY expression_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // yield_expression ::= YIELD expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // yield_expression ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // yield_atom ::= LPAREN yield_expression RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dict_comprehension ::= expression COLON expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_comprehension",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // key_datum_list ::= key_datum COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // key_datum_list ::= key_datum COMMA key_datum_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // key_datum_list ::= key_datum 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // dict_display ::= LCURLY dict_comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dict_display ::= LCURLY key_datum_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dict_display ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // generator_expression ::= LPAREN expression comp_for RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("generator_expression",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // comp_if ::= IF expression_nocond comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // comp_if ::= IF expression_nocond 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_iter ::= comp_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_iter ::= comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_for ::= FOR target_list IN or_test comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_for ::= FOR target_list IN or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comprehension ::= expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comprehension",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // list_if ::= IF old_expression list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // list_if ::= IF old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list_iter ::= list_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_iter ::= list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // old_expression_list ::= old_expression COMMA old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // old_expression_list ::= old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // old_expression ::= old_lambda_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // old_expression ::= or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // list_for ::= FOR target_list IN old_expression_list list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_for ::= FOR target_list IN old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_comprehension ::= expression list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_comprehension",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_display ::= LBRACK list_comprehension RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_display ::= LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_display ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp_recoursive ::= expression COMMA exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("exp_recoursive"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp_recoursive ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_list ::= exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("found explist"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression_list",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parenth_form ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parenth_form ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // enclosure ::= yield_atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // enclosure ::= set_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // enclosure ::= dict_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // enclosure ::= generator_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // enclosure ::= list_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // enclosure ::= parenth_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // literal ::= number 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atom ::= enclosure 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atom ::= literal 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atom ::= NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",58, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",57, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",56, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

