
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 19 11:59:51 CET 2011
//----------------------------------------------------

package pyGrammar;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 19 11:59:51 CET 2011
  */
public class PythonCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PythonCup() {super();}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public PythonCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\061\003\000\002\002\004\000\002\062" +
    "\004\000\002\062\004\000\002\062\002\000\002\063\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\010" +
    "\004\000\002\010\005\000\002\006\003\000\002\007\003" +
    "\000\002\007\005\000\002\011\004\000\002\011\005\000" +
    "\002\011\005\000\002\012\004\000\002\013\006\000\002" +
    "\013\007\000\002\015\003\000\002\015\003\000\002\014" +
    "\003\000\002\014\005\000\002\016\003\000\002\016\003" +
    "\000\002\017\004\000\002\017\005\000\002\030\004\000" +
    "\002\031\006\000\002\031\007\000\002\032\003\000\002" +
    "\032\003\000\002\033\004\000\002\033\005\000\002\020" +
    "\006\000\002\021\004\000\002\021\005\000\002\021\005" +
    "\000\002\035\003\000\002\035\005\000\002\035\004\000" +
    "\002\036\005\000\002\037\006\000\002\024\005\000\002" +
    "\040\003\000\002\040\004\000\002\022\005\000\002\022" +
    "\005\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\041\005\000" +
    "\002\043\006\000\002\044\003\000\002\044\003\000\002" +
    "\051\006\000\002\052\006\000\002\053\003\000\002\053" +
    "\003\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\055\003\000\002\056\003\000\002\057\003\000" +
    "\002\060\003\000\002\003\003\000\002\003\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\036\002\ufffd\065\012\067\020\071\016\113" +
    "\021\114\010\115\035\116\017\117\026\120\024\121\022" +
    "\122\025\123\014\124\023\001\002\000\036\002\ufff8\065" +
    "\ufff8\067\ufff8\071\ufff8\113\ufff8\114\ufff8\115\ufff8\116\ufff8" +
    "\117\ufff8\120\ufff8\121\ufff8\122\ufff8\123\ufff8\124\ufff8\001" +
    "\002\000\036\002\uffb5\065\uffb5\067\uffb5\071\uffb5\113\uffb5" +
    "\114\uffb5\115\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\122" +
    "\uffb5\123\uffb5\124\uffb5\001\002\000\036\002\ufffc\065\ufffc" +
    "\067\ufffc\071\ufffc\113\ufffc\114\ufffc\115\ufffc\116\ufffc\117" +
    "\ufffc\120\ufffc\121\ufffc\122\ufffc\123\ufffc\124\ufffc\001\002" +
    "\000\004\002\001\001\002\000\036\002\uffb1\065\uffb1\067" +
    "\uffb1\071\uffb1\113\uffb1\114\uffb1\115\uffb1\116\uffb1\117\uffb1" +
    "\120\uffb1\121\uffb1\122\uffb1\123\uffb1\124\uffb1\001\002\000" +
    "\036\002\ufff7\065\ufff7\067\ufff7\071\ufff7\113\ufff7\114\ufff7" +
    "\115\ufff7\116\ufff7\117\ufff7\120\ufff7\121\ufff7\122\ufff7\123" +
    "\ufff7\124\ufff7\001\002\000\004\066\115\001\002\000\036" +
    "\002\ufff4\065\ufff4\067\ufff4\071\ufff4\113\ufff4\114\ufff4\115" +
    "\ufff4\116\ufff4\117\ufff4\120\ufff4\121\ufff4\122\ufff4\123\ufff4" +
    "\124\ufff4\001\002\000\036\002\ufffb\065\ufffb\067\ufffb\071" +
    "\ufffb\113\ufffb\114\ufffb\115\ufffb\116\ufffb\117\ufffb\120\ufffb" +
    "\121\ufffb\122\ufffb\123\ufffb\124\ufffb\001\002\000\036\002" +
    "\ufff9\065\ufff9\067\ufff9\071\ufff9\113\ufff9\114\ufff9\115\ufff9" +
    "\116\ufff9\117\ufff9\120\ufff9\121\ufff9\122\ufff9\123\ufff9\124" +
    "\ufff9\001\002\000\006\042\103\072\104\001\002\000\036" +
    "\002\uffb0\065\uffb0\067\uffb0\071\uffb0\113\uffb0\114\uffb0\115" +
    "\uffb0\116\uffb0\117\uffb0\120\uffb0\121\uffb0\122\uffb0\123\uffb0" +
    "\124\uffb0\001\002\000\004\070\050\001\002\000\036\002" +
    "\uffb6\065\uffb6\067\uffb6\071\uffb6\113\uffb6\114\uffb6\115\uffb6" +
    "\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122\uffb6\123\uffb6\124" +
    "\uffb6\001\002\000\036\002\uffb4\065\uffb4\067\uffb4\071\uffb4" +
    "\113\uffb4\114\uffb4\115\uffb4\116\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\122\uffb4\123\uffb4\124\uffb4\001\002\000\036\002\ufffd" +
    "\065\012\067\020\071\016\113\021\114\010\115\035\116" +
    "\017\117\026\120\024\121\022\122\025\123\014\124\023" +
    "\001\002\000\036\002\uffae\065\uffae\067\uffae\071\uffae\113" +
    "\uffae\114\uffae\115\uffae\116\uffae\117\uffae\120\uffae\121\uffae" +
    "\122\uffae\123\uffae\124\uffae\001\002\000\036\002\uffb3\065" +
    "\uffb3\067\uffb3\071\uffb3\113\uffb3\114\uffb3\115\uffb3\116\uffb3" +
    "\117\uffb3\120\uffb3\121\uffb3\122\uffb3\123\uffb3\124\uffb3\001" +
    "\002\000\036\002\uffaf\065\uffaf\067\uffaf\071\uffaf\113\uffaf" +
    "\114\uffaf\115\uffaf\116\uffaf\117\uffaf\120\uffaf\121\uffaf\122" +
    "\uffaf\123\uffaf\124\uffaf\001\002\000\004\002\037\001\002" +
    "\000\036\002\ufffa\065\ufffa\067\ufffa\071\ufffa\113\ufffa\114" +
    "\ufffa\115\ufffa\116\ufffa\117\ufffa\120\ufffa\121\ufffa\122\ufffa" +
    "\123\ufffa\124\ufffa\001\002\000\036\002\ufff5\065\ufff5\067" +
    "\ufff5\071\ufff5\113\ufff5\114\ufff5\115\ufff5\116\ufff5\117\ufff5" +
    "\120\ufff5\121\ufff5\122\ufff5\123\ufff5\124\ufff5\001\002\000" +
    "\036\002\ufff3\065\ufff3\067\ufff3\071\ufff3\113\ufff3\114\ufff3" +
    "\115\ufff3\116\ufff3\117\ufff3\120\ufff3\121\ufff3\122\ufff3\123" +
    "\ufff3\124\ufff3\001\002\000\036\002\ufff6\065\ufff6\067\ufff6" +
    "\071\ufff6\113\ufff6\114\ufff6\115\ufff6\116\ufff6\117\ufff6\120" +
    "\ufff6\121\ufff6\122\ufff6\123\ufff6\124\ufff6\001\002\000\036" +
    "\002\ufffd\065\012\067\020\071\016\113\021\114\010\115" +
    "\035\116\017\117\026\120\024\121\022\122\025\123\014" +
    "\124\023\001\002\000\036\002\uffb2\065\uffb2\067\uffb2\071" +
    "\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120\uffb2" +
    "\121\uffb2\122\uffb2\123\uffb2\124\uffb2\001\002\000\004\002" +
    "\ufffe\001\002\000\004\002\000\001\002\000\004\002\uffff" +
    "\001\002\000\004\070\102\001\002\000\004\070\101\001" +
    "\002\000\004\070\100\001\002\000\004\070\077\001\002" +
    "\000\010\066\ufff0\070\ufff0\072\ufff0\001\002\000\006\061" +
    "\072\070\uffd4\001\002\000\012\021\053\061\051\064\054" +
    "\070\uffef\001\002\000\036\002\uffd7\065\uffd7\067\uffd7\071" +
    "\uffd7\113\uffd7\114\uffd7\115\uffd7\116\uffd7\117\uffd7\120\uffd7" +
    "\121\uffd7\122\uffd7\123\uffd7\124\uffd7\001\002\000\002\001" +
    "\002\000\004\070\uffdf\001\002\000\002\001\002\000\002" +
    "\001\002\000\010\021\053\061\uffd1\070\uffd1\001\002\000" +
    "\004\070\uffd0\001\002\000\004\026\060\001\002\000\002" +
    "\001\002\000\012\021\053\024\065\070\uffde\072\uffde\001" +
    "\002\000\006\070\uffdd\072\uffdd\001\002\000\006\070\uffdc" +
    "\072\uffdc\001\002\000\006\070\uffdb\072\uffdb\001\002\000" +
    "\002\001\002\000\012\021\053\024\065\070\uffda\072\uffda" +
    "\001\002\000\006\070\uffd9\072\uffd9\001\002\000\010\066" +
    "\uffee\070\uffee\072\uffee\001\002\000\012\061\051\066\uffef" +
    "\070\uffef\072\uffef\001\002\000\004\070\uffd2\001\002\000" +
    "\004\070\uffd3\001\002\000\004\064\075\001\002\000\002" +
    "\001\002\000\006\061\uffd1\070\uffd1\001\002\000\036\002" +
    "\uffcc\065\uffcc\067\uffcc\071\uffcc\113\uffcc\114\uffcc\115\uffcc" +
    "\116\uffcc\117\uffcc\120\uffcc\121\uffcc\122\uffcc\123\uffcc\124" +
    "\uffcc\001\002\000\036\002\uffd6\065\uffd6\067\uffd6\071\uffd6" +
    "\113\uffd6\114\uffd6\115\uffd6\116\uffd6\117\uffd6\120\uffd6\121" +
    "\uffd6\122\uffd6\123\uffd6\124\uffd6\001\002\000\036\002\uffcb" +
    "\065\uffcb\067\uffcb\071\uffcb\113\uffcb\114\uffcb\115\uffcb\116" +
    "\uffcb\117\uffcb\120\uffcb\121\uffcb\122\uffcb\123\uffcb\124\uffcb" +
    "\001\002\000\036\002\uffd5\065\uffd5\067\uffd5\071\uffd5\113" +
    "\uffd5\114\uffd5\115\uffd5\116\uffd5\117\uffd5\120\uffd5\121\uffd5" +
    "\122\uffd5\123\uffd5\124\uffd5\001\002\000\004\072\uffce\001" +
    "\002\000\036\002\ufff2\065\ufff2\067\ufff2\071\ufff2\113\ufff2" +
    "\114\ufff2\115\ufff2\116\ufff2\117\ufff2\120\ufff2\121\ufff2\122" +
    "\ufff2\123\ufff2\124\ufff2\001\002\000\004\072\113\001\002" +
    "\000\004\072\112\001\002\000\010\021\053\061\051\072" +
    "\uffef\001\002\000\004\072\111\001\002\000\036\002\uffd8" +
    "\065\uffd8\067\uffd8\071\uffd8\113\uffd8\114\uffd8\115\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\121\uffd8\122\uffd8\123\uffd8\124\uffd8" +
    "\001\002\000\036\002\ufff1\065\ufff1\067\ufff1\071\ufff1\113" +
    "\ufff1\114\ufff1\115\ufff1\116\ufff1\117\ufff1\120\ufff1\121\ufff1" +
    "\122\ufff1\123\ufff1\124\ufff1\001\002\000\036\002\uffcf\065" +
    "\uffcf\067\uffcf\071\uffcf\113\uffcf\114\uffcf\115\uffcf\116\uffcf" +
    "\117\uffcf\120\uffcf\121\uffcf\122\uffcf\123\uffcf\124\uffcf\001" +
    "\002\000\004\072\uffcd\001\002\000\036\002\uffed\065\uffed" +
    "\067\uffed\071\uffed\113\uffed\114\uffed\115\uffed\116\uffed\117" +
    "\uffed\120\uffed\121\uffed\122\uffed\123\uffed\124\uffed\001\002" +
    "\000\004\066\142\001\002\000\004\066\141\001\002\000" +
    "\010\021\122\061\051\066\uffef\001\002\000\004\066\uffea" +
    "\001\002\000\002\001\002\000\004\026\124\001\002\000" +
    "\002\001\002\000\012\021\uffe7\024\uffe7\061\uffe7\066\uffe7" +
    "\001\002\000\012\021\uffe5\024\uffe5\061\137\066\uffe5\001" +
    "\002\000\010\021\122\024\134\066\uffe9\001\002\000\012" +
    "\021\uffe6\024\uffe6\061\uffe6\066\uffe6\001\002\000\004\066" +
    "\uffe3\001\002\000\004\066\uffe2\001\002\000\004\066\uffe8" +
    "\001\002\000\002\001\002\000\010\021\122\024\134\066" +
    "\uffe1\001\002\000\004\066\uffe0\001\002\000\002\001\002" +
    "\000\010\021\uffe4\024\uffe4\066\uffe4\001\002\000\036\002" +
    "\uffeb\065\uffeb\067\uffeb\071\uffeb\113\uffeb\114\uffeb\115\uffeb" +
    "\116\uffeb\117\uffeb\120\uffeb\121\uffeb\122\uffeb\123\uffeb\124" +
    "\uffeb\001\002\000\036\002\uffec\065\uffec\067\uffec\071\uffec" +
    "\113\uffec\114\uffec\115\uffec\116\uffec\117\uffec\120\uffec\121" +
    "\uffec\122\uffec\123\uffec\124\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\034\002\005\003\027\004\014\010\003\011" +
    "\010\020\032\021\030\022\012\024\031\061\026\062\006" +
    "\063\033\064\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\005\117\006\115\007\044\012" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\106\006\105\007\044\040\104\001" +
    "\001\000\002\001\001\000\020\005\046\006\043\007\044" +
    "\030\041\035\042\036\045\037\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\002\005\003\027\004\014" +
    "\010\003\011\010\020\032\021\030\022\012\024\031\062" +
    "\037\063\033\064\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\002\005\003\027\004\014\010\003\011\010\020" +
    "\032\021\030\022\012\024\031\062\035\063\033\064\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\051\001\001\000\002\001\001" +
    "\000\006\005\070\007\067\001\001\000\002\001\001\000" +
    "\004\025\056\001\001\000\004\005\054\001\001\000\004" +
    "\031\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\060\001\001\000\010\031\062\032\061\033\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\065\001\001\000\010\031\062\032\066" +
    "\033\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\073\035\072\036\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\070\006" +
    "\113\007\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\120\001\001\000\002\001\001" +
    "\000\004\025\122\001\001\000\002\001\001\000\012\014" +
    "\126\015\125\026\124\027\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\130\016\132\017\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\134\026\124\027\127\001" +
    "\001\000\010\013\130\016\135\017\131\001\001\000\002" +
    "\001\001\000\012\014\137\015\125\026\124\027\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PythonCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PythonCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PythonCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PythonCup$actions {



  private final PythonCup parser;

  /** Constructor */
  CUP$PythonCup$actions(PythonCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PythonCup$do_action(
    int                        CUP$PythonCup$act_num,
    java_cup.runtime.lr_parser CUP$PythonCup$parser,
    java.util.Stack            CUP$PythonCup$stack,
    int                        CUP$PythonCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PythonCup$result;

      /* select the action based on the action number */
      switch (CUP$PythonCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // number ::= BIN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // number ::= OCT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // number ::= HEX 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // number ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // number ::= LONGINT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // number ::= IMAGNUM 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // number ::= FLOAT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("number",50, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= number 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("literal",1, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ellipsis ::= TRIDOT 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("ellipsis",46, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // stride ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stride",45, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // upper_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("upper_bound",44, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lower_bound ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("lower_bound",43, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // proper_slice ::= long_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // proper_slice ::= short_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("proper_slice",42, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // slice_item ::= ellipsis 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // slice_item ::= proper_slice 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // slice_item ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slice_item",41, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // extended_slicing ::= primary LBRACK slice_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("extended_slicing",40, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // simple_slicing ::= primary LBRACK short_slice RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("simple_slicing",39, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // slicing ::= extended_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // slicing ::= simple_slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("slicing",34, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // subscription ::= primary LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("subscription",33, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // attributeref ::= primary DOT NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("attributeref",31, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // primary ::= call 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= slicing 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= subscription 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary ::= attributeref 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("primary",32, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // set_display ::= LCURLY comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // set_display ::= LCURLY expression_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("set_display",16, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // yield_expression ::= YIELD expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // yield_expression ::= YIELD 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_expression",30, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // yield_atom ::= LPAREN yield_expression RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("yield_atom",18, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // dict_comprehension ::= expression COLON expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_comprehension",29, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // key_datum ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum",28, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // key_datum_list ::= key_datum COMMA 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // key_datum_list ::= key_datum COMMA key_datum_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // key_datum_list ::= key_datum 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("key_datum_list",27, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dict_display ::= LCURLY dict_comprehension RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dict_display ::= LCURLY key_datum_list RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dict_display ::= LCURLY RCURLY 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("dict_display",15, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // generator_expression ::= LPAREN expression comp_for RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("generator_expression",14, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_if ::= IF expression_nocond comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_if ::= IF expression_nocond 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_if",25, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp_iter ::= comp_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp_iter ::= comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_iter",24, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp_for ::= FOR target_list IN or_test comp_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comp_for ::= FOR target_list IN or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comp_for",23, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comprehension ::= expression comp_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("comprehension",22, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // list_if ::= IF old_expression list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // list_if ::= IF old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_if",13, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // list_iter ::= list_if 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // list_iter ::= list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_iter",12, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // old_expression_list ::= old_expression COMMA old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // old_expression_list ::= old_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression_list",10, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // old_expression ::= old_lambda_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // old_expression ::= or_test 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("old_expression",11, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_for ::= FOR target_list IN old_expression_list list_iter 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-4)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // list_for ::= FOR target_list IN old_expression_list 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_for",9, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-3)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // list_comprehension ::= expression list_for 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_comprehension",8, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // list_display ::= LBRACK list_comprehension RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // list_display ::= LBRACK expression_list RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // list_display ::= LBRACK RBRACK 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("list_display",7, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // exp_recoursive ::= expression COMMA exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("exp_recoursive"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // exp_recoursive ::= expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("exp_recoursive",5, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_list ::= exp_recoursive 
            {
              Object RESULT =null;
		System.out.println("found explist"); 
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("expression_list",4, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parenth_form ::= LPAREN expression_list RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-2)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parenth_form ::= LPAREN RPAREN 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("parenth_form",6, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // enclosure ::= yield_atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // enclosure ::= set_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // enclosure ::= dict_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // enclosure ::= generator_expression 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // enclosure ::= list_display 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // enclosure ::= parenth_form 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("enclosure",2, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // atom ::= enclosure 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // atom ::= literal 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atom ::= NAME 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("atom",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= atom 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("stmt",49, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // file_input_recoursive ::= 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // file_input_recoursive ::= stmt file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // file_input_recoursive ::= NEWLINE file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input_recoursive",48, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= file_input EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)).value;
		RESULT = start_val;
              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.elementAt(CUP$PythonCup$top-1)), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$PythonCup$parser.done_parsing();
          return CUP$PythonCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // file_input ::= file_input_recoursive 
            {
              Object RESULT =null;

              CUP$PythonCup$result = parser.getSymbolFactory().newSymbol("file_input",47, ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$PythonCup$stack.peek()), RESULT);
            }
          return CUP$PythonCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

