/* The following code was generated by JFlex 1.4.3 on 19/12/11 11.58 */


package pyGrammar;

import java_cup.runtime.*;
import java.io.IOException;

import pyGrammar.PythonSym;
import static pyGrammar.PythonSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 19/12/11 11.58 from the specification file
 * <tt>F:/Documenti/workspaceANTLR/py2lua/src/pyGrammar/Python.lex</tt>
 */
public final class PythonLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\45\1\17\1\6"+
    "\1\0\1\41\1\73\1\16\1\75\1\76\1\37\1\36\1\74\1\33"+
    "\1\31\1\40\1\5\1\30\6\25\2\23\1\103\1\46\1\43\1\35"+
    "\1\44\1\0\1\104\1\27\1\15\2\27\1\32\1\27\3\21\1\34"+
    "\1\21\1\22\2\21\1\24\2\21\1\12\2\21\1\13\2\21\1\26"+
    "\2\21\1\77\1\20\1\100\1\42\1\4\1\0\1\47\1\14\1\56"+
    "\1\51\1\53\1\62\1\67\1\71\1\61\1\34\1\55\1\57\1\66"+
    "\1\50\1\60\1\64\1\21\1\10\1\52\1\54\1\11\1\21\1\70"+
    "\1\63\1\65\1\21\1\101\1\7\1\102\1\72\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\1\6\4\3"+
    "\2\0\1\4\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\0\1\21\16\3\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\3\0\1\37\1\0"+
    "\1\40\1\41\3\3\1\0\1\42\2\0\1\42\2\0"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\3\1\57\10\3\1\60"+
    "\1\61\1\62\1\63\12\3\1\64\1\65\1\35\1\66"+
    "\1\37\1\0\3\3\1\42\1\0\2\42\1\67\1\70"+
    "\1\71\1\23\1\3\1\72\1\73\1\74\4\3\1\75"+
    "\5\3\1\76\12\3\5\0\1\3\1\77\1\100\1\101"+
    "\5\3\1\102\2\3\1\103\2\3\1\104\1\3\1\105"+
    "\1\3\1\106\3\0\2\3\1\107\4\3\1\110\1\111"+
    "\1\3\1\112\1\113\1\42\1\0\1\114\1\115\1\3"+
    "\1\116\1\117\1\3\1\120\1\42\1\3\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\212\0\317\0\u0114\0\u0159\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0678\0\212\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1"+
    "\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9"+
    "\0\u0a3e\0\212\0\u0a83\0\212\0\212\0\212\0\212\0\212"+
    "\0\212\0\212\0\212\0\212\0\u0ac8\0\u0b0d\0\212\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\212\0\212\0\u0cab\0\u0cf0"+
    "\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18"+
    "\0\212\0\212\0\212\0\212\0\212\0\212\0\212\0\212"+
    "\0\u0f5d\0\212\0\u0fa2\0\212\0\u0fe7\0\u102c\0\u1071\0\u10b6"+
    "\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254\0\317\0\317"+
    "\0\317\0\317\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u13f2"+
    "\0\u1437\0\u147c\0\u14c1\0\u1506\0\212\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\212\0\u1773\0\u0e49"+
    "\0\u17b8\0\212\0\212\0\212\0\317\0\u17fd\0\317\0\317"+
    "\0\317\0\u1842\0\u1887\0\u18cc\0\u1911\0\317\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\317\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u17b8\0\u1deb\0\u1e30\0\u1e75\0\317\0\317\0\317\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\317\0\u2013\0\u2058\0\317"+
    "\0\u209d\0\u20e2\0\317\0\u2127\0\317\0\u216c\0\317\0\u21b1"+
    "\0\u21f6\0\u223b\0\u2280\0\u22c5\0\317\0\u230a\0\u234f\0\u2394"+
    "\0\u23d9\0\317\0\317\0\u241e\0\317\0\317\0\u21b1\0\u2463"+
    "\0\317\0\317\0\u24a8\0\317\0\317\0\u24ed\0\317\0\u2463"+
    "\0\u2532\0\317\0\317";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\12\1\14\1\12\1\15\1\16"+
    "\1\0\2\5\1\17\1\5\1\17\2\5\1\17\1\20"+
    "\1\5\1\21\1\5\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\5\1\37\1\40\1\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\5\1\46\1\47\1\5\1\50\1\51\1\5"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\2\0\1\3\213\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\23\5\20\0\1\65\6\0\2\66\4\0\1\67\1\70"+
    "\1\71\1\65\1\72\1\0\1\65\1\73\1\74\1\0"+
    "\1\75\16\0\1\74\3\0\1\67\1\71\2\0\1\72"+
    "\21\0\1\7\2\0\4\7\1\0\75\7\35\0\1\76"+
    "\53\0\2\5\2\0\6\5\1\15\1\16\1\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\1\77\3\5\1\100"+
    "\16\5\17\0\2\5\2\0\1\13\1\5\1\13\3\5"+
    "\1\15\1\16\1\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\23\5\17\0\2\5\2\0\6\5\1\15\1\16"+
    "\1\0\10\5\1\0\1\5\1\0\1\5\12\0\23\5"+
    "\17\0\2\5\2\0\1\101\1\5\1\13\3\5\1\15"+
    "\1\16\1\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\23\5\13\0\2\102\1\0\13\102\1\103\1\102\1\104"+
    "\64\102\2\105\1\0\13\105\1\0\1\106\1\107\64\105"+
    "\5\0\1\17\14\0\1\67\1\17\1\0\1\17\2\0"+
    "\1\17\1\73\1\74\1\0\1\75\16\0\1\74\3\0"+
    "\1\67\32\0\1\73\15\0\1\73\1\0\1\73\2\0"+
    "\1\73\1\110\110\0\1\111\104\0\1\112\104\0\1\113"+
    "\104\0\1\114\1\0\1\27\102\0\1\115\104\0\1\116"+
    "\104\0\1\117\104\0\1\120\5\0\1\121\76\0\1\122"+
    "\6\0\1\123\75\0\1\124\53\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\1\5"+
    "\1\125\1\5\1\126\17\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\11\5"+
    "\1\127\11\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\4\5\1\130\16\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\10\5\1\131\3\5\1\132\6\5"+
    "\17\0\2\5\2\0\1\133\5\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\23\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\10\5\1\134\1\135\11\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\1\136"+
    "\22\5\17\0\2\5\2\0\1\137\5\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\23\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\1\5\1\140\1\5\1\141\7\5\1\142\3\5"+
    "\1\143\3\5\17\0\2\5\2\0\1\144\5\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\11\5\1\145"+
    "\1\146\10\5\17\0\2\5\2\0\1\147\5\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\1\150\22\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\12\5\1\151\10\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\10\5\1\152\12\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\12\5"+
    "\1\153\7\5\1\154\50\0\1\155\54\0\1\65\14\0"+
    "\1\67\1\70\1\0\1\65\2\0\1\65\1\73\1\74"+
    "\1\0\1\75\16\0\1\74\3\0\1\67\32\0\1\156"+
    "\22\0\1\156\61\0\1\70\15\0\1\70\1\0\1\70"+
    "\2\0\1\70\1\73\1\74\1\0\1\75\16\0\1\74"+
    "\36\0\1\157\17\0\1\157\2\0\1\157\61\0\1\160"+
    "\6\0\2\160\5\0\1\160\1\0\1\160\1\0\2\160"+
    "\1\0\1\160\14\0\1\160\1\0\1\160\1\0\1\160"+
    "\2\0\1\160\3\0\1\160\27\0\1\73\15\0\1\73"+
    "\1\0\1\73\2\0\1\73\1\0\1\74\1\0\1\75"+
    "\16\0\1\74\36\0\1\161\15\0\1\161\1\0\1\161"+
    "\2\0\1\161\2\0\1\162\2\0\1\162\52\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\12\5\1\163\10\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\5\5"+
    "\1\164\15\5\17\0\2\5\2\0\6\5\1\15\1\16"+
    "\1\0\10\5\1\0\1\5\1\0\1\5\12\0\4\5"+
    "\1\165\16\5\13\0\2\102\1\0\13\102\1\166\1\102"+
    "\1\104\64\102\16\0\1\167\73\0\1\102\2\0\6\102"+
    "\3\0\10\102\1\0\1\102\1\0\1\102\12\0\23\102"+
    "\13\0\2\105\1\0\13\105\1\0\1\170\1\107\66\105"+
    "\1\0\13\105\1\0\1\171\1\107\64\105\5\0\1\105"+
    "\2\0\6\105\3\0\10\105\1\0\1\105\1\0\1\105"+
    "\12\0\23\105\44\0\1\172\110\0\1\173\104\0\1\174"+
    "\53\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\2\5\1\175\20\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\3\5\1\176\17\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\5\5"+
    "\1\177\15\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\10\5\1\200\2\5"+
    "\1\201\7\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\3\5\1\202\6\5"+
    "\1\203\10\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\4\5\1\204\2\5"+
    "\1\205\13\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\16\5\1\206\4\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\1\207\22\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\1\5\1\210\21\5\17\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\17\5\1\211"+
    "\3\5\17\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\15\5\1\212\5\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\11\5\1\213\11\5\17\0\2\5\2\0"+
    "\1\214\5\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\23\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\1\5\1\215\21\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\12\5\1\216\10\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\3\5\1\217\17\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\4\5"+
    "\1\220\16\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\11\5\1\221\11\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\5\5\1\222\15\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\12\5\1\223\10\5\20\0\1\156\14\0\1\67"+
    "\5\0\1\156\26\0\1\67\32\0\1\157\14\0\1\67"+
    "\2\0\1\157\2\0\1\157\26\0\1\67\32\0\1\160"+
    "\6\0\2\160\4\0\1\67\1\160\1\0\1\160\1\0"+
    "\2\160\1\0\1\160\14\0\1\160\1\0\1\160\1\0"+
    "\1\160\2\0\1\160\1\67\2\0\1\160\27\0\1\161"+
    "\15\0\1\161\1\0\1\161\2\0\1\161\3\0\1\75"+
    "\55\0\1\161\15\0\1\161\1\0\1\161\2\0\1\161"+
    "\60\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\3\5\1\224\17\5\17\0\2\5"+
    "\2\0\1\5\1\225\4\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\23\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\1\226"+
    "\22\5\13\0\16\167\1\227\1\167\1\230\64\167\2\231"+
    "\1\232\13\231\1\232\1\171\1\233\64\231\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\4\5\1\234\16\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\4\5"+
    "\1\235\16\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\13\5\1\236\7\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\7\5\1\237\13\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\4\5\1\240\16\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\3\5"+
    "\1\241\17\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\5\5\1\242\15\5"+
    "\17\0\2\5\2\0\4\5\1\243\1\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\23\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\11\5\1\244\11\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\17\5"+
    "\1\245\3\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\1\246\22\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\1\5\1\247\21\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\3\5\1\250\17\5\17\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\10\5\1\251"+
    "\12\5\17\0\2\5\2\0\4\5\1\252\1\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\23\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\22\5\1\253\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\10\5"+
    "\1\254\12\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\4\5\1\255\16\5"+
    "\17\0\2\5\2\0\1\256\5\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\23\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\6\5\1\257\14\5\13\0\16\167\1\260\1\167\1\230"+
    "\64\167\5\0\1\167\2\0\6\167\3\0\10\167\1\0"+
    "\1\167\1\0\1\167\12\0\23\167\13\0\17\232\1\261"+
    "\1\262\64\232\5\0\1\231\2\0\6\231\3\0\10\231"+
    "\1\0\1\231\1\0\1\231\12\0\23\231\17\0\2\5"+
    "\2\0\1\263\5\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\23\5\17\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\15\5\1\264"+
    "\5\5\17\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\3\5\1\265\17\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\12\5\1\266\10\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\2\5\1\267\20\5\17\0\2\5\2\0\1\270\5\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\23\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\10\5\1\271\12\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\5\5\1\272\15\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\2\5"+
    "\1\273\20\5\17\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\12\0\1\274\22\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\4\5\1\275\16\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\1\5\1\276\21\5\13\0\16\167\1\277\1\167\1\230"+
    "\64\167\17\232\1\300\1\262\64\232\5\0\1\232\2\0"+
    "\6\232\3\0\10\232\1\0\1\232\1\0\1\232\12\0"+
    "\23\232\17\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\5\5\1\301\15\5\17\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\1\5\12\0\5\5\1\302\15\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\1\5\1\303\21\5\17\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\1\304\22\5"+
    "\17\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\1\5\12\0\5\5\1\305\15\5\17\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\12\0\10\5\1\306\12\5\17\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\12\0\10\5"+
    "\1\307\12\5\13\0\17\232\1\310\1\262\64\232\4\0"+
    "\2\5\2\0\1\5\1\311\4\5\3\0\10\5\1\0"+
    "\1\5\1\0\1\5\12\0\23\5\17\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\12\0"+
    "\16\5\1\312\4\5\17\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\1\5\12\0\4\5\1\313"+
    "\16\5\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9591];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\10\1\2\0\13\1\1\0\1\11"+
    "\16\1\1\11\1\1\11\11\1\1\1\0\1\11\3\0"+
    "\1\1\1\0\2\11\3\1\1\0\1\1\2\0\1\1"+
    "\2\0\10\11\1\1\1\11\1\1\1\11\30\1\1\11"+
    "\4\1\1\0\3\1\1\11\1\0\2\1\3\11\32\1"+
    "\5\0\24\1\3\0\15\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonLex(java.io.Reader in) {
  	// TODO: code that goes to constructor
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return sym(SEMI);
          }
        case 83: break;
        case 69: 
          { return sym(RAISE);
          }
        case 84: break;
        case 58: 
          { return sym(NOT);
          }
        case 85: break;
        case 74: 
          { return sym(WHILE);
          }
        case 86: break;
        case 76: 
          { return sym(ASSERT);
          }
        case 87: break;
        case 68: 
          { return sym(WITH);
          }
        case 88: break;
        case 38: 
          { return sym(MULTEQ);
          }
        case 89: break;
        case 60: 
          { return sym(DEF);
          }
        case 90: break;
        case 20: 
          { return sym(COMMA);
          }
        case 91: break;
        case 10: 
          { return sym(PLUS);
          }
        case 92: break;
        case 12: 
          { return sym(DIVIDE);
          }
        case 93: break;
        case 67: 
          { return sym(PASS);
          }
        case 94: break;
        case 28: 
          { return sym(AT);
          }
        case 95: break;
        case 22: 
          { return sym(RPAREN);
          }
        case 96: break;
        case 44: 
          { return sym(MAIEQ);
          }
        case 97: break;
        case 54: 
          { System.out.println("found hex"); return sym(HEX);
          }
        case 98: break;
        case 45: 
          { return sym(RSHIFT);
          }
        case 99: break;
        case 47: 
          { return sym(AS);
          }
        case 100: break;
        case 65: 
          { return sym(EXEC);
          }
        case 101: break;
        case 14: 
          { return sym(EXPON);
          }
        case 102: break;
        case 9: 
          { return sym(ASSIGN);
          }
        case 103: break;
        case 29: 
          { System.out.println("found oct"); return sym(OCT);
          }
        case 104: break;
        case 2: 
          { System.out.println("whitespace");
          }
        case 105: break;
        case 52: 
          { return sym(ANDEQ);
          }
        case 106: break;
        case 40: 
          { return sym(MODEQ);
          }
        case 107: break;
        case 78: 
          { return sym(LAMBDA);
          }
        case 108: break;
        case 36: 
          { return sym(EQ);
          }
        case 109: break;
        case 21: 
          { return sym(LPAREN);
          }
        case 110: break;
        case 43: 
          { return sym(LSHIFT);
          }
        case 111: break;
        case 50: 
          { return sym(IS);
          }
        case 112: break;
        case 16: 
          { return sym(MAIOR);
          }
        case 113: break;
        case 30: 
          { System.out.println("found longinteger"); return sym(LONGINT);
          }
        case 114: break;
        case 26: 
          { return sym(RCURLY);
          }
        case 115: break;
        case 5: 
          { System.out.println("found comment");
          }
        case 116: break;
        case 66: 
          { return sym(FROM);
          }
        case 117: break;
        case 33: 
          { return sym(OREQ);
          }
        case 118: break;
        case 64: 
          { return sym(ELIF);
          }
        case 119: break;
        case 4: 
          { System.out.println("found decimal"); return sym(DECIMAL);
          }
        case 120: break;
        case 72: 
          { return sym(PRINT);
          }
        case 121: break;
        case 71: 
          { return sym(CLASS);
          }
        case 122: break;
        case 42: 
          { return sym(MINEQ);
          }
        case 123: break;
        case 24: 
          { return sym(RBRACK);
          }
        case 124: break;
        case 81: 
          { return sym(FINALLY);
          }
        case 125: break;
        case 32: 
          { System.out.println("found imaginary number"); return sym(IMAGNUM);
          }
        case 126: break;
        case 77: 
          { return sym(EXCEPT);
          }
        case 127: break;
        case 79: 
          { return sym(IMPORT);
          }
        case 128: break;
        case 3: 
          { System.out.println("name"); return sym(NAME);
          }
        case 129: break;
        case 49: 
          { return sym(IN);
          }
        case 130: break;
        case 70: 
          { return sym(BREAK);
          }
        case 131: break;
        case 48: 
          { return sym(OR);
          }
        case 132: break;
        case 62: 
          { return sym(FOR);
          }
        case 133: break;
        case 39: 
          { return sym(DIVEQ);
          }
        case 134: break;
        case 73: 
          { return sym(YIELD);
          }
        case 135: break;
        case 25: 
          { return sym(LCURLY);
          }
        case 136: break;
        case 55: 
          { return sym(TRIDOT);
          }
        case 137: break;
        case 11: 
          { return sym(MULT);
          }
        case 138: break;
        case 35: 
          { return sym(MINUSEQ);
          }
        case 139: break;
        case 23: 
          { return sym(LBRACK);
          }
        case 140: break;
        case 15: 
          { return sym(MINOR);
          }
        case 141: break;
        case 13: 
          { return sym(MOD);
          }
        case 142: break;
        case 57: 
          { return sym(RSEQ);
          }
        case 143: break;
        case 63: 
          { return sym(ELSE);
          }
        case 144: break;
        case 37: 
          { return sym(PLUSEQ);
          }
        case 145: break;
        case 56: 
          { return sym(LSEQ);
          }
        case 146: break;
        case 51: 
          { return sym(IF);
          }
        case 147: break;
        case 61: 
          { return sym(TRY);
          }
        case 148: break;
        case 82: 
          { return sym(CONTINUE);
          }
        case 149: break;
        case 53: 
          { System.out.println("found bin"); return sym(BIN);
          }
        case 150: break;
        case 75: 
          { return sym(RETURN);
          }
        case 151: break;
        case 8: 
          { return sym(MINUS);
          }
        case 152: break;
        case 80: 
          { return sym(GLOBAL);
          }
        case 153: break;
        case 41: 
          { return sym(EXPEQ);
          }
        case 154: break;
        case 46: 
          { return sym(NEQ);
          }
        case 155: break;
        case 59: 
          { return sym(DEL);
          }
        case 156: break;
        case 7: 
          { return sym(DOT);
          }
        case 157: break;
        case 1: 
          { System.out.println("newline"); return sym(NEWLINE);
          }
        case 158: break;
        case 34: 
          { System.out.println("found string"); return sym(STRING);
          }
        case 159: break;
        case 27: 
          { return sym(COLON);
          }
        case 160: break;
        case 18: 
          { return sym(TILDE);
          }
        case 161: break;
        case 19: 
          { return sym(AND);
          }
        case 162: break;
        case 31: 
          { System.out.println("found float"); return sym(FLOAT);
          }
        case 163: break;
        case 6: 
          { return sym(PIPE);
          }
        case 164: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return sym(EOF); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
