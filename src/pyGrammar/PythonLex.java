/* The following code was generated by JFlex 1.4.3 on 16/12/11 17.26 */


package pyGrammar;

import java_cup.runtime.*;
import java.io.IOException;

import pyGrammar.PythonSym;
import static pyGrammar.PythonSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 16/12/11 17.26 from the specification file
 * <tt>F:/Documenti/workspaceANTLR/py2lua/src/pyGrammar/Python.lex</tt>
 */
public final class PythonLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\2\0\1\1\22\0\1\3\1\0\1\17\1\6"+
    "\3\0\1\16\3\0\1\33\1\0\1\33\1\31\1\0\1\5\1\30"+
    "\6\25\2\23\7\0\1\27\1\15\2\27\1\32\1\27\3\21\1\34"+
    "\1\21\1\22\2\21\1\24\2\21\1\12\2\21\1\13\2\21\1\26"+
    "\2\21\1\0\1\20\2\0\1\4\1\0\1\35\1\14\1\44\1\37"+
    "\1\41\1\50\1\55\1\57\1\47\1\34\1\43\1\45\1\54\1\36"+
    "\1\46\1\52\1\21\1\10\1\40\1\42\1\11\1\21\1\56\1\51"+
    "\1\53\1\21\1\0\1\7\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\1\5\4\3\2\0"+
    "\1\4\1\0\16\3\1\6\1\0\1\7\3\0\1\10"+
    "\1\0\1\11\3\3\1\0\1\12\2\0\1\12\1\0"+
    "\1\3\1\13\10\3\1\14\1\15\1\16\1\17\12\3"+
    "\1\20\1\6\1\21\1\10\1\0\3\3\1\12\1\0"+
    "\2\12\1\22\1\3\1\23\1\24\1\25\4\3\1\26"+
    "\5\3\1\27\12\3\5\0\1\3\1\30\1\31\1\32"+
    "\5\3\1\33\2\3\1\34\2\3\1\35\1\3\1\36"+
    "\1\3\1\37\3\0\2\3\1\40\4\3\1\41\1\42"+
    "\1\3\1\43\1\44\1\12\1\0\1\45\1\46\1\3"+
    "\1\47\1\50\1\3\1\51\1\12\1\3\1\52\1\53";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\140\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\140"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\140\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\u09f0\0\220\0\220\0\220\0\220\0\u0a20\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\140"+
    "\0\u0d80\0\u07b0\0\u0db0\0\220\0\u0de0\0\220\0\220\0\220"+
    "\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\220\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0f60\0\u0f90\0\220\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u0db0"+
    "\0\u1200\0\u1230\0\u1260\0\220\0\220\0\220\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\u1350\0\220\0\u1380\0\u13b0\0\220\0\u13e0"+
    "\0\u1410\0\220\0\u1440\0\220\0\u1470\0\220\0\u14a0\0\u14d0"+
    "\0\u1500\0\u1530\0\u1560\0\220\0\u1590\0\u15c0\0\u15f0\0\u1620"+
    "\0\220\0\220\0\u1650\0\220\0\220\0\u14a0\0\u1680\0\220"+
    "\0\220\0\u16b0\0\220\0\220\0\u16e0\0\220\0\u1680\0\u1710"+
    "\0\220\0\220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\0"+
    "\1\10\1\11\1\12\1\11\1\13\1\11\1\14\1\15"+
    "\1\0\2\5\1\16\1\5\1\16\2\5\1\16\1\17"+
    "\1\5\1\0\1\5\1\20\1\21\1\22\1\5\1\23"+
    "\1\24\1\5\1\25\1\26\1\27\1\30\1\31\1\5"+
    "\1\32\1\33\1\5\1\34\1\35\1\5\2\0\1\3"+
    "\141\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\24\5\5\0\1\36\6\0\2\37\4\0\1\40"+
    "\1\41\1\42\1\36\1\43\1\0\1\36\1\44\1\45"+
    "\1\0\1\46\4\0\1\45\3\0\1\40\1\42\2\0"+
    "\1\43\6\0\1\7\2\0\4\7\1\0\50\7\4\0"+
    "\2\5\2\0\6\5\1\14\1\15\1\0\10\5\1\0"+
    "\1\5\1\0\1\5\1\47\3\5\1\50\16\5\4\0"+
    "\2\5\2\0\1\12\1\5\1\12\3\5\1\14\1\15"+
    "\1\0\10\5\1\0\1\5\1\0\24\5\4\0\2\5"+
    "\2\0\6\5\1\14\1\15\1\0\10\5\1\0\1\5"+
    "\1\0\24\5\4\0\2\5\2\0\1\51\1\5\1\12"+
    "\3\5\1\14\1\15\1\0\10\5\1\0\1\5\1\0"+
    "\24\5\2\52\1\0\13\52\1\53\1\52\1\54\37\52"+
    "\2\55\1\0\13\55\1\0\1\56\1\57\37\55\5\0"+
    "\1\16\14\0\1\40\1\16\1\0\1\16\2\0\1\16"+
    "\1\44\1\45\1\0\1\46\4\0\1\45\3\0\1\40"+
    "\17\0\1\44\15\0\1\44\1\0\1\44\2\0\1\44"+
    "\33\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\2\5\1\60\1\5\1\61\17\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\12\5"+
    "\1\62\11\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\5\5\1\63\16\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\11\5"+
    "\1\64\3\5\1\65\6\5\4\0\2\5\2\0\1\66"+
    "\5\5\3\0\10\5\1\0\1\5\1\0\24\5\4\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\11\5\1\67\1\70\11\5\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\1\71\22\5"+
    "\4\0\2\5\2\0\1\72\5\5\3\0\10\5\1\0"+
    "\1\5\1\0\24\5\4\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\2\5\1\73\1\5\1\74"+
    "\7\5\1\75\3\5\1\76\3\5\4\0\2\5\2\0"+
    "\1\77\5\5\3\0\10\5\1\0\1\5\1\0\12\5"+
    "\1\100\1\101\10\5\4\0\2\5\2\0\1\102\5\5"+
    "\3\0\10\5\1\0\1\5\1\0\1\5\1\103\22\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\13\5\1\104\10\5\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\11\5\1\105\12\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\13\5\1\106\7\5\1\107\5\0\1\36\14\0"+
    "\1\40\1\41\1\0\1\36\2\0\1\36\1\44\1\45"+
    "\1\0\1\46\4\0\1\45\3\0\1\40\17\0\1\110"+
    "\22\0\1\110\34\0\1\41\15\0\1\41\1\0\1\41"+
    "\2\0\1\41\1\44\1\45\1\0\1\46\4\0\1\45"+
    "\23\0\1\111\17\0\1\111\2\0\1\111\34\0\1\112"+
    "\6\0\2\112\5\0\1\112\1\0\1\112\1\0\2\112"+
    "\1\0\1\112\2\0\1\112\1\0\1\112\1\0\1\112"+
    "\2\0\1\112\3\0\1\112\14\0\1\44\15\0\1\44"+
    "\1\0\1\44\2\0\1\44\1\0\1\45\1\0\1\46"+
    "\4\0\1\45\23\0\1\113\15\0\1\113\1\0\1\113"+
    "\2\0\1\113\2\0\1\114\30\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\13\5\1\115\10\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\6\5\1\116\15\5\4\0\2\5\2\0\6\5"+
    "\1\14\1\15\1\0\10\5\1\0\1\5\1\0\5\5"+
    "\1\117\16\5\2\52\1\0\13\52\1\120\1\52\1\54"+
    "\37\52\16\0\1\121\46\0\1\52\2\0\6\52\3\0"+
    "\10\52\1\0\1\52\1\0\24\52\2\55\1\0\13\55"+
    "\1\0\1\122\1\57\41\55\1\0\13\55\1\0\1\123"+
    "\1\57\37\55\5\0\1\55\2\0\6\55\3\0\10\55"+
    "\1\0\1\55\1\0\24\55\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\3\5\1\124\20\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\4\5\1\125\17\5\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\6\5\1\126\15\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\11\5\1\127\2\5\1\130\7\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\4\5"+
    "\1\131\6\5\1\132\10\5\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\5\5\1\133\2\5"+
    "\1\134\13\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\17\5\1\135\4\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\1\5"+
    "\1\136\22\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\2\5\1\137\21\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\20\5"+
    "\1\140\3\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\16\5\1\141\5\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\12\5"+
    "\1\142\11\5\4\0\2\5\2\0\1\143\5\5\3\0"+
    "\10\5\1\0\1\5\1\0\24\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\2\5\1\144"+
    "\21\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\13\5\1\145\10\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\4\5\1\146"+
    "\17\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\147\16\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\12\5\1\150"+
    "\11\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\6\5\1\151\15\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\13\5\1\152"+
    "\10\5\5\0\1\110\14\0\1\40\5\0\1\110\14\0"+
    "\1\40\17\0\1\111\14\0\1\40\2\0\1\111\2\0"+
    "\1\111\14\0\1\40\17\0\1\112\6\0\2\112\4\0"+
    "\1\40\1\112\1\0\1\112\1\0\2\112\1\0\1\112"+
    "\2\0\1\112\1\0\1\112\1\0\1\112\2\0\1\112"+
    "\1\40\2\0\1\112\14\0\1\113\15\0\1\113\1\0"+
    "\1\113\2\0\1\113\3\0\1\46\30\0\1\113\15\0"+
    "\1\113\1\0\1\113\2\0\1\113\33\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\4\5\1\153"+
    "\17\5\4\0\2\5\2\0\1\5\1\154\4\5\3\0"+
    "\10\5\1\0\1\5\1\0\24\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\1\155"+
    "\22\5\16\121\1\156\1\121\1\157\37\121\2\160\1\161"+
    "\13\160\1\161\1\123\1\162\37\160\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\5\5\1\163"+
    "\16\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\164\16\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\14\5\1\165"+
    "\7\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\10\5\1\166\13\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\5\5\1\167"+
    "\16\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\4\5\1\170\17\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\6\5\1\171"+
    "\15\5\4\0\2\5\2\0\4\5\1\172\1\5\3\0"+
    "\10\5\1\0\1\5\1\0\24\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\12\5\1\173"+
    "\11\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\20\5\1\174\3\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\1\175"+
    "\22\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\2\5\1\176\21\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\4\5\1\177"+
    "\17\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\11\5\1\200\12\5\4\0\2\5\2\0"+
    "\4\5\1\201\1\5\3\0\10\5\1\0\1\5\1\0"+
    "\24\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\23\5\1\202\4\0\2\5\2\0\6\5"+
    "\3\0\10\5\1\0\1\5\1\0\11\5\1\203\12\5"+
    "\4\0\2\5\2\0\6\5\3\0\10\5\1\0\1\5"+
    "\1\0\5\5\1\204\16\5\4\0\2\5\2\0\1\205"+
    "\5\5\3\0\10\5\1\0\1\5\1\0\24\5\4\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\7\5\1\206\14\5\16\121\1\207\1\121\1\157\37\121"+
    "\5\0\1\121\2\0\6\121\3\0\10\121\1\0\1\121"+
    "\1\0\24\121\17\161\1\210\1\211\37\161\5\0\1\160"+
    "\2\0\6\160\3\0\10\160\1\0\1\160\1\0\24\160"+
    "\4\0\2\5\2\0\1\212\5\5\3\0\10\5\1\0"+
    "\1\5\1\0\24\5\4\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\16\5\1\213\5\5\4\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\4\5\1\214\17\5\4\0\2\5\2\0\6\5\3\0"+
    "\10\5\1\0\1\5\1\0\13\5\1\215\10\5\4\0"+
    "\2\5\2\0\6\5\3\0\10\5\1\0\1\5\1\0"+
    "\3\5\1\216\20\5\4\0\2\5\2\0\1\217\5\5"+
    "\3\0\10\5\1\0\1\5\1\0\24\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\11\5"+
    "\1\220\12\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\6\5\1\221\15\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\3\5"+
    "\1\222\20\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\223\22\5\4\0\2\5"+
    "\2\0\6\5\3\0\10\5\1\0\1\5\1\0\5\5"+
    "\1\224\16\5\4\0\2\5\2\0\6\5\3\0\10\5"+
    "\1\0\1\5\1\0\2\5\1\225\21\5\16\121\1\226"+
    "\1\121\1\157\37\121\17\161\1\227\1\211\37\161\5\0"+
    "\1\161\2\0\6\161\3\0\10\161\1\0\1\161\1\0"+
    "\24\161\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\6\5\1\230\15\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\6\5\1\231"+
    "\15\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\2\5\1\232\21\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\1\5\1\233"+
    "\22\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\6\5\1\234\15\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\11\5\1\235"+
    "\12\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\11\5\1\236\12\5\17\161\1\237\1\211"+
    "\37\161\4\0\2\5\2\0\1\5\1\240\4\5\3\0"+
    "\10\5\1\0\1\5\1\0\24\5\4\0\2\5\2\0"+
    "\6\5\3\0\10\5\1\0\1\5\1\0\17\5\1\241"+
    "\4\5\4\0\2\5\2\0\6\5\3\0\10\5\1\0"+
    "\1\5\1\0\5\5\1\242\16\5";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\2\11\7\1\2\0\1\1\1\0\17\1"+
    "\1\0\1\11\3\0\1\1\1\0\1\11\3\1\1\0"+
    "\1\1\2\0\1\1\1\0\34\1\1\0\3\1\1\11"+
    "\1\0\34\1\5\0\24\1\3\0\15\1\1\0\13\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private Symbol sym(int type)
	{
		return sym(type, yytext());
	}

	private Symbol sym(int type, Object value)
	{
		return new Symbol(type, yyline, yycolumn, value);
	}

	private void error()
	throws IOException
	{
		throw new IOException("illegal text at line = "+yyline+", column = "+yycolumn+", text = '"+yytext()+"'");
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonLex(java.io.Reader in) {
  	// TODO: code that goes to constructor
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { System.out.println("found decimal"); return sym(DECIMAL);
          }
        case 44: break;
        case 21: 
          { return sym(DEF);
          }
        case 45: break;
        case 32: 
          { return sym(CLASS);
          }
        case 46: break;
        case 36: 
          { return sym(RETURN);
          }
        case 47: break;
        case 25: 
          { return sym(ELIF);
          }
        case 48: break;
        case 41: 
          { return sym(GLOBAL);
          }
        case 49: break;
        case 10: 
          { System.out.println("found string"); return sym(STRING);
          }
        case 50: break;
        case 38: 
          { return sym(EXCEPT);
          }
        case 51: break;
        case 23: 
          { return sym(FOR);
          }
        case 52: break;
        case 40: 
          { return sym(IMPORT);
          }
        case 53: break;
        case 24: 
          { return sym(ELSE);
          }
        case 54: break;
        case 34: 
          { return sym(YIELD);
          }
        case 55: break;
        case 20: 
          { return sym(DEL);
          }
        case 56: break;
        case 28: 
          { return sym(PASS);
          }
        case 57: break;
        case 1: 
          { System.out.println("newline"); return sym(NEWLINE);
          }
        case 58: break;
        case 17: 
          { System.out.println("found hex"); return sym(HEX);
          }
        case 59: break;
        case 15: 
          { return sym(IF);
          }
        case 60: break;
        case 29: 
          { return sym(WITH);
          }
        case 61: break;
        case 26: 
          { return sym(EXEC);
          }
        case 62: break;
        case 12: 
          { return sym(OR);
          }
        case 63: break;
        case 13: 
          { return sym(IN);
          }
        case 64: break;
        case 16: 
          { System.out.println("found bin"); return sym(BIN);
          }
        case 65: break;
        case 35: 
          { return sym(WHILE);
          }
        case 66: break;
        case 31: 
          { return sym(BREAK);
          }
        case 67: break;
        case 27: 
          { return sym(FROM);
          }
        case 68: break;
        case 8: 
          { System.out.println("found float"); return sym(FLOAT);
          }
        case 69: break;
        case 3: 
          { System.out.println("name"); return sym(NAME);
          }
        case 70: break;
        case 11: 
          { return sym(AS);
          }
        case 71: break;
        case 9: 
          { System.out.println("found imaginary number"); return sym(IMAGNUM);
          }
        case 72: break;
        case 7: 
          { System.out.println("found longinteger"); return sym(LONGINT);
          }
        case 73: break;
        case 19: 
          { return sym(NOT);
          }
        case 74: break;
        case 18: 
          { return sym(AND);
          }
        case 75: break;
        case 22: 
          { return sym(TRY);
          }
        case 76: break;
        case 33: 
          { return sym(PRINT);
          }
        case 77: break;
        case 30: 
          { return sym(RAISE);
          }
        case 78: break;
        case 43: 
          { return sym(CONTINUE);
          }
        case 79: break;
        case 2: 
          { System.out.println("whitespace");
          }
        case 80: break;
        case 42: 
          { return sym(FINALLY);
          }
        case 81: break;
        case 6: 
          { System.out.println("found oct"); return sym(OCT);
          }
        case 82: break;
        case 39: 
          { return sym(LAMBDA);
          }
        case 83: break;
        case 37: 
          { return sym(ASSERT);
          }
        case 84: break;
        case 14: 
          { return sym(IS);
          }
        case 85: break;
        case 5: 
          { System.out.println("found comment");
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return sym(EOF); 
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
